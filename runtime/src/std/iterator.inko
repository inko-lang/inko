# External and internal iteration for collections.
#
# Iterators are objects that can be used to traverse collections such as an
# `Array` or a `Map`. Typically iterators are implemented in one of two
# ways:
#
# 1. Internal iterators: these kind of iterators take care of the iteration
#    process and usually operate using some kind of closure.
# 2. External iterators: these iterators use some kind of cursor stored
#    somewhere and require you to manually advance the iterator.
#
# Both have their benefits and drawbacks. Internal iterators are easy to
# implement and typically faster, as they don't require the allocation of
# additional data structures. External iterators on the other hand can be
# composed together, suspended, and later resumed. External iterators can also
# be easily turned into internal iterators, while the inverse is not possible
# unless a language supports some form of coroutines or generators.
#
# Inko uses external iterators for the following reasons:
#
# 1. They are lazy by default.
# 2. Composing different iterators together is possible, without immediately
#    processing the entire input collection.
# 3. They do not require additional functionality such as continuations,
#    coroutines, or generators.
#
# Certain types such as `Array` may provide methods for internal iteration
# (e.g.  `Array.each`) to optimise common use cases. This provides a nice
# balance between the flexibility and power of external iterators with the
# performance of internal iterators.
#
# # Creating iterators manually
#
# Creating your own iterator is fairly straightforward and requires the
# two building blocks:
#
# 1. A object that tracks the state of the iteration process.
# 2. An implementation of the `Iterator` trait for this object.
#
# The `Iterator` trait requires that you implement two methods: `next?` and
# `next`. The method `next?` is used to determine if there is a value available
# for iteration while `next` returns this value (or `Nil` if no value is
# present).
#
# Let's say we want to create an iterator that yields the first 5 values in an
# `Array`, then terminates. We can do so as follows:
#
#     import std::iterator::Iterator
#
#     # This is our iterator. Most iterators typically store at least two
#     # values: the collection or iterator that we are iterating over, and some
#     # kind of cursor that we can use to determine where we are in this
#     # process.
#     object LimitedIterator!(T) {
#       @array: Array!(T)
#       @index: Integer
#
#       def init(array: Array!(T)) {
#         @array = array
#         @index = 0
#       }
#     }
#
#     # Next up we need to implement the Iterator trait.
#     impl Iterator!(T) for LimitedIterator!(T) {
#       def next? -> Boolean {
#         @index < 5
#       }
#
#       def next -> ?T {
#         let value = @array[@index]
#
#         @index += 1
#
#         value
#       }
#     }
#
#     # With the iterator in place we can use it as follows:
#     let mut iterator = LimitedIterator.new(Array.new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#
#     iterator.next? # => True
#     iterator.next  # => 1
#
#     iterator.next? # => True
#     iterator.next  # => 2
#
#     iterator.next? # => True
#     iterator.next  # => 3
#
#     iterator.next? # => True
#     iterator.next  # => 4
#
#     iterator.next? # => True
#     iterator.next  # => 5
#
#     iterator.next? # => False
#     iterator.next  # => Nil
#
# # Creating iterators using Enumerator
#
# Creating a separate object for every type of iteration requires quite a bit
# of boilerplate. Fortunately, the `Enumerator` type can be used to make it
# much easier to create an iterator. Using the `Enumerator` type we can convert
# the above iterator code to the following:
#
#     import std::iterator::Enumerator
#
#     def to_enum(array: Array!(Integer)) -> Iterator!(Integer) {
#       let mut index = 0
#
#       Enumerator.new(
#         while: { index < 5 },
#         yield: {
#           let value = array[index]
#
#           index += 1
#
#           value
#         }
#       )
#     }
#
#     let enum = to_enum(Array.new(1, 2, 3, 4, 5, 6, 7))
#
#     enum.next # => 1
#     enum.next # => 2
#     enum.next # => 3
#     enum.next # => 4
#     enum.next # => 5
#     enum.next # => Nil
#
# Here we use the method `to_enum` to generate a `Enumerator` for a given
# `Array`.
#
# When returning a `Enumerator!(T)` from a method, it's recommended to specify
# the return type as `Iterator!(T)`. This allows you to change the type in the
# future, without having to change the method's return type and possibly
# breaking code using it.
#
# It is recommended to use `Enumerator` instead of manually creating `Iterator`
# types, unless manually creating the iterator type is truly necessary.
#
# # Exposing Iterators
#
# The usual way of exposing an `Iterator` is by defining an `iter` method on a
# collection. If your collection can return different kinds of iterators you
# should use more descriptive method names such as `lines` for an `Iterator`
# that yields the lines in a file, or `characters` for an `Iterator` that
# returns the characters in a `String`.

# A generic iterator over a sequence of values of type `T`.
import std::pair::Pair

trait Iterator!(T) {
  # Advances the iterator and returns the next value.
  #
  # If no values are available, this method must return `Nil`. Since `Nil`
  # itself is a valid value to be returned, you should not check for `Nil` to
  # determine if the iterator has reached the end. Instead, check the result of
  # `next?` to determine if the iterator has any values left to produce.
  #
  # # Examples
  #
  # Returning the next value in an `Iterator`:
  #
  #     let numbers = Array.new(10, 20, 30)
  #     let mut iter = numbers.iter
  #
  #     iter.next # => 10
  #     iter.next # => 20
  #     iter.next # => 30
  def next -> ?T

  # Returns `True` if there are values available, `False` otherwise.
  #
  # This method _must not_ advance the iterator.
  #
  # # Examples
  #
  # Checking if there are any remaining values in an iterator:
  #
  #     let numbers = Array.new(10)
  #     let mut iter = numbers.iter
  #
  #     iter.next? # => True
  #     iter.next  # => 10
  #     iter.next? # => False
  def next? -> Boolean

  # Returns an `Iterator` that transforms values of type `T` to values of type
  # `R`.
  #
  # # Examples
  #
  # Multiplying the numbers in an `Array`:
  #
  #     let mut iter = Array.new(1, 2, 3)
  #       .iter
  #       .map do (number) { number * 2 }
  #
  #     iter.to_array # => Array.new(2, 4, 6)
  def map!(R)(block: do (T) -> R) -> Iterator!(R) {
    Enumerator.new(
      while: { next? },
      yield: { block.call(next!) }
    )
  }

  # Yields all the values in this iterator to the supplied `Block`.
  #
  # This method will advance the `Iterator` to the end.
  #
  # # Examples
  #
  # Iterating over all the values in an `Array`:
  #
  #     import std::stdio::stdout
  #
  #     Array.new(10, 20, 30).iter.each do (number) {
  #       stdout.print(number)
  #     }
  def each(block: do (T)) {
    { next? }.while_true {
      block.call(next!)
    }
  }

  # Returns the first value for which the supplied `Block` returns `True`.
  #
  # This method will advance the `Iterator` until either a value is found or we
  # run out of values.
  #
  # # Examples
  #
  # Finding the first number greated than 50 in an `Array`:
  #
  #     let numbers = Array.new(10, 20, 50, 80)
  #
  #     numbers.iter.find do (number) { number > 50 } # => 80
  def find(block: do (T) -> Boolean) -> ?T {
    each do (value) {
      block.call(value).if_true {
        return value
      }
    }

    Nil
  }

  # Returns `True` if `self` contains any value for which the `block` argument
  # returned `True`.
  #
  # This method stops iterating over the values after the first matching value.
  #
  # # Examples
  #
  # Checking if an `Iterator` contains a value:
  #
  #     Array.new(10, 20, 30).iter.any? do (value) { value >= 20 } # => True
  def any?(block: do (T) -> Boolean) -> Boolean {
    each do (value) {
      block.call(value).if_true {
        return True
      }
    }

    False
  }

  # Returns an `Iterator` that only produces values for which the supplied block
  # returned `True`.
  #
  # # Examples
  #
  # Selecting only certain values in an `Iterator`:
  #
  #     Array.new(10, 20, 30)
  #       .iter
  #       .select do (value) { value > 10 }
  #       .to_array # => Array.new(20, 30)
  def select(block: do (T) -> Boolean) -> Iterator!(T) {
    let mut found: ?T = Nil

    # The casts to ?Object here are needed until
    # https://gitlab.com/inko-lang/inko/issues/177 has been implemented.
    Enumerator.new(
      while: {
        { next?.and { (found as ?Object).nil? } }.while_true {
          let value = next

          block.call(value).if_true {
            found = value
          }
        }

        (found as ?Object).not_nil?
      },
      yield: {
        let yield = found!

        found = Nil

        yield
      }
    )
  }

  # Partitions the `Iterator` into a `Pair` of two `Array` objects.
  #
  # The first value of the `Pair` contains all values for which the supplied
  # block returned `True`. The second value contains all values for which the
  # block returned `False`.
  #
  # # Examples
  #
  # Partitioning an `Iterator`:
  #
  #     let values = Array.new(10, 20, 30, 40, 50)
  #     let pair = values.iter.partition do (value) { value >= 30 }
  #
  #     pair.first  # => Array.new(30, 40, 50)
  #     pair.second # => Array.new(10, 20)
  def partition(block: do (T) -> Boolean) -> Pair!(Array!(T), Array!(T)) {
    let true = Array.new
    let false = Array.new

    each do (value) {
      block
        .call(value)
        .if(true: { true.push(value) }, false: { false.push(value) })
    }

    Pair.new(true, false)
  }

  # Transforms the `Iterator` into an `Array`.
  #
  # This method will advance the iterator to the end.
  #
  # # Examples
  #
  # Transforming an `Iterator` back into an `Array`:
  #
  #     Array.new(1, 2, 3).iter.to_array # => Array.new(1, 2, 3)
  def to_array -> Array!(T) {
    let mut values = Array.new

    each do (value) {
      values.push(value)
    }

    values
  }
}

# A type for easily creating external iterators, without having to define your
# own `Iterator` objects.
#
# An `Enumerator` is typically created inside a method. This allows you to
# capture any variables you may need for the iterator's internal state, without
# having to expose these using methods.
object Enumerator!(T) {
  # The block to call to determine if a new value should be produced.
  @while: do -> Boolean

  # The block to call to produce a new value.
  @yield: do -> ?T

  # Returns a new `Enumerator` that produces values of type `T`.
  #
  # The `while` block must return a `Boolean` that indicates if the iterator
  # has any values left to produce.
  #
  # The `yield` block must return a value the iterator has produced, or `Nil`
  # if there are no more values.
  def init(while: do -> Boolean, yield: do -> ?T) {
    @while = while
    @yield = yield
  }
}

impl Iterator!(T) for Enumerator!(T) {
  # Advances the iterator and returns the next value.
  #
  # See the documentation of `Iterator.next` for more information.
  def next -> ?T {
    next?.if(true: { @yield.call }, false: { Nil })
  }

  # Returns `True` if there are values available, `False` otherwise.
  #
  # See the documentation of `Iterator.next?` for more information.
  def next? -> Boolean {
    @while.call
  }
}

# Returns an `Enumerator` that can be used to easily enumerate over an index
# based collection.
#
# This `Enumerator` will start at index 0, and increment the index until
# reaching the limit specified with the `max` argument. For every value, the
# supplied block is called and its return value will be the value produced by
# the `Enumerator`.
#
# # Examples
#
# Iterating over an `Array`:
#
#     import std::iterator::(self, Enumerator)
#
#     let numbers = Array.new(10, 20, 30)
#     let enum: Enumerator!(Integer) =
#       iterator.index_enumerator(numbers.length) do (index) {
#         numbers[index]
#       }
#
#     enum.next # => 10
#     enum.next # => 20
#     enum.next # => 30
def index_enumerator!(T)(
  max: Integer,
  block: do (Integer) -> ?T
) -> Enumerator!(T) {
  let mut index = 0

  Enumerator.new(
    while: { index < max },
    yield: {
      let value = block.call(index)

      index += 1

      value
    }
  )
}
