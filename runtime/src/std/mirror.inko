# ObjectMirror based reflection for objects
#
# This module provides a reflection API based on the concept of
# [Mirrors](https://en.wikipedia.org/wiki/Mirror_(programming)). A "ObjectMirror" is
# an object that provides a reflection API operating on another object. The use
# of mirrors for reflection provides several benefits:
#
# 1. Reflection is decoupled from the objects reflected upon.
# 2. Objects won't be polluted with reflection specific attributes.
# 3. It's possible to reflect on remote objects (e.g. an object in another
#    process or on another computer).
# 4. One can remove the mirror system entirely if desired, whereas removing
#    random methods defined on `Object` is much harder.
#
# Let's illustrate the differences between a mirror based API and the usual
# reflection APIs found in most languages. Say we have a class based language
# and we want to obtain the class of an object. In most languages we would
# achieve this by writing code along the lines of the following:
#
#     some_object.class
#
# Here the "class" message would return whatever the class is of the receiving
# object. Another example would be dynamically retrieving an attribute by its
# name. Typically this is done as follows:
#
#     some_object.get_attribute('my_attribute')
#
# In both cases the methods are exposed directly to the object.
#
# When using mirrors there are two steps required to perform reflection:
#
# 1. Create a mirror for a certain object.
# 2. Use the mirror's API to perform reflection.
#
# For our first example this means we'd end up with code along the lines of the
# following:
#
#     reflect_object(some_object).class
#
# Here the `reflect` method would return some kind of mirror and the `class`
# message would return the class of the object reflected upon. Translating the
# second example to a mirror based approach results in similar code:
#
#     reflect_object(some_object).get_attribute('my_attribute')
#
# # Using Mirrors
#
# Using mirrors in Inko is very straightforward. To do so you need to take two
# steps:
#
# 1. Import the `std::mirror` module into your module(s).
# 2. Use `std::mirror.reflect_object` to obtain a mirror for an object.
#
# Let's say we want to obtain the value of an attribute using the mirror API.
# We can do so as follows:
#
#     import std::mirror
#
#     object Person {
#       @name: String
#
#       def init(name: String) {
#         @name = name
#       }
#     }
#
#     let person = Person.new('alice')
#     let mirror = ::mirror.reflect_object(person)
#
#     mirror.get_attribute('@name') # => 'Alice'
#
# # Overhead
#
# Like most reflection systems mirrors do come with some overhead. In
# particular a mirror has to be allocated every time you need one. As such we
# recommend against using reflection in performance critical code.
import std::fs::path::Path
import std::module::Module
import std::trait::(IMPLEMENTED_TRAITS_ATTRIBUTE, Trait)

# The default name to use for objects that don't have an explicit name.
let DEFAULT_OBJECT_NAME = 'Object'

# The name of the attribute that contains the name of an object.
let OBJECT_NAME_ATTRIBUTE = '@_object_name'

# A generic mirror for a regular object.
object ObjectMirror {
  # The object that is being mirrored.
  @subject: Object

  def init(subject: Object) {
    @subject = subject
  }

  # Returns the object reflected upon.
  def subject -> Object {
    @subject
  }

  # Returns the prototype of the given object.
  #
  # # Examples
  #
  # Obtaining the prototype of an object:
  #
  #     import std::mirror
  #
  #     mirror.reflect_object('hello').prototype # => String
  def prototype -> Object {
    _INKOC.get_prototype(@subject)
  }

  # Sets the prototype of an object.
  #
  # # Examples
  #
  # Setting the prototype of an object:
  #
  #     import std::mirror
  #
  #     let obj = Object.new
  #     let obj_mirror = mirror.reflect_object(obj)
  #
  #     obj_mirror.prototype          # => Object
  #     obj_mirror.prototype = String # => String
  #     obj_mirror.prototype          # => String
  def prototype=!(P)(prototype: P) -> P {
    _INKOC.set_prototype(@subject, prototype)
  }

  # Returns the value of an attribute.
  #
  # Since attributes may not be set this method can return a value of any type.
  #
  # # Examples
  #
  # Getting the value of an undefined attribute:
  #
  #     import std::mirror
  #
  #     let obj = Object.new
  #     let mirror = ::mirror.reflect_object(obj)
  #
  #     mirror.get_attribute(obj, 'name') # => Nil
  #
  # Getting the value of an existing attribute:
  #
  #     import std::mirror
  #
  #     let mut obj = Object.new
  #     let mirror = ::mirror.reflect_object(obj)
  #
  #     mirror.set_attribute('name', 'Alice')
  #     mirror.get_attribute('name') # => 'Alice'
  def get_attribute(name: String) {
    _INKOC.get_attribute(@subject, name)
  }

  # Sets the attribute of an object to the given value, returning the stored
  # value.
  #
  # # Examples
  #
  # Setting an attribute:
  #
  #     import std::mirror
  #
  #     let mut obj = Object.new
  #
  #     mirror.reflect_object(obj).set_attribute('name', 'Alice') # => 'Alice'
  def set_attribute!(V)(name: String, value: V) -> V {
    _INKOC.set_attribute(@subject, name, value)
  }

  # Returns the names of all the attributes defined directly on the subject.
  #
  # # Examples
  #
  # Getting the attributes of an object:
  #
  #     import std::mirror
  #
  #     object Person {
  #       @name: String
  #
  #       def init(name: String) {
  #         @name = name
  #       }
  #     }
  #
  #     let person = Person.new('Alice')
  #     let mirror = ::mirror.reflect_object(person)
  #
  #     mirror.attributes # => Array.new('@name')
  def attributes -> Array!(String) {
    _INKOC.get_attribute_names(@subject)
  }

  # Returns the names of all instance attributes defined directly on the
  # subject.
  #
  # Getting the attributes of an object:
  #
  #     import std::mirror
  #
  #     object Person {
  #       @name: String
  #
  #       def init(name: String) {
  #         @name = name
  #       }
  #     }
  #
  #     let person = Person.new('Alice')
  #
  #     ::mirror.reflect_object(person).attributes # => Array.new('@name')
  #     ::mirror.reflect_object(Person).attributes # => Array.new('@_object_name')
  def instance_attributes -> Array!(String) {
    let mut instance_attributes = Array.new

    attributes.each do (attribute) {
      attribute.starts_with?('@').if_true {
        instance_attributes.push(attribute)
      }
    }

    instance_attributes
  }

  # Returns `True` if the subject is an instance of the given object.
  #
  # # Examples
  #
  # Checking if a `String` is an instance of `String`:
  #
  #     import std::mirror
  #
  #     let string_mirror = mirror.reflect_object('hello')
  #
  #     string_mirror.instance_of?(String) # => True
  #     string_mirror.instance_of?(Integer) # => False
  def instance_of?(other: Object) -> Boolean {
    let mut proto = prototype

    {
      proto.equal?(other).if_true {
        return True
      }

      proto = _INKOC.get_prototype(proto) as Object

      proto.equal?(Nil).if_true {
        return False
      }
    }.loop
  }

  # Returns `True` if the subject implements the given trait.
  #
  # # Examples
  #
  # Checking if an object implements a trait:
  #
  #     import std::mirror
  #
  #     trait Trait1 {}
  #     trait Trait2 {}
  #
  #     object ExampleObject impl Trait1 {}
  #
  #     let mirror = mirror.reflect_object(ExampleObject.new)
  #
  #     mirror.implements_trait?(Trait1) # => True
  #     mirror.implements_trait?(Trait2) # => False
  def implements_trait?(find: Trait) -> Boolean {
    let mut subject = @subject

    {
      let traits = _INKOC.get_attribute(subject, IMPLEMENTED_TRAITS_ATTRIBUTE)

      traits.if_true {
        _INKOC.get_attribute(traits, find).if_true {
          return True
        }
      }

      subject = _INKOC.get_prototype(subject) as Object

      # If an object does not have a prototype (e.g. Object), Nil will be
      # returned. Since we don't know the difference between "has no prototype"
      # and "the prototype is Nil", we will just bail out once we hit Nil as the
      # prototype. This works fine for Nil itself, because there is only a
      # single instance of it.
      subject.equal?(Nil).if_true {
        return False
      }
    }.loop
  }

  # Returns the name of an object.
  #
  # If the object doesn't have a name, a default name will be returned instead.
  #
  # # Examples
  #
  # Returning the name of an object:
  #
  #     import std::mirror
  #
  #     object Person {}
  #
  #     let mirror = ::mirror.reflect_object(Person)
  #
  #     mirror.name # => 'Person'
  def name -> String {
    let name = get_attribute(OBJECT_NAME_ATTRIBUTE) as ?String

    name.if(true: { name! }, false: { DEFAULT_OBJECT_NAME })
  }

  # Returns the traits implemented by the subject.
  #
  # # Examples
  #
  # Obtaining the implemented traits of an object:
  #
  #     import std::conversion::ToString
  #     import std::mirror
  #
  #     object Person impl ToString {
  #       def to_string -> String {
  #         'Alice'
  #       }
  #     }
  #
  #     mirror.reflect_object(Person).implemented_traits # => Array.new(ToString)
  def implemented_traits -> Array!(Trait) {
    let impl_set = get_attribute(IMPLEMENTED_TRAITS_ATTRIBUTE) as Object

    impl_set.if_false {
      return Array.new
    }

    _INKOC.get_attribute_names(impl_set) as Dynamic as Array!(Trait)
  }
}

# A mirror for a `Block`.
object BlockMirror {
  # The block that is being mirrored.
  @subject: Block

  def init(subject: Block) {
    @subject = subject
  }

  # Returns the name of the block.
  #
  # # Examples
  #
  # Returning the name of a method:
  #
  #     import std::mirror
  #
  #     let method = def example {}
  #     let mirror = ::mirror.reflect_block(method)
  #
  #     mirror.name # => 'example'
  def name -> String {
    _INKOC.block_metadata(@subject, 0) as String
  }

  # Returns the file path of the file the block is defined in.
  #
  # # Examples
  #
  # Returning the file path of a method:
  #
  #     import std::mirror
  #
  #     let method = def example {}
  #     let mirror = ::mirror.reflect_block(method)
  #
  #     mirror.path # => Path
  def path -> Path {
    let path_str = _INKOC.block_metadata(@subject, 1) as String

    Path.new(path_str)
  }

  # Returns the line number the block is defined on.
  #
  # # Examples
  #
  # Returning the line number of a method:
  #
  #     import std::mirror
  #
  #     let method = def example {}
  #     let mirror = ::mirror.reflect_block(method)
  #
  #     mirror.line # => 3
  def line -> Integer {
    _INKOC.block_metadata(@subject, 2) as Integer
  }

  # Returns the argument names of the block.
  #
  # # Examples
  #
  # Returning the argument names of a method:
  #
  #     import std::mirror
  #
  #     let method = def example(number) {}
  #     let mirror = ::mirror.reflect_block(method)
  #
  #     mirror.argument_names # => Array.new('@subject', 'number')
  def argument_names -> Array!(String) {
    _INKOC.block_metadata(@subject, 3) as Array!(String)
  }

  # Returns the number of required arguments.
  #
  # # Examples
  #
  # Returning the argument names of a method:
  #
  #     import std::mirror
  #
  #     let method = def example(number) {}
  #     let mirror = ::mirror.reflect_block(method)
  #
  #     mirror.required_arguments # => 2
  def required_arguments -> Integer {
    _INKOC.block_metadata(@subject, 4) as Integer
  }

  # Returns `True` if this block defines a rest argument.
  #
  # # Examples
  #
  # Checking if a block defines a rest argument:
  #
  #     import std::mirror
  #
  #     let method = def example(*rest) {}
  #     let mirror = ::mirror.reflect_block(method)
  #
  #     mirror.rest_argument? # => True
  def rest_argument? -> Boolean {
    _INKOC.block_metadata(@subject, 5) as Boolean
  }
}

# A mirror for a `Module`.
object ModuleMirror {
  # The mirror to use for obtaining generic object information.
  @mirror: ObjectMirror

  def init(subject: Module) {
    @mirror = ObjectMirror.new(subject)
  }

  # Returns the name of the module.
  def name -> String {
    @mirror.get_attribute('@name') as String
  }

  # Returns the path of the source file that defined the module.
  def path -> Path {
    let raw_path = @mirror.get_attribute('@path') as String

    Path.new(raw_path)
  }
}

# Returns a regular mirror for the given object.
def reflect_object(subject: Object) -> ObjectMirror {
  ObjectMirror.new(subject)
}

# Returns a mirror for the given `Block`.
def reflect_block(subject: Block) -> BlockMirror {
  BlockMirror.new(subject)
}

# Returns a mirror for the given `Module`.
def reflect_module(subject: Module) -> ModuleMirror {
  ModuleMirror.new(subject)
}
