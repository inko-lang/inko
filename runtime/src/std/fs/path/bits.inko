# Functionality used by `std::fs::path` to implement bits of the `Path` type.
#
# This module is not part of the public API and should not be used directly.
import std::os

# The separator to use for Unix path components.
let UNIX_SEPARATOR = '/'

# The byte separator to use for Unix path components.
let UNIX_SEPARATOR_BYTE = UNIX_SEPARATOR.byte(0)

# The primary separator of path components.
let SEPARATOR = os.windows?.if(true: { '\\' }, false: { UNIX_SEPARATOR })

# The primary byte separator to use for path components.
let SEPARATOR_BYTE = SEPARATOR.byte(0)

# The alternative separator byte of path components, if there is any.
let ALT_SEPARATOR_BYTE =
  os.windows?.if(true: { UNIX_SEPARATOR_BYTE }, false: { -1 })

# The byte range for lowercase Windows drive letters (a..z)
let WINDOWS_LOWER_DRIVE_LETTERS = 97..122

# The byte range for uppercase Windows drive letters (A..Z)
let WINDOWS_UPPER_DRIVE_LETTERS = 65..90

# The byte for a single colon (":").
let COLON_BYTE = 58

# Returns `True` if the given `String` starts with a Windows drive name, such as
# C:/.
def starts_with_windows_drive_name?(path: String) -> Boolean {
  let first_byte = path.byte(index: 0)

  WINDOWS_LOWER_DRIVE_LETTERS.cover?(first_byte)
    .or { WINDOWS_UPPER_DRIVE_LETTERS.cover?(first_byte) }
    .and { path.byte(index: 1) == COLON_BYTE }
    .and { path_separator?(path.byte(index: 2)) }
}

# Returns `True` if the byte is a valid path separator byte.
def path_separator?(byte: Integer) -> Boolean {
  (byte == SEPARATOR_BYTE).or { byte == ALT_SEPARATOR_BYTE }
}

# Returns the number of bytes leading up to the last path separator.
#
# If no separator could be found, `-1` is returned.
def bytes_before_last_separator(path: String) -> Integer {
  path.empty?.if_true {
    return -1
  }

  let windows_drive_path =
    os.windows?.and { starts_with_windows_drive_name?(path) }

  # If the path starts with a Windows drive name (e.g. "C:\foo") we don't want
  # to trim off the \ in C:\, as it's part of the drive name.
  let trim_until = windows_drive_path.if(true: { 2 }, false: { 0 })

  let mut index = path.bytesize - 1

  # Trailing separators should be ignored, so we'll skip over them until the
  # first non-separator byte.
  {
    path_separator?(path.byte(index)).and { index > trim_until }
  }.while_true {
    index -= 1
  }

  let mut in_separator = False

  { index > -1 }.while_true {
    let byte = path.byte(index)

    path_separator?(byte).if(
      true: { in_separator = True },
      false: {
        in_separator.if_true {
          windows_drive_path.and { index == 1 }.if_true {
            # We have reached the ":" in a drive name such as "C:\". In this
            # case we want to include the "\" since it's part of the drive
            # name.
            return 3
          }

          return index + 1
        }
      }
    )

    index -= 1
  }

  in_separator.if(true: { 1 }, false: { -1 })
}
