# Raw file system operations
#
# The methods in this module should not be used directly, instead they serve as
# building blocks for other modules such as `std::fs::file`.
import std::io::(Error as IOError)
import std::process
import std::time::SystemTime

let MISSING_TYPE = 0
let FILE_TYPE = 1
let DIRECTORY_TYPE = 2

let READ_ONLY = 0
let WRITE_ONLY = 1
let APPEND_ONLY = 2
let READ_WRITE = 3
let READ_APPEND = 4

let CREATED_AT = 0
let MODIFIED_AT = 1
let ACCESSED_AT = 2

# Opens a file in the given mode, returning a raw file object.
def open!(T)(type: T, path: String, mode: Integer) !! IOError -> T {
  process.blocking {
    try {
      _INKOC.file_open(type, path, mode)
    } else (err) {
      throw IOError.new(err as String)
    }
  }
}

def mode_for_write(append = False) -> Integer {
  append.if(true: { APPEND_ONLY }, false: { WRITE_ONLY })
}

def mode_for_read_write(append = False) -> Integer {
  append.if(true: { READ_APPEND }, false: { READ_WRITE })
}

# Copies a file from the source destination to the target destination
def copy(from: String, to: String) !! IOError -> Integer {
  process.blocking {
    try _INKOC.file_copy(from, to) else (err) throw IOError.new(err as String)
  }
}

# Returns the size (in bytes) of the given path.
def size(path: String) !! IOError -> Integer {
  process.blocking {
    try _INKOC.file_size(path) else (err) throw IOError.new(err as String)
  }
}

# Removes the file for the given path.
def remove(path: String) !! IOError -> Nil {
  process.blocking {
    try _INKOC.file_remove(path) else (err) throw IOError.new(err as String)
  }
}

# Returns `True` if the path points to a file.
def file?(path: String) -> Boolean {
  process.blocking {
    _INKOC.file_type(path) == FILE_TYPE
  }
}

# Returns `True` if the path points to a directory.
def directory?(path: String) -> Boolean {
  process.blocking {
    _INKOC.file_type(path) == DIRECTORY_TYPE
  }
}

# Returns `True` if the path points to an existing file or directory.
def exists?(path: String) -> Boolean {
  process.blocking {
    _INKOC.file_type(path) > MISSING_TYPE
  }
}

# Returns the creation, modification or access time of a file path.
def file_time(path: String, kind: Integer) !! IOError -> SystemTime {
  process.blocking {
    let time = try {
      _INKOC.file_time(path, kind)
    } else (error) {
      throw IOError.new(error as String)
    }

    SystemTime
      .from_timestamp(time: time[0] as Float, utc_offset: time[1] as Integer)
  }
}

# Returns the creation time of a path.
def created_at(path: String) !! IOError -> SystemTime {
  try file_time(path, CREATED_AT)
}

# Returns the modification time of a path.
def modified_at(path: String) !! IOError -> SystemTime {
  try file_time(path, MODIFIED_AT)
}

# Returns the access time of a path.
def accessed_at(path: String) !! IOError -> SystemTime {
  try file_time(path, ACCESSED_AT)
}

# Reads a number of bytes from a file into the buffer.
def read_bytes(
  file,
  bytes: ByteArray,
  size: ?Integer = Nil,
) !! IOError -> Integer {
  process.blocking {
    try {
      _INKOC.file_read(file, bytes, size)
    } else (err) {
      throw IOError.new(err as String)
    }
  }
}

# Writes a String to a raw file.
def write_string(file, data: String) !! IOError -> Integer {
  process.blocking {
    try {
      _INKOC.file_write(file, data)
    } else (err) {
      throw IOError.new(err as String)
    }
  }
}

# Writes a `ByteArray` to a raw file object.
def write_bytes(file, bytes: ByteArray) !! IOError -> Integer {
  process.blocking {
    try {
      _INKOC.file_write(file, bytes)
    } else (err) {
      throw IOError.new(err as String)
    }
  }
}

# Flushes the contents of a file to disk.
def flush(file) !! IOError -> Nil {
  process.blocking {
    try _INKOC.file_flush(file) else (err) throw IOError.new(err as String)
  }
}

# Seeks to a given position.
def seek(file, position: Integer) !! IOError -> Integer {
  process.blocking {
    try {
      _INKOC.file_seek(file, position)
    } else (err) {
      throw IOError.new(err as String)
    }
  }
}
