#! Methods for writing to STDOUT.
#!
#! This module provides various methods for writing to STDOUT. For example,
#! printing a message to STDOUT can be done as follows:
#!
#!     import std::stdio::stdout
#!
#!     stdout.print('Hello world!') # => Nil
#!
#! Unlike other IO methods the methods in this module will not throw any errors,
#! instead they will swallow them silently. This is done to make writing to
#! STDOUT more convenient as in almost all (if not all) cases a developer
#! doesn't care if a write to STDOUT succeeds or not.

import std::byte_array::ByteArray
import std::conversion::ToString
import std::io::Write
import std::os::NEWLINE
import std::process

impl Write for ThisModule {
  ## Writes a `ByteArray` of bytes to STDOUT, returning the number of bytes
  ## written.
  def write_bytes(bytes: ByteArray) -> Integer {
    process.blocking {
      try _INKOC.stdout_write(bytes) else 0
    }
  }

  ## Writes a `ToString` to STDOUT, returning the number of bytes written.
  ##
  ## # Examples
  ##
  ## Writing to STDOUT:
  ##
  ##     import std::stdio::stdout
  ##
  ##     stdout.write_string('hello') # => 5
  def write_string(data: ToString) -> Integer {
    process.blocking {
      try _INKOC.stdout_write(data.to_string) else 0
    }
  }

  ## Writes the given string-like object to STDOUT, followed by a newline.
  ##
  ## # Examples
  ##
  ## Writing to STDOUT:
  ##
  ##     import std::stdio::stdout
  ##
  ##     stdout.print('hello') # => Nil
  ##
  ## You can also leave out a message to write, in which case only a newline is
  ## written:
  ##
  ##     import std::stdio::stdout
  ##
  ##     stdout.print # => Nil
  def print(data: ?ToString = Nil) -> Integer {
    process.blocking {
      let written = try _INKOC.stdout_write(data.to_string) else return 0
      written + _INKOC.stdout_write(NEWLINE)
    }
  }

  def flush -> Nil {
    process.blocking {
      try _INKOC.stdout_flush else Nil
    }
  }
}
