# Types for defining individual unit tests.
#
# The `Test` type is used for defining tests and their details, such as the
# source location and the `Block` to run. Tests are typically defined by
# sending `test` to an instance of `std::test::test_group::TestGroup`.
import std::debug::(self, CallFrame)
import std::process::(self, Process)
import std::stdio::stdout
import std::test::error::TestFailure

# A test defined by the user, including details such as the name and the
# location it was defined at.
object Test {
  # The name of this test.
  @name: String

  # The name of the group this test belongs to.
  @group_name: String

  # A CallFrame pointing to the location the test was defined on by the user.
  @location: CallFrame

  # The runner process this test belongs.
  @runner: Process

  # The failure of this test, if any.
  @failure: ?TestFailure

  # The test body to execute.
  @body: lambda

  def init(
    name: String,
    group_name: String,
    runner: Process,
    location: CallFrame,
    body: lambda,
  ) {
    @name = name
    @group_name = group_name
    @location = location
    @runner = runner
    @failure = Nil
    @body = body
  }

  # Returns the name of this test.
  def name -> String {
    @name
  }

  # Returns the name of the group this test belongs to.
  def group_name -> String {
    @group_name
  }

  # Returns the location this test was defined on.
  def location -> CallFrame {
    @location
  }

  # Returns the failure of the test, if any.
  def failure -> ?TestFailure {
    @failure
  }

  # Returns `True` if the test passed, `False` otherwise.
  def passed? -> Boolean {
    @failure.if(true: { False }, false: { True })
  }

  # Runs the test, and notifies a `Runner` of the result.
  #
  # The message sent to a `Runner` is this `Test` itself.
  def run {
    process.panicking do (error) {
      @failure = TestFailure.new(
        message: error,
        location: debug.last_call_frame_in(location.path),
      )

      notify_runner
    }

    @body.call
    notify_runner
  }

  def notify_runner {
    @runner.send(self)
  }
}
