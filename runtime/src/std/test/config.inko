#! Test suite configuration
#!
#! This module provides a single type that can be used for configuring a test
#! suite: the `Configuration` object. Configuring a test suite is typically done
#! by sending the `configure` message to the `std::test` module, allowing one to
#! change individual settings without having to maintain their own instances of
#! the `Configuration` object.
import std::index::SetIndex
import std::process
import std::test::formatter::Formatter
import std::test::formatters::ProgressFormatter

## The default number of tests to run concurrently.
let DEFAULT_CONCURRENCY = 32

## Configuration options and their values for a test `Runner`.
##
## The following configuration options are available:
##
## * `concurrency`: the number of tests to execute concurrently.
## * `formatter`: the formatter to use for displaying test results.
##
## All of these options can be set using `Configuration.[]=`. For example:
##
##     import std::test::config::Configuration
##
##     let config = Configuration.new
##
##     config['concurrency'] = 16
##
## Accessing the value of an option is done by sending its corresponding message
## to an instance of `Configuration`. For example, to return the value of the
## `concurrency` option, simply send `concurrency` to a `Configuration`:
##
##     import std::test::config::Configuration
##
##     let config = Configuration.new
##
##     config['concurrency'] = 16
##
##     config.concurrency # => 16
object Configuration {
  ## The number of tests to execute concurrently.
  @concurrency: Integer

  ## The formatter to use.
  @formatter: Formatter

  def init {
    @concurrency = DEFAULT_CONCURRENCY
    @formatter = ProgressFormatter.new
  }

  ## Returns the number of tests to execute concurrently.
  def concurrency -> Integer {
    @concurrency
  }

  ## Returns the formatter to use.
  def formatter -> Formatter {
    @formatter
  }
}

impl SetIndex!(String, Dynamic) for Configuration {
  ## Sets an option by its name.
  ##
  ## Setting an unknown option will result in a panic.
  ##
  ## # Examples
  ##
  ## Setting a configuration option:
  ##
  ##     import std::test::config::Configuration
  ##
  ##     let config = Configuration.new
  ##
  ##     config['concurrency'] = 64 # => 64
  def []=(key: String, value: Dynamic) -> Dynamic {
    (key == 'concurrency').if_true {
      @concurrency = value as Integer
      return
    }

    (key == 'formatter').if_true {
      @formatter = value as Formatter
      return
    }

    process.panic(key.inspect + ' is not a valid configuration option')
  }
}
