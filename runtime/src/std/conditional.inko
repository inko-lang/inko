# Methods for performing conditional operations.

# Methods for conditionals such as if/else.
#
# The methods in this trait allow objects to respond to messages that can be
# used to branch off based on a condition, much like if/else statements allow
# in other programming languages.
#
# Let's say we have a User and a NullUser and a NullUser is meant to evaluate
# to False. Because Object already implements Conditional this means we can
# override this behaviour as follows:
#
#     import std::conditional::Conditional
#
#     object User {}
#     object NullUser {}
#
#     impl Conditional for NullUser {
#       def if!(R)(true: do -> R, false: do -> R) -> R {
#         false.call
#       }
#     }
#
#     let user = NullUser.new
#
#     user.if(true: { 10 }, false: { 20 }) # => 20
#
# When implementing this trait, one should redefine `if` if they want to
# customise the behaviour. All other methods make use of this method, and will
# thus follow the new behaviour automatically.
trait Conditional {
  # Calls the `true` block if the receiver evaluates to `True`, otherwise the
  # `false` block is called.
  #
  # The return value is whatever the block returned. Both the blocks must
  # return a value of the same type.
  def if!(R)(true: do -> R, false: do -> R) -> R

  # Calls the supplied block if the receiver evaluates to `True`.
  #
  # When the receiver evaluates to `True` the return value will be whatever the
  # supplied block returned. When evaluating to `False` this method will instead
  # return Nil.
  def if_true!(R)(block: do -> R) -> ?R {
    if(true: block, false: { Nil })
  }

  # Calls the supplied block if the receiver evaluates to `False`.
  #
  # When the receiver evaluates to `False` the return value will be whatever the
  # supplied block returned. When evaluating to `True` this method will instead
  # return Nil.
  def if_false!(R)(block: do -> R) -> ?R {
    if(true: { Nil }, false: block)
  }

  # Returns `True` if `self` and the given object evaluate to `True`.
  #
  # # Examples
  #
  # Using two objects:
  #
  #     Object.new.and { Object.new } # => True
  #
  # Using and object and `False`:
  #
  #     Object.new.and { False } # => False
  def and(other: do -> Boolean) -> Boolean {
    if(true: { other.call }, false: { False })
  }

  # Returns `True` if `self` or the given object evaluates to `True`.
  #
  # # Examples
  #
  # Using two objects:
  #
  #     Object.new.or { Object.new } # => True
  #
  # Using an object and `False`:
  #
  #     Object.new.or { False } # => True
  def or(other: do -> Boolean) -> Boolean {
    if(true: { True }, false: { other.call })
  }
}
