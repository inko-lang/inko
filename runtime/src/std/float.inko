#! The float type.
#!
#! Floats are implemented as IEEE 754 floats.

import std::conversion::(ToInteger, ToString, ToFloat)
import std::error::StandardError
import std::hash::(Hasher, Hash)
import std::numeric::Numeric
import std::operators::*

let INFINITY_LABEL = 'Infinity'
let NEGATIVE_INFINITY_LABEL = '-Infinity'

impl Add!(Self) for Float {
  def +(other: Self) -> Self {
    _INKOC.float_add(self, other)
  }
}

impl Divide for Float {
  def /(other: Self) -> Self {
    _INKOC.float_div(self, other)
  }
}

impl Multiply for Float {
  def *(other: Self) -> Self {
    _INKOC.float_mul(self, other)
  }
}

impl Subtract!(Self) for Float {
  def -(other: Self) -> Self {
    _INKOC.float_sub(self, other)
  }
}

impl Modulo for Float {
  def %(other: Self) -> Self {
    _INKOC.float_mod(self, other)
  }
}

impl Smaller for Float {
  def <(other: Self) -> Boolean {
    _INKOC.float_smaller(self, other)
  }
}

impl Greater for Float {
  def >(other: Self) -> Boolean {
    _INKOC.float_greater(self, other)
  }
}

impl Equal for Float {
  def ==(other: Self) -> Boolean {
    _INKOC.float_equals(self, other)
  }
}

impl GreaterOrEqual for Float {
  def >=(other: Self) -> Boolean {
    _INKOC.float_greater_or_equal(self, other)
  }
}

impl SmallerOrEqual for Float {
  def <=(other: Self) -> Boolean {
    _INKOC.float_smaller_or_equal(self, other)
  }
}

impl Numeric for Float {
  def negative? -> Boolean {
    self < 0.0
  }

  def positive? -> Boolean {
    self > 0.0
  }

  def zero? -> Boolean {
    self == 0.0
  }

  def absolute -> Self {
    negative?.if true: {
      infinite?.if true: {
        INFINITY
      }, false: {
        self - (self * 2.0)
      }
    }, false: {
      self
    }
  }

  def opposite -> Self {
    positive?.if true: {
      0.0 - self
    }, false: {
      infinite?.if true: {
        INFINITY
      }, false: {
        self - (self * 2.0)
      }
    }
  }
}

impl Float {
  ## Returns `True` if `self` is not a number (NAN).
  ##
  ## # Examples
  ##
  ## Using a regular float:
  ##
  ##     10.5.not_a_number? => False
  ##
  ## Using a NAN value:
  ##
  ##     0.0 / 0.0
  ##       .not_a_number? # => True
  def not_a_number? -> Boolean {
    _INKOC.float_is_nan(self)
  }

  ## Returns `True` if `self` is an infinite number.
  ##
  ## # Examples
  ##
  ## Using a regular float:
  ##
  ##     10.5.infinite? # => False
  ##
  ## Using an infinite number:
  ##
  ##     10.0 / 0.0
  ##       .infinite? # => True
  def infinite? -> Boolean {
    _INKOC.float_is_infinite(self)
  }

  ## Returns `True` if `self` is neither infinite nor `NAN`.
  ##
  ## # Examples
  ##
  ## Using a regular float:
  ##
  ##     10.5.finite? # => True
  ##
  ## Using a NAN value:
  ##
  ##     0.0 / 0.0
  ##       .finite? # => False
  ##
  ## Using an infinite value:
  ##
  ##     10.0 / 0.0
  ##       .finite? # => False
  def finite? -> Boolean {
    not_a_number?.or { infinite? }.if true: {
      False
    }, false: {
      True
    }
  }

  ## Returns the largest number less than or equal to `self`.
  ##
  ## # Examples
  ##
  ## Using a regular float:
  ##
  ##     3.5.floor # => 3.0
  ##
  ## Using a NAN value will produce a new NAN:
  ##
  ##     import std::float::NAN
  ##
  ##     NAN.floor.not_a_number? # => True
  def floor -> Float {
    _INKOC.float_floor(self)
  }

  ## Returns the smallest number greater than or equal to `self`.
  ##
  ## # Examples
  ##
  ## Using a regular float:
  ##
  ##     3.5.ceil # => 4.0
  ##
  ## Using a NAN value will produce a new NAN:
  ##
  ##     import std::float::NAN
  ##
  ##     NAN.ceil.not_a_number? # => True
  def ceil -> Float {
    _INKOC.float_ceil(self)
  }

  ## Rounds `self` to the nearest number.
  ##
  ## The `decimals` argument can be used to control the number of decimals of
  ## the returned `Float`. When a negative value is used, the number is rounded
  ## on the lef hand side of the decimal point.
  ##
  ## # Examples
  ##
  ## Using a regular float:
  ##
  ##     3.5.round # => 3.0
  ##
  ## Rounding to a given number of decimals:
  ##
  ##     3.123.round(1) # => 3.1
  ##
  ## Rounding a number using a negative number of decimals:
  ##
  ##     34567.89.round(-2) # => 34600.0
  ##
  ## Using a NAN value will produce a new NAN:
  ##
  ##     import std::float::NAN
  ##
  ##     NAN.round.not_a_number? # => True
  def round(decimals = 0) -> Float {
    _INKOC.float_round(self, decimals)
  }

  ## Returns the fractional part of this float.
  ##
  ## # Examples
  ##
  ## Returning the fractional:
  ##
  ##     3.5.fract => 0.5
  def fractional -> Float {
    absolute % 1.0
  }

  ## Returns the bitwise representation of `self`, as an `Integer`.
  ##
  ## This does not _cast_ the `Float`, instead the returned `Integer` has all
  ## the bits set that make up `self`.
  ##
  ## # Examples
  ##
  ## Converting a `Float` to its bitwise representation:
  ##
  ##     1.0.to_bits # => 4607182418800017408
  def to_bits -> Integer {
    _INKOC.float_to_bits(self)
  }

  ## Parses a `Float` from a `String`.
  ##
  ## # Error handling
  ##
  ## This method will throw if the input `String` is not in the right format.
  ##
  ## # Format
  ##
  ## The input `String` is expected to be in base 10. Leading and/or trailing
  ## whitespace is considered to be invalid, and will result in an error being
  ## thrown.
  ##
  ## # Examples
  ##
  ## Parsing a `Float` from a `String`:
  ##
  ##     try! Float.parse('10.5') # => 10.5
  ##
  ## Parsing a `Float` with an exponent:
  ##
  ##     try! Float.parse('1.2e1') # => 12.0
  static def parse(string: String) !! StandardError -> Float {
    (string == INFINITY_LABEL).if_true {
      return INFINITY
    }

    (string == NEGATIVE_INFINITY_LABEL).if_true {
      return NEGATIVE_INFINITY
    }

    try {
      _INKOC.string_to_float(string)
    } else (error) {
      throw StandardError.new(error as String)
    }
  }
}

impl ToInteger for Float {
  ## Converts a `Float` to an `Integer`.
  ##
  ## The `Float` will be rounded towards zero. Converting a `NAN`, `INFINITY`,
  ## or `NEGATIVE_INFINITY` to an `Integer` will result in a panic.
  def to_integer -> Integer {
    _INKOC.float_to_integer(self)
  }
}

impl ToFloat for Float {
  def to_float -> Float {
    self
  }
}

impl ToString for Float {
  ## Converts `self` to a `String.
  ##
  ## # Examples
  ##
  ## Converting a positive float:
  ##
  ##     10.5.to_string # => '10.5'
  ##
  ## Converting a negative float:
  ##
  ##     -10.5.to_string # => '-10.5'
  ##
  ## Converting a NAN:
  ##
  ##     import std::float::NAN
  ##
  ##     NAN.to_string # => 'NAN'
  ##
  ## Converting an infinite number:
  ##
  ##     import std::float::INFINITY
  ##
  ##     INFINITY.to_string # => 'INFINITY'
  def to_string -> String {
    infinite?.if_true {
      positive?.if true: {
        return INFINITY_LABEL
      }, false: {
        return NEGATIVE_INFINITY_LABEL
      }
    }

    not_a_number?.if_true {
      return 'NaN'
    }

    _INKOC.float_to_string(self)
  }
}

impl Hash for Float {
  def hash(hasher: Hasher) {
    hasher.write_float(self)
  }
}

## The NAN (Not A Number) value.
let NAN = 0.0 / 0.0

## The infinity value.
let INFINITY = 1.0 / 0.0

## The negative infinity value.
let NEGATIVE_INFINITY = -1.0 / 0.0
