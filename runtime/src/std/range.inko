#! Range data types and methods.
import std::conversion::ToArray
import std::operators::(Equal, SmallerOrEqual)
import std::successor::Successor

## An inclusive range of values of a fixed type.
##
## A `Range` is typically created by sending the `..` (provided by the `ToRange`
## trait) message to the receiver.  For example, using this method one can
## create a `Range` of integers like so:
##
##     1..10
##
## A `Range` supports a start and end value of any type as long as:
##
## 1. They are both of the same type.
## 2. Both implement the `Successor` and `SmallerOrEqual` traits.
object Range!(T: Successor + SmallerOrEqual) {
  ## The start value of the range.
  @start: T

  ## The (inclusive) end value of the range.
  @end: T

  def init(start: T, end: T) {
    @start = start
    @end = end
  }

  ## Returns the start value of the range.
  def start -> T {
    @start
  }

  ## Returns the end value of the range.
  def end -> T {
    @end
  }

  ## Returns `True` if the given argument resides in the range of `self`.
  ##
  ## # Examples
  ##
  ## Checking if a `Range` covers a value:
  ##
  ##     (1..10).cover?(5)  # => True
  ##     (1..10).cover?(15) # => False
  def cover?(value: T) -> Boolean {
    (@start <= value).and { value <= @end }
  }
}

impl Equal for Range!(T) {
  ## Returns `True` if `self` and `other` are identical.
  ##
  ## # Examples
  ##
  ## Comparing two identical ranges:
  ##
  ##     1..10 == 1..10 # => True
  ##
  ## Comparing two different ranges:
  ##
  ##     1..10 == 1..5 # => False
  def ==(other: Self) -> Boolean {
    (start == other.start).and { end == other.end }
  }
}

impl ToArray!(T) for Range!(T) {
  ## Converts `self` to an `Array`.
  ##
  ## # Examples
  ##
  ## Converting a `Range` to an `Array`:
  ##
  ##     (1..10).to_array # => Array.new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
  def to_array -> Array!(T) {
    let mut values = Array.new
    let mut current = @start
    let max = @end

    { current <= max }.while_true {
      values.push(current)

      current = current.successor
    }

    values
  }
}

trait ToRange!(T: Successor + SmallerOrEqual) {
  ## Returns a `Range` starting at `self` up to (and including) `other`.
  def ..(other: T) -> Range!(T)
}

impl ToRange!(Integer) for Integer {
  ## Returns a `Range` starting at `self` up to (and including) `other`.
  ##
  ## # Examples
  ##
  ## Creating a `Range`:
  ##
  ##     let range = 1..10
  ##
  ##     range.start # => 1
  ##     range.end   # => 10
  def ..(other: Self) -> Range!(Self) {
    Range.new(start: self, end: other)
  }
}
