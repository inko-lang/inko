# AST types for objects and traits.
import std::compiler::ast::body::Body
import std::compiler::ast::node::Node
import std::compiler::ast::type_parameter::TypeParameter
import std::compiler::ast::variables::Constant
import std::compiler::source_location::SourceLocation

# A named object defined using the "object" keyword.
object ObjectDefinition {
  # The name of the defined object.
  @name: Constant

  # The type parameters of the defined object.
  @type_parameters: Array!(TypeParameter)

  # The expressions inside the object body.
  @body: Body

  # The source location of the definition.
  @location: SourceLocation

  def init(
    name: Constant,
    type_parameters: Array!(TypeParameter),
    body: Body,
    location: SourceLocation
  ) {
    @name = name
    @type_parameters = type_parameters
    @body = body
    @location = location
  }

  # Returns the name of this object.
  def name -> Constant {
    @name
  }

  # Returns the type parameters of this object.
  def type_parameters -> Array!(TypeParameter) {
    @type_parameters
  }

  # Returns the expressions contained in this object definition.
  def body -> Body {
    @body
  }
}

impl Node for ObjectDefinition {
  def location -> SourceLocation {
    @location
  }
}

# The definition of an attribute in an object.
object AttributeDefinition {
  # The name of the attribute.
  @name: String

  # The type of the attribute.
  @type: Node

  # The source location of the definition.
  @location: SourceLocation

  def init(name: String, type: Node, location: SourceLocation) {
    @name = name
    @type = type
    @location = location
  }

  # Returns the name of the attribute.
  def name -> String {
    @name
  }

  # Returns the type of the attribute
  def type -> Node {
    @type
  }
}

impl Node for AttributeDefinition {
  def location -> SourceLocation {
    @location
  }
}

# A trait defined using the "trait" keyword.
object TraitDefinition {
  # The name of the trait that is defined.
  @name: Constant

  # The type parameters of the trait.
  @type_parameters: Array!(TypeParameter)

  # The list of traits that must be implemented before implementing this trait.
  @required_traits: Array!(Constant)

  # The expressions inside the trait's body.
  @body: Body

  # The source location of the trait definition.
  @location: SourceLocation

  def init(
    name: Constant,
    type_parameters: Array!(TypeParameter),
    required_traits: Array!(Constant),
    body: Body,
    location: SourceLocation
  ) {
    @name = name
    @type_parameters = type_parameters
    @required_traits = required_traits
    @body = body
    @location = location
  }

  # Returns the name of this object.
  def name -> Constant {
    @name
  }

  # Returns the type parameters of this object.
  def type_parameters -> Array!(TypeParameter) {
    @type_parameters
  }

  # Returns the traits required by this trait.
  def required_traits -> Array!(Constant) {
    @required_traits
  }

  # Returns the expressions contained in this object definition.
  def body -> Body {
    @body
  }
}

impl Node for TraitDefinition {
  def location -> SourceLocation {
    @location
  }
}


# The implementation of a trait for an object.
object ImplementTrait {
  # The name of the trait that is implemented.
  @trait_name: Constant

  # The name of the object to implement the trait for.
  @object_name: Constant

  # The trait bounds that must be met for the trait to be available.
  @trait_bounds: Array!(TypeParameter)

  # The expressions contained in the body of the implementation.
  @body: Body

  # The source location of the implementation.
  @location: SourceLocation

  def init(
    trait_name: Constant,
    object_name: Constant,
    trait_bounds: Array!(TypeParameter),
    body: Body,
    location: SourceLocation
  ) {
    @trait_name = trait_name
    @object_name = object_name
    @trait_bounds = trait_bounds
    @body = body
    @location = location
  }

  # Returns the name of the trait being implemented.
  def trait_name -> Constant {
    @trait_name
  }

  # Returns the name of the object the trait is implemented for.
  def object_name -> Constant {
    @object_name
  }

  # Returns the trait bounds of the implementation.
  def trait_bounds -> Array!(TypeParameter) {
    @trait_bounds
  }

  # Returns the expressions contained in this implementation.
  def body -> Body {
    @body
  }
}

impl Node for ImplementTrait {
  def location -> SourceLocation {
    @location
  }
}

# An object that is reopened.
object ReopenObject {
  # The name of the object that is reopened.
  @name: Constant

  # The expressions contained in the body of the object.
  @body: Body

  # The source location of the implementation.
  @location: SourceLocation

  def init(name: Constant, body: Body, location: SourceLocation) {
    @name = name
    @body = body
    @location = location
  }

  # Returns the name of the object that is reopened.
  def name -> Constant {
    @name
  }

  # Returns the body of the `impl` expression.
  def body -> Body {
    @body
  }
}

impl Node for ReopenObject {
  def location -> SourceLocation {
    @location
  }
}
