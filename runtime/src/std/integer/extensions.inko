#! Extensions for the `Integer` type that can only be defined later on in the
#! bootstrapping process.
import std::process
import std::string_buffer::StringBuffer

## The digits to use when converting an `Integer` to a `String` using a specific
## base or radix.
##
## The order of values in this `Array` must remain as-is, as re-ordering values
## will break the code that uses this `Array`.
let INTEGER_RADIX_DIGITS = Array.new(
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e',
  'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
  'u', 'v', 'w', 'x', 'y', 'z'
)

impl Integer {
  ## Formats `self` as a `String` using the given base/radix.
  ##
  ## # Panics
  ##
  ## This method will panic if `radix` is smaller than 2, or greater than 36.
  ##
  ## # Examples
  ##
  ## Formatting an integer in base 16 (hexadecimal):
  ##
  ##     0x2ff.format(radix: 16) # => '2ff'
  def format(radix = 10) -> String {
    (radix < 2).or { radix > 36 }.if_true {
      process.panic('The radix argument must be between 2 and 36')
    }

    zero?.if_true {
      return '0'
    }

    let characters = Array.new
    let mut integer = absolute

    negative?.if_true {
      characters.push('-')
    }

    { integer.positive? }.while_true {
      characters.push(INTEGER_RADIX_DIGITS[integer % radix]!)
      integer /= radix
    }

    # The above operation pushes the digits from the back, resulting in our
    # characters being in reverse order. For example, for 0x2ff the `characters`
    # `Array` would be `['f', 'f', '2']`. Below we'll reverse the values
    # in-place.
    let start_at = negative?.if true: { 1 }, false: { 0 }
    let mut old_index = characters.length - 1
    let mut new_index = start_at

    { old_index > new_index }.while_true {
      let old = characters[old_index]!
      let new = characters[new_index]!

      characters[new_index] = old
      characters[old_index] = new

      old_index -= 1
      new_index += 1
    }

    StringBuffer.from_array(characters).to_string
  }
}
