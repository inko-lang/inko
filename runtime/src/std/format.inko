# Types for formatting objects in a human-readable manner.
import std::conversion::ToString
import std::string_buffer::StringBuffer

# The value to use for objects if the nesting is too great.
let PLACEHOLDER = '...'

# The maximum number of objects to recurse into when formatting an object,
# before returning a placeholder.
let MAX_DEPTH = 31

# A Formatter can be used to format an object for debugging purposes.
trait Formatter: ToString {
  # Pushes the given `String` into the underlying buffer.
  def push(string: String) -> String

  # Descends into a child object, running the supplied block if the object
  # should be formatted.
  #
  # This method can be used to produce a placeholder when formatting an object
  # that is too deeply nested.
  def descend(block: do) {
    block.call
  }
}

# The default formatter to use when formatting an object.
object DefaultFormatter {
  # The buffer to use for the formatting output.
  @buffer: StringBuffer

  # Integer keeping track of how many nested objects we are formatting.
  @nesting: Integer

  def init {
    @buffer = StringBuffer.new
    @nesting = 0
  }
}

impl ToString for DefaultFormatter {
  # Returns a `String` containing the data pushed into this buffer so far.
  def to_string -> String {
    @buffer.to_string
  }
}

impl Formatter for DefaultFormatter {
  # Pushes a new `String` into the underlying buffer.
  def push(string: String) -> String {
    @buffer.push(string)
  }

  # Descends into a child object, running the supplied block if our nesting is
  # not too great.
  #
  # If nesting _is_ too great, a placeholder value is added to the buffer, and
  # the supplied block is not executed.
  def descend(block: do) {
    (@nesting >= MAX_DEPTH).if_true {
      push(PLACEHOLDER)
      return
    }

    @nesting += 1

    block.call

    @nesting -= 1
  }
}

# A type that can be formatted into a human-readable format for debugging
# purposes.
trait Format {
  # Formats `self` in a human-readable format for debugging purposes.
  #
  # The returned value is the formatter used to format the object. To obtain the
  # formatting output as a `String`, simply send `to_string` to the returned
  # `Formatter`.
  def format!(F: Formatter)(formatter: F) -> F
}
