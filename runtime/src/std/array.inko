#! An ordered, contiguous growable sequence of values.
#!
#! Arrays (sometimes called vectors or lists) can be used to store values of the
#! same type in order. Arrays are mutable and allow you to add new values or
#! remove existing values.
#!
#! # Indexing
#!
#! Like most programming languages Arrays indexes are zero based, with the first
#! value being located at index 0.
#!
#! It's possible to use a negative index (e.g. -2) when accessing or setting
#! indexes, in which case the value will be accessed starting at the back of the
#! Array. This means that -1 will access the last value, -2 the value before
#! that, etc.

import std::conversion::ToArray
import std::index::(Index, SetIndex)
import std::length::Length
import std::operators::Equal

impl Array!(T) {
  ## Returns a new Array containing the given values.
  ##
  ## # Examples
  ##
  ## Creating an empty Array:
  ##
  ##     Array.new
  ##
  ## Creating an Array with values:
  ##
  ##     Array.new(10, 20, 30)
  static def new!(V)(*values: V) -> Array!(V) {
    values
  }

  ## Removes all values of this Array, then returns self.
  ##
  ## # Examples
  ##
  ## Sending `clear` to an Array will remove all of its elements:
  ##
  ##     let array = Array.new(10, 20, 30)
  ##
  ##     array.clear
  ##     array.empty? # => True
  ##
  ## Clear will return the Array itself so you can chain message sends:
  ##
  ##     let array = Array.new(10, 20, 30)
  ##
  ##     array.clear.length # => 0
  def clear -> Self {
    _INKOC.array_clear(self)
    self
  }

  ## Pushes a value to the back of the Array, returning the pushed value.
  ##
  ## # Examples
  ##
  ## Pushing a value into an Array:
  ##
  ##     let array = Array.new
  ##
  ##     array.push(10) # => 10
  ##     array[0]       # => 10
  def push(value: T) -> T {
    self[length] = value
  }

  ## Removes a value from the back of the Array, returning the removed value.
  ##
  ## If no value was found, `Nil` is returned instead.
  ##
  ## ## Examples
  ##
  ## Popping an existing value:
  ##
  ##     let array = Array.new(10)
  ##
  ##     array.pop    # => 10
  ##     array.empty? # => True
  ##
  ## Popping a value when the Array is empty:
  ##
  ##     let array = Array.new
  ##
  ##     array.pop # => Nil
  def pop -> ?T {
    (length > 0).if true: {
      remove_at(length - 1)
    }, false: {
      Nil
    }
  }

  ## Removes the value at the given index, returning the removed value.
  ##
  ## # Examples
  ##
  ## Removing an existing value will result in the value being removed from the
  ## Array and returned:
  ##
  ##     let array = Array.new(10)
  ##
  ##     array.remove_at(0) # => 10
  ##     array.empty?       # => True
  ##
  ## When removing a non-existing value the Array won't be modified, and the
  ## returned value will be Nil:
  ##
  ##     let array = Array.new(10)
  ##
  ##     array.remove_at(1) # => Nil
  ##     array.empty?       # => False
  def remove_at(index: Integer) -> ?T {
    _INKOC.array_remove(self, index)
  }

  ## Yields all the values in this `Array` to the supplied `Block`.
  ##
  ## While `std::iterator::Iterator` provides an `each` method using this would
  ## require the allocation of an `Iterator`. Since iterating over an `Array` is
  ## so common we provide a specialised implementation for those cases.
  ##
  ## # Examples
  ##
  ## Iterating over all the values in an `Array`:
  ##
  ##     import std::stdio::stdout
  ##
  ##     Array.new(10, 20, 30).each do (number) {
  ##       stdout.print(number)
  ##     }
  def each(block: do (T)) {
    let mut index = 0
    let max = length

    { index < max }.while_true {
      let value = self[index]

      block.call(value!)

      index += 1
    }
  }

  ## Yields all the values and their indexes in this `Array` to the supplied
  ## `Block`.
  ##
  ## # Examples
  ##
  ## Iterating over the values of an `Array` and their indexes:
  ##
  ##     import std::stdio::stdout
  ##
  ##     Array.new(10, 20, 30).each_with_index do (number, index) {
  ##       stdout.print(index) # => 0, 1, 2
  ##     }
  def each_with_index(block: do (T, Integer)) {
    let mut index = 0

    each do (value: T) {
      block.call(value, index)
      index += 1
    }
  }

  ## Appends the values of the given `Array` to `self`.
  ##
  ## # Examples
  ##
  ## Appending one `Array` to another:
  ##
  ##     let numbers = Array.new(10, 20, 30)
  ##
  ##     numbers.append(Array.new(40, 50))
  ##
  ##     numbers.length # => 5
  def append(other: Self) -> Self {
    other.each do (value: T) {
      push(value)
    }

    self
  }

  ## Returns `True` if `self` contains the given value.
  ##
  ## # Examples
  ##
  ## Checking if an `Array` contains a value:
  ##
  ##     Array.new(10, 20, 30).contains?(10) # => True
  def contains?(value: T) -> Boolean where T: Equal {
    each do (val) {
      (val == value).if_true {
        return True
      }
    }

    False
  }
}

impl Length for Array!(T) {
  ## Returns the number of values in this Array.
  ##
  ## # Examples
  ##
  ## Getting the length of an empty Array:
  ##
  ##     Array.new.length # => 0
  ##
  ## Getting the length of an Array with values:
  ##
  ##     Array.new(10).length # => 1
  def length -> Integer {
    _INKOC.array_length(self)
  }
}

impl Index!(Integer, T) for Array!(T) {
  ## Returns the value at the given index, or Nil if no value was found.
  ##
  ## # Examples
  ##
  ## Retrieving a value by its index:
  ##
  ##     let array = Array.new(10, 20, 30)
  ##
  ##     array[1] # => 20
  ##
  ## We can also use a negative index to access a value from the back of the
  ## Array:
  ##
  ##     let array = Array.new(10, 20, 30)
  ##
  ##     array[-2] # => 20
  ##
  ## Accessing an out-of-bounds index will produce a Nil:
  ##
  ##     let array = Array.new
  ##
  ##     array[0] # => Nil
  def [](index: Integer) -> ?T {
    _INKOC.array_at(self, index)
  }
}

impl SetIndex!(Integer, T) for Array!(T) {
  ## Stores a value at the given index, then returns it.
  ##
  ## If the index is out of bounds then all preceding indexes that are not set
  ## will be filled with Nil values.
  ##
  ## This method will return the value that was added to the Array.
  ##
  ## # Examples
  ##
  ## Setting an index to a value:
  ##
  ##     let array = Array.new
  ##
  ##     array[0] = 10 # => 10
  ##     array         # => Array.new(10)
  ##
  ## Setting an out-of-bounds index:
  ##
  ##     let array = Array.new
  ##
  ##     array[2] = 10 # => 10
  ##     array         # => Array.new(Nil, Nil, 10)
  ##
  ## We can also use negative indexes:
  ##
  ##     let array = Array.new(10)
  ##
  ##     array[-1] = 20 # => 20
  ##     array          # => Array.new(20)
  def []=(index: Integer, value: T) -> T {
    _INKOC.array_set(self, index, value)
  }
}

impl ToArray!(T) for Array!(T) {
  ## Always returns `self`.
  ##
  ## # Examples
  ##
  ## "Converting" an array to an array:
  ##
  ##     Array.new(10).to_array # => Array.new(10)
  def to_array -> Array!(T) {
    self
  }
}

impl Equal for Array!(T) {
  ## Returns `True` if `self` and the given `Array` are identical.
  ##
  ## # Examples
  ##
  ## Comparing two identical arrays:
  ##
  ##     Array.new(10, 20, 30) == Array.new(10, 20, 30) # => True
  ##
  ## Comparing two arrays with a different length:
  ##
  ##     Array.new(10) == Array.new(10, 20) # => False
  ##
  ## Comparing two arrays with the same length but with different values:
  ##
  ##     Array.new(10, 20) == Array.new(20, 10) # => False
  def ==(other: Self) -> Boolean where T: Equal {
    (length == other.length).if_false {
      return False
    }

    each_with_index do (ours: T, index: Integer) {
      let theirs = other[index]!

      (ours == theirs).if_false {
        return False
      }
    }

    True
  }
}
