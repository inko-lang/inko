#! Boolean true and false.
#!
#! In Inko boolean true is the object `True` and boolean false is the object
#! `False`. Both are regular objects that are instances of the `Boolean` object.

import std::conditional::Conditional
import std::conversion::ToString
import std::hash::(Hasher, Hash)
import std::operators::Equal

impl Boolean {
  ## Returns the `Boolean` that is the opposite of `self`.
  def not -> Boolean {
    False
  }
}

impl Conditional for Boolean {
  def if_true!(R)(block: do -> R) -> ?R {
    block.call
  }

  def if_false!(R)(block: do -> R) -> ?R {
    Nil
  }

  def if!(R)(true: do -> R, false: do -> R) -> R {
    true.call
  }

  def and(other: do -> Boolean) -> Boolean {
    other.call
  }

  def or(other: do -> Boolean) -> Boolean {
    True
  }
}

impl Equal for Boolean {
  ## Returns `True` if the given `Boolean` equals `self`.
  ##
  ## `True` is only equal to `True` itself, and `False` is only equal to `False`
  ## itself.
  ##
  ## # Examples
  ##
  ## Checking if two booleans are equal:
  ##
  ##     True == True # => True
  ##
  ## Checking if two booleans are not equal:
  ##
  ##     True == False # => False
  def ==(other: Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }

  ## Returns `True` if the given `Boolean` does not equal `self`.
  def !=(other: Self) -> Boolean {
    (self == other).not
  }
}

impl ToString for Boolean {
  def to_string -> String {
    'Boolean'
  }
}

impl Hash for Boolean {
  def hash(hasher: Hasher) {
    hasher.write_boolean(self)
  }
}

impl Conditional for False {
  def if_true!(R)(block: do -> R) -> ?R {
    Nil
  }

  def if_false!(R)(block: do -> R) -> ?R {
    block.call
  }

  def if!(R)(true: do -> R, false: do -> R) -> R {
    false.call
  }

  def and(other: do -> Boolean) -> Boolean {
    False
  }

  def or(other: do -> Boolean) -> Boolean {
    other.call
  }
}

impl ToString for True {
  def to_string -> String {
    'True'
  }
}

impl ToString for False {
  def to_string -> String {
    'False'
  }
}

impl False {
  def not -> Boolean {
    True
  }
}
