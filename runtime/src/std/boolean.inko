# Boolean true and false.
#
# In Inko boolean true is the object `True` and boolean false is the object
# `False`. Both are regular objects that are instances of the `Boolean` object.
import std::conditional::Conditional
import std::conversion::ToString
import std::hash::(Hasher, Hash)

impl Boolean {
  # Returns the `Boolean` that is the opposite of `self`.
  def not -> Boolean {
    False
  }
}

impl Conditional for Boolean {
  def if_true!(R)(block: do -> R) -> ?R {
    block.call
  }

  def if_false!(R)(block: do -> R) -> ?R {
    Nil
  }

  def if!(R)(true: do -> R, false: do -> R) -> R {
    true.call
  }

  def and(other: do -> Boolean) -> Boolean {
    other.call
  }

  def or(other: do -> Boolean) -> Boolean {
    True
  }
}

impl ToString for Boolean {
  def to_string -> String {
    _INKOC.get_attribute(self, '@_object_name') as String
  }
}

impl Hash for Boolean {
  def hash(hasher: Hasher) {
    hasher.write_boolean(self)
  }
}

impl Conditional for False {
  def if_true!(R)(block: do -> R) -> ?R {
    Nil
  }

  def if_false!(R)(block: do -> R) -> ?R {
    block.call
  }

  def if!(R)(true: do -> R, false: do -> R) -> R {
    false.call
  }

  def and(other: do -> Boolean) -> Boolean {
    False
  }

  def or(other: do -> Boolean) -> Boolean {
    other.call
  }
}

impl False {
  def not -> Boolean {
    True
  }
}
