# Traits for the various binary operators.

# The binary `+` operator.
trait Add!(T) {
  # Adds the given object to `self`, producing a new instance of the same type
  # as `self`.
  def +(other: T) -> Self
}

# The binary `/` operator.
trait Divide {
  # Divides `self` by the given object, producing a new one of the same type.
  def /(other: Self) -> Self
}

# The binary `*` operator.
trait Multiply {
  # Multiplies `self` with the given object, producing a new one of the same
  # type.
  def *(other: Self) -> Self
}

# The binary `-` operator.
trait Subtract!(T) {
  # Subtracts the given object from `self`, producing a new instance of the
  # same type as `self`.
  def -(other: T) -> Self
}

# The binary `%` operator.
trait Modulo {
  # Gets the remainder after dividing `self` by the given object, producing a
  # new one of the same type.
  def %(other: Self) -> Self
}

# The binary `<` operator.
trait Smaller {
  # Returns `True` if `self` is smaller than the given object.
  def <(other: Self) -> Boolean
}

# The binary `>` operator.
trait Greater {
  # Returns `True` if `self` is greater than the given object.
  def >(other: Self) -> Boolean
}

# The binary `==` operator.
trait Equal {
  # Returns `True` if `self` and the given object are equal to each other.
  #
  # By default this method simply uses `Equal.equal?`, but objects can freely
  # redefine `Equal.==` to change this behaviour.
  def ==(other: Self) -> Boolean

  # Returns `True` if `self` and the given object are identical.
  #
  # Two objects are considered identical if they reside at the exact same
  # memory address. This is also known as referential equality.
  #
  # This method should not be redefined by other objects, as doing so can break
  # various parts of the Inko runtime.
  def equal?(other: Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }

  # Returns `True` if `self` and the given object are not equal.
  #
  # # Examples
  #
  # Comparing two objects that are not identical:
  #
  #     10 != 20 # => True
  #
  # Comparing two objects that are identical:
  #
  #     10 != 10 # => False
  def !=(other: Self) -> Boolean {
    _INKOC.object_equals(self == other, False)
  }
}

# The binary `>=` operator.
trait GreaterOrEqual {
  # Returns `True` if `self` is greater than or equal to the given object.
  def >=(other: Self) -> Boolean
}

# The binary `<=` operator.
trait SmallerOrEqual {
  # Returns `True` if `self` is smaller than or equal to the given object.
  def <=(other: Self) -> Boolean
}

# The binary `&` (bitwise AND) operator.
trait BitwiseAnd {
  # Returns the result of a bitwise AND with `self` and the given object.
  def &(other: Self) -> Self
}

# The binary `|` (bitwise OR) operator.
trait BitwiseOr {
  # Returns the result of a bitwise OR with `self` and the given object.
  def |(other: Self) -> Self
}

# The binary `^` operator.
trait BitwiseXor {
  # Returns the result of a bitwise XOR with `self` and the given object.
  def ^(other: Self) -> Self
}

# The binary `<<` operator.
trait ShiftLeft {
  # Returns the result of a bitwise shift to the left with `self` and the given
  # object.
  def <<(other: Self) -> Self
}

# The binary `>>` operator.
trait ShiftRight {
  # Returns the result of a bitwise shift to the right with `self` and the
  # given object.
  def >>(other: Self) -> Self
}
