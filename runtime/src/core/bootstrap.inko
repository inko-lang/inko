# A module for setting up the basic building blocks other modules depend on.
#
# This module is the very first module imported and executed. Common constructs
# such as `object` and `trait` are not yet available at this point.

# Set the object names for the various built-in objects. Normally this is done
# automatically when creating an object using the `object` keyword. Since these
# built-ins are set up in the VM we must do this manually.

# All these constants will be available as globals to all other modules.
let Boolean = _INKOC.get_boolean_prototype
let True = _INKOC.get_true
let False = _INKOC.get_false
let Nil = _INKOC.get_nil
let NilType = _INKOC.get_nil_prototype
let Object = _INKOC.get_object_prototype
let String = _INKOC.get_string_prototype
let Integer = _INKOC.get_integer_prototype
let Float = _INKOC.get_float_prototype
let Block = _INKOC.get_block_prototype
let Array = _INKOC.get_array_prototype
let ByteArray = _INKOC.get_byte_array_prototype

_INKOC.set_object_name(Object, 'Object')
_INKOC.set_object_name(Boolean, 'Boolean')
_INKOC.set_object_name(String, 'String')
_INKOC.set_object_name(NilType, 'NilType')
_INKOC.set_object_name(Integer, 'Integer')
_INKOC.set_object_name(Float, 'Float')
_INKOC.set_object_name(Array, 'Array')
_INKOC.set_object_name(Block, 'Block')
_INKOC.set_object_name(ByteArray, 'ByteArray')

# Now that our core objects are set up we can start defining more of the
# building blocks of Inko, such as "Object.new" and the bits necessary to allow
# creating of modules.
impl Object {
  # Creates a new instance of `self`, without sending `init` to the instance.
  static def allocate -> Self {
    _INKOC.set_object(False, self)
  }

  # Creates a new instance of `self` and sends `init` to the instance.
  static def new -> Self {
    let obj = allocate

    obj.init

    obj
  }

  def init {}
}

# A trait.
#
# A trait can contain both required methods and default implementations of
# methods.
#
# This type is defined in `core::bootstrap` as it's needed very early on in the
# runtime bootstrapping process.
object Trait {}

# A trait implemented by all objects, to be used when no more meaningful type is
# known.
#
# Object's (e.g. `Object`) can't be casted into another objects. The `Any` trait
# is implemented by all objects, and thus can be casted into any type.
#
# The trait `Any` is defined here as it's needed early on in the bootstrapping
# process, before constants defined in `std::prelude` are available. The trait
# is implemented for core types in `std::any`.
trait Any {}
