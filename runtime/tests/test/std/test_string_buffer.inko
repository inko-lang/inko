import std::string_buffer::StringBuffer
import std::test
import std::test::assert

test.group('std::string_buffer::StringBuffer.new') do (g) {
  g.test('Creating an empty StringBuffer') {
    assert.true(StringBuffer.new.empty?)
  }

  g.test('Creating a StringBuffer with values') {
    assert.equal(StringBuffer.new('foo').length, 1)
  }
}

test.group('std::string_buffer::StringBuffer.from_array') do (g) {
  g.test('Creating a StringBuffer from an empty Array') {
    assert.true(StringBuffer.from_array(Array.new).empty?)
  }

  g.test('Creating a StringBuffer from an Array with values') {
    assert.equal(StringBuffer.from_array(Array.new('foo')).length, 1)
  }
}

test.group('std::string_buffer::StringBuffer.push') do (g) {
  g.test('Pushing a String into a StringBuffer') {
    let buffer = StringBuffer.new
    let pushed = buffer.push('x')

    assert.equal(pushed, 'x')
    assert.equal(buffer.to_string, pushed)
  }
}

test.group('std::string_buffer::StringBuffer.to_string') do (g) {
  g.test('Converting a StringBuffer to a String') {
    let buffer = StringBuffer.new

    buffer.push('foo')
    buffer.push('bar')
    buffer.push('baz')

    assert.equal(buffer.to_string, 'foobarbaz')
  }
}

test.group('std::string_buffer::StringBuffer.length') do (g) {
  g.test('Obtaining the length of an empty StringBuffer') {
    assert.equal(StringBuffer.new.length, 0)
  }

  g.test('Obtaining the length of a non-empty StringBuffer') {
    assert.equal(StringBuffer.new('foo').length, 1)
  }
}
