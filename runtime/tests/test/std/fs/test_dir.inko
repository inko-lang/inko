import std::env
import std::fs
import std::fs::dir
import std::fs::path::SEPARATOR
import std::process
import std::string_buffer::StringBuffer
import std::test
import std::test::assert
import std::stdio::stdout

## The path of the base temporary directory, such as /tmp on Linux.
let TEMP = env.temporary_directory.to_string

def temp_dir(components = Array.new!(String)) -> String {
  let buffer = StringBuffer
    .new(TEMP, SEPARATOR, 'inko-test-' + process.current.identifier)

  components.each do (component) {
    buffer.push(SEPARATOR)
    buffer.push(component)
  }

  buffer.to_string
}

def with_temp_dir(components = Array.new!(String), block: do (String)) {
  let root = temp_dir
  let path = temp_dir(components)

  # Without the root directory being present our tests are useless. As such, if
  # this fails we can do nothing but panic.
  try! dir.create(root)

  process.defer {
    # If we can't remove the directory that's OK, since it resides inside the
    # systems' temporary directory.
    try dir.remove(path: root, recursive: True) else Nil
  }

  block.call(path)
}

test.group('std::fs::dir.create') do (g) {
  g.test('Creating a valid directory') {
    with_temp_dir(Array.new('foo')) do (path) {
      try! dir.create(path)

      assert.true(fs.directory?(path))
    }
  }

  g.test('Creating an already existing directory') {
    assert.panic {
      with_temp_dir(Array.new('foo')) do (path) {
        try! dir.create(path)
        try! dir.create(path)
      }
    }
  }

  g.test('Creating a directory recursively') {
    with_temp_dir(Array.new('foo', 'bar')) do (path) {
      try! dir.create(path: path, recursive: True)

      assert.true(fs.directory?(path))
    }
  }

  g.test('Creating an existing directory recursively') {
    assert.no_panic {
      with_temp_dir(Array.new('foo', 'bar')) do (path) {
        try! dir.create(path: path, recursive: True)
        try! dir.create(path: path, recursive: True)
      }
    }
  }
}

test.group('std::fs::dir.remove') do (g) {
  g.test('Removing an empty directory') {
    with_temp_dir(Array.new('foo')) do (path) {
      try! dir.create(path)
      try! dir.remove(path)

      assert.false(fs.directory?(path))
    }
  }

  g.test('Removing a non-empty directory') {
    assert.panic {
      with_temp_dir(Array.new('foo', 'bar')) do (path) {
        try! dir.create(path: path, recursive: True)
        try! dir.remove(temp_dir)
      }
    }
  }

  g.test('Removing an empty directory recursively') {
    with_temp_dir(Array.new('foo', 'bar')) do (path) {
      try! dir.create(path: path, recursive: True)
      try! dir.remove(path: path, recursive: True)

      assert.false(fs.directory?(path))
    }
  }

  g.test('Removing a non-empty directory recursively') {
    let root = temp_dir

    with_temp_dir(Array.new('foo', 'bar')) do (path) {
      try! dir.create(path: path, recursive: True)
      try! dir.remove(path: root, recursive: True)

      assert.false(fs.directory?(root))
    }
  }
}

test.group('std::fs::dir.list') do (g) {
  g.test('Listing the contents of an empty directory') {
    with_temp_dir(Array.new) do (path) {
      let contents = try! dir.list(path)

      assert.equal(contents, Array.new)
    }
  }

  g.test('Listing the contents of a non-existing directory') {
    assert.panic {
      with_temp_dir(Array.new('foo')) do (path) {
        try! dir.list(path)
      }
    }
  }

  g.test('Listing the contents of a non-empty directory') {
    let root = temp_dir

    with_temp_dir(Array.new('foo')) do (path) {
      try! dir.create(path)

      let contents = try! dir.list(root)

      assert.equal(contents.length, 1)
      assert.equal(contents[0].to_string, path)
    }
  }
}
