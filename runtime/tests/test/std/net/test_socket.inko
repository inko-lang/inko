import std::net::ip::Ipv4Address
import std::net::bits::MAXIMUM_LISTEN_BACKLOG
import std::net::socket::(
  DGRAM, IPV4, IPV6, STREAM, Socket, SocketAddress, TcpListener, TcpStream,
  UdpSocket
)
import std::os
import std::process
import std::test
import std::test::assert

test.group('std::net::socket::SocketAddress.new') do (g) {
  g.test('Creating a SocketAddress') {
    let ip = Ipv4Address.new(127, 0, 0, 1)
    let addr = SocketAddress.new(ip: ip, port: 1234)

    assert.equal(addr.ip as Ipv4Address, ip)
    assert.equal(addr.port, 1234)
  }
}

test.group('std::net::socket::SocketAddress.==') do (g) {
  g.test('Comparing two identical SocketAddress objects') {
    let ip = Ipv4Address.new(127, 0, 0, 1)
    let addr1 = SocketAddress.new(ip: ip, port: 1234)
    let addr2 = SocketAddress.new(ip: ip, port: 1234)

    assert.equal(addr1, addr2)
  }

  g.test('Comparing two different SocketAddress objects') {
    let ip = Ipv4Address.new(127, 0, 0, 1)
    let addr1 = SocketAddress.new(ip: ip, port: 1234)
    let addr2 = SocketAddress.new(ip: ip, port: 12345)

    assert.not_equal(addr1, addr2)
  }
}

test.group('std::net::socket::Socket.new') do (g) {
  g.test('Creating an IPv4 stream socket') {
    assert.no_panic {
      try! Socket.new(domain: IPV4, kind: STREAM)
    }
  }

  g.test('Creating an IPv4 datagram socket') {
    assert.no_panic {
      try! Socket.new(domain: IPV4, kind: DGRAM)
    }
  }

  g.test('Creating an IPv6 stream socket') {
    assert.no_panic {
      try! Socket.new(domain: IPV6, kind: STREAM)
    }
  }

  g.test('Creating an IPv6 datagram socket') {
    assert.no_panic {
      try! Socket.new(domain: IPV6, kind: DGRAM)
    }
  }

  g.test('Creating an invalid socket') {
    assert.panic {
      try! Socket.new(domain: 9999, kind: STREAM)
    }
  }
}

test.group('std::net::socket::Socket.bind') do (g) {
  g.test('Binding a socket') {
    assert.no_panic {
      let sock = try! Socket.new(domain: IPV4, kind: STREAM)

      try! sock.bind(ip: '0.0.0.0', port: 0)
    }
  }

  g.test('Binding a socket to an invalid address') {
    assert.panic {
      let sock = try! Socket.new(domain: IPV4, kind: STREAM)

      try! sock.bind(ip: '0.0.0.0', port: -1)
    }
  }
}

test.group('std::net::socket::Socket.connect') do (g) {
  g.test('Connecting a socket') {
    assert.no_panic {
      let listener = try! Socket.new(domain: IPV4, kind: STREAM)
      let stream = try! Socket.new(domain: IPV4, kind: STREAM)

      try! listener.bind(ip: '127.0.0.1', port: 0)
      try! listener.listen

      let addr = try! listener.local_address

      try! stream.connect(ip: addr.ip, port: addr.port)
    }
  }

  g.test('Connecting a socket to a non-existing address') {
    assert.panic {
      let stream = try! Socket.new(domain: IPV4, kind: STREAM)

      # connect() may not immediately raise a "connection refused" error, due to
      # connect() being non-blocking. In this case the "connection refused"
      # error is raised on the next operation.
      #
      # Since a connect() _might_ still raise the error right away, we have to
      # both connect and try to use the socket in some way.
      try! stream.connect(ip: '0.0.0.0', port: 40_000)
      try! stream.write_string('ping')
    }
  }
}

test.group('std::net::socket::Socket.listen') do (g) {
  g.test('Marking a Socket as listening with a custom backlog') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    try! socket.bind(ip: '0.0.0.0', port: 0)

    assert.equal(try! socket.listen(4), 4)
  }

  g.test('Marking a Socket as listening using the default backlog') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    try! socket.bind(ip: '0.0.0.0', port: 0)

    assert.equal(try! socket.listen, MAXIMUM_LISTEN_BACKLOG)
  }
}

test.group('std::net::socket::Socket.accept') do (g) {
  g.test('Accepting a connection from an unbound socket') {
    assert.panic {
      let socket = try! Socket.new(domain: IPV4, kind: STREAM)

      try! socket.accept
    }
  }

  g.test('Accepting a connection from a bound socket') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    let child_proc = process.spawn {
      let address = process.receive as SocketAddress
      let stream = try! Socket.new(domain: IPV4, kind: STREAM)

      try! stream.connect(ip: address.ip, port: address.port)
    }

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    child_proc.send(try! listener.local_address)

    let connection = try! listener.accept

    assert.equal(try! connection.local_address, try! listener.local_address)
  }
}

test.group('std::net::socket::Socket.send_to') do (g) {
  g.test('Sending a message to a specific address') {
    let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

    # On Windows one can not use sendto() with 0.0.0.0 being the target IP
    # address, so instead we bind (and send to) 127.0.0.1.
    try! socket.bind(ip: '127.0.0.1', port: 0)

    let send_to = try! socket.local_address

    try! socket.send_to(message: 'ping', ip: send_to.ip, port: send_to.port)

    assert.equal(try! socket.read_string(size: 4), 'ping')
  }
}

test.group('std::net::socket::Socket.receive_from') do (g) {
  g.test('Receiving a message and a SocketAddress') {
    let listener = try! Socket.new(domain: IPV4, kind: DGRAM)
    let client = try! Socket.new(domain: IPV4, kind: DGRAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! client.bind(ip: '127.0.0.1', port: 0)

    let send_to = try! listener.local_address

    try! client.send_to(message: 'ping', ip: send_to.ip, port: send_to.port)

    let bytes = ByteArray.new
    let sender = try! listener.receive_from(bytes: bytes, size: 4)

    assert.equal(sender, try! client.local_address)
    assert.equal(bytes.to_string, 'ping')
  }
}

test.group('std::net::socket::Socket.local_address') do (g) {
  g.test('Obtaining the local address of an unbound socket') {
    os.windows?.if(
      true: {
        assert.panic {
          let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

          try! socket.local_address
        }
      },
      false: {
        let socket = try! Socket.new(domain: IPV4, kind: DGRAM)
        let address = try! socket.local_address

        assert.equal(
          address,
          SocketAddress.new(ip: Ipv4Address.new(0, 0, 0, 0), port: 0)
        )
      }
    )
  }

  g.test('Obtaining the local address of a bound socket') {
    let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

    try! socket.bind(ip: '127.0.0.1', port: 0)

    let local_address = try! socket.local_address

    assert.equal(local_address.ip.to_string, '127.0.0.1')
    assert.true(local_address.port.positive?)
  }
}

test.group('std::net::socket::Socket.peer_address') do (g) {
  g.test('Obtaining the peer address of a disconnected socket') {
    assert.panic {
      let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

      try! socket.peer_address
    }
  }

  g.test('Obtaining the peer address of a connected socket') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)
    let client = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let listener_addr = try! listener.local_address

    try! client.connect(ip: listener_addr.ip, port: listener_addr.port)

    assert.equal(try! client.peer_address, listener_addr)
  }
}

test.group('std::net::socket::Socket.ttl') do (g) {
  g.test('Setting and obtaining the value of the IP_TTL option') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    try! socket.ttl = 10

    assert.equal(try! socket.ttl, 10)
  }
}

test.group('std::net::socket::Socket.only_ipv6?') do (g) {
  g.test('Setting and obtainin the IPV6_V6ONLY option') {
    let socket = try! Socket.new(domain: IPV6, kind: STREAM)

    try! socket.only_ipv6 = True

    assert.true(try! socket.only_ipv6?)
  }
}

test.group('std::net::socket::Socket.no_delay?') do (g) {
  g.test('Setting and obtaining the value of the TCP_NODELAY option') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    try! socket.no_delay = True

    assert.true(try! socket.no_delay?)
  }
}

test.group('std::net::socket::Socket.broadcast?') do (g) {
  g.test('Setting and obtaining the value of the SO_BROADCAST option') {
    let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

    try! socket.broadcast = True

    assert.true(try! socket.broadcast?)
  }
}

test.group('std::net::socket::Socket.linger') do (g) {
  g.test('Setting and obtaining the value of the SO_LINGER option') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    try! socket.linger = 5

    assert.equal(try! { socket.linger }.as_seconds.to_integer, 5)
  }
}

test.group('std::net::socket::Socket.receive_buffer_size') do (g) {
  g.test('Setting and obtaining the value of the SO_RCVBUF option') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    try! socket.receive_buffer_size = 256

    assert.true(try! { socket.receive_buffer_size } >= 256)
  }
}

test.group('std::net::socket::Socket.send_buffer_size') do (g) {
  g.test('Setting and obtaining the value of the SO_SNDBUT option') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    try! socket.send_buffer_size = 256

    assert.true(try! { socket.send_buffer_size } >= 256)
  }
}

# Obtaining the TCP keepalive setting fails on Windows. See
# https://github.com/alexcrichton/socket2-rs/issues/24 for more information.
os.windows?.if_false {
  test.group('std::net::socket::Socket.keepalive') do (g) {
    g.test('Setting and obtaining the TCP keepalive timeout') {
      let socket = try! Socket.new(domain: IPV4, kind: STREAM)

      try! socket.keepalive = 5

      assert.equal(try! { socket.keepalive }.as_seconds.to_integer, 5)
    }
  }
}

test.group('std::net::socket::Socket.ipv4_multicast_loop?') do (g) {
  g.test('Setting and obtaining the value of the IP_MULTICAST_LOOP option') {
    let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

    try! socket.ipv4_multicast_loop = True

    assert.true(try! socket.ipv4_multicast_loop?)
  }
}

test.group('std::net::socket::Socket.ipv6_multicast_loop?') do (g) {
  g.test('Setting and obtaining the value of the IPV6_MULTICAST_LOOP option') {
    let socket = try! Socket.new(domain: IPV6, kind: DGRAM)

    try! socket.ipv6_multicast_loop = True

    assert.true(try! socket.ipv6_multicast_loop?)
  }
}

test.group('std::net::socket::Socket.ipv4_multicast_ttl?') do (g) {
  g.test('Setting and obtaining the value of the IP_MULTICAST_TTL option') {
    let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

    try! socket.ipv4_multicast_ttl = 32

    assert.equal(try! socket.ipv4_multicast_ttl, 32)
  }
}

test.group('std::net::socket::Socket.ipv6_multicast_hops') do (g) {
  g.test('Setting and obtaining the value of the IPV6_MULTICAST_HOPS option') {
    let socket = try! Socket.new(domain: IPV6, kind: DGRAM)

    try! socket.ipv6_multicast_hops = 4

    assert.equal(try! socket.ipv6_multicast_hops, 4)
  }
}

test.group('std::net::socket::Socket.ipv4_multicast_interface') do (g) {
  g.test('Setting and obtaining the IP_MULTICAST_IF option') {
    let socket = try! Socket.new(domain: IPV4, kind: DGRAM)

    try! socket.ipv4_multicast_interface = '127.0.0.1'

    assert.equal(
      try! { socket.ipv4_multicast_interface }.to_string,
      '127.0.0.1'
    )
  }
}

test.group('std::net::socket::Socket.ipv6_multicast_interface') do (g) {
  g.test('Setting and obtaining the IPV6_MULTICAST_IF option') {
    let socket = try! Socket.new(domain: IPV6, kind: DGRAM)
    let mut interface = 0
    let mut found = False

    # The actual interface might vary per environment, but there is no
    # cross-platform way of figuring out which interface is valid. To work
    # around this we just try the first 10 interfaces, and error if none could
    # be found.
    {
      found.false?.and { interface < 10 }
    }.while_true {
      found = True

      try {
        socket.ipv6_multicast_interface = interface
      } else (error) {
        found = False
        interface += 1
      }
    }

    assert.true(found)
    assert.equal(try! socket.ipv6_multicast_interface, interface)
  }
}

test.group('std::net::socket::Socket.ipv6_unicast_hops') do (g) {
  g.test('Setting and obtaining the value of the IPV6_UNICAST_HOPS option') {
    let socket = try! Socket.new(domain: IPV6, kind: DGRAM)

    try! socket.ipv6_unicast_hops = 4

    assert.equal(try! socket.ipv6_unicast_hops, 4)
  }
}

test.group('std::net::socket::Socket.reuse_adress') do (g) {
  g.test('Setting and obtaining the value of the SO_REUSEADDR option') {
    let socket = try! Socket.new(domain: IPV6, kind: DGRAM)

    try! socket.reuse_address = True

    assert.true(try! socket.reuse_address)
  }
}

test.group('std::net::socket::Socket.reuse_port') do (g) {
  g.test('Setting and obtaining the value of the SO_REUSEPORT option') {
    let socket = try! Socket.new(domain: IPV6, kind: DGRAM)

    try! socket.reuse_port = True

    os.windows?.if(
      # Windows does not support SO_REUSEPORT, so the return value is always
      # `False`.
      true: { assert.false(try! socket.reuse_port) },
      false: { assert.true(try! socket.reuse_port) }
    )
  }
}

test.group('std::net::socket::Socket.read_bytes') do (g) {
  g.test('Reading bytes from a Socket') {
    let socket = try! Socket.new(domain: IPV4, kind: DGRAM)
    let bytes = ByteArray.new

    try! socket.bind(ip: '127.0.0.1', port: 0)

    let local_addr = try! socket.local_address

    try! socket
      .send_to(message: 'ping', ip: local_addr.ip, port: local_addr.port)

    let read = try! socket.read_bytes(bytes: bytes, size: 4)

    assert.equal(bytes.to_string, 'ping')
    assert.equal(read, 4)
  }
}

test.group('std::net::socket::Socket.write_bytes') do (g) {
  g.test('Writing bytes to a Socket') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)
    let stream = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let local_addr = try! listener.local_address

    try! stream.connect(ip: local_addr.ip, port: local_addr.port)

    let written = try! stream.write_bytes('ping'.to_byte_array)
    let connection = try! listener.accept
    let message = try! connection.read_string(size: 4)

    assert.equal(message, 'ping')
    assert.equal(written, 4)
  }
}

test.group('std::net::socket::Socket.close') do (g) {
  g.test('Closing a Socket') {
    assert.no_panic {
      let socket = try! Socket.new(domain: IPV4, kind: STREAM)

      socket.close
    }
  }
}

test.group('std::net::socket::Socket.flush') do (g) {
  g.test('Flushing a Socket') {
    let socket = try! Socket.new(domain: IPV4, kind: STREAM)

    assert.equal(socket.flush, Nil)
  }
}

test.group('std::net::socket::Socket.shutdown_read') do (g) {
  g.test('Shutting down the reading half of a Socket') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)
    let stream = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let local_addr = try! listener.local_address

    try! stream.connect(ip: local_addr.ip, port: local_addr.port)
    try! stream.shutdown_read

    let message = try! stream.read_string(4)

    assert.equal(message, '')
  }
}

test.group('std::net::socket::Socket.shutdown_write') do (g) {
  g.test('Shutting down the writing half of a Socket') {
    assert.panic {
      let listener = try! Socket.new(domain: IPV4, kind: STREAM)
      let stream = try! Socket.new(domain: IPV4, kind: STREAM)

      try! listener.bind(ip: '127.0.0.1', port: 0)
      try! listener.listen

      let local_addr = try! listener.local_address

      try! stream.connect(ip: local_addr.ip, port: local_addr.port)
      try! stream.shutdown_write
      try! stream.write_string('ping')
    }
  }
}

test.group('std::net::socket::Socket.shutdown') do (g) {
  g.test('Shutting down the writing half of a Socket') {
    assert.panic {
      let listener = try! Socket.new(domain: IPV4, kind: STREAM)
      let stream = try! Socket.new(domain: IPV4, kind: STREAM)

      try! listener.bind(ip: '127.0.0.1', port: 0)
      try! listener.listen

      let local_addr = try! listener.local_address

      try! stream.connect(ip: local_addr.ip, port: local_addr.port)
      try! stream.shutdown
      try! stream.write_string('ping')
    }
  }

  g.test('Shutting down the reading half of a Socket') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)
    let stream = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let local_addr = try! listener.local_address

    try! stream.connect(ip: local_addr.ip, port: local_addr.port)
    try! stream.shutdown

    let message = try! stream.read_string(4)

    assert.equal(message, '')
  }
}

test.group('std::net::socket::UdpSocket.new') do (g) {
  g.test('Creating a UdpSocket') {
    assert.no_panic {
      try! UdpSocket.new(ip: '0.0.0.0', port: 0)
    }
  }

  g.test('Creating a UdpSocket using an invalid IP address') {
    assert.panic {
      try! UdpSocket.new(ip: 'foo', port: 0)
    }
  }
}

test.group('std::net::socket::UdpSocket.connect') do (g) {
  g.test('Connecting a UdpSocket') {
    assert.no_panic {
      let socket1 = try! UdpSocket.new(ip: '127.0.0.1', port: 40_000)
      let socket2 = try! UdpSocket.new(ip: '127.0.0.1', port: 41_000)

      try! socket1.connect(ip: '127.0.0.1', port: 41_000)
    }
  }

  g.test('Reading and writing from a connected UdpSocket') {
    let socket1 = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let socket2 = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let address = try! socket2.local_address

    try! socket1.connect(ip: '127.0.0.1', port: address.port)
    try! socket1.write_string('ping')

    assert.equal(try! socket2.read_string(4), 'ping')
  }
}

test.group('std::net::socket::UdpSocket.send_to') do (g) {
  g.test('Sending a message to a specific address') {
    let socket = try! UdpSocket.new('127.0.0.1', port: 0)
    let send_to = try! socket.local_address

    try! socket.send_to(message: 'ping', ip: send_to.ip, port: send_to.port)

    assert.equal(try! socket.read_string(size: 4), 'ping')
  }
}

test.group('std::net::socket::UdpSocket.receive_from') do (g) {
  g.test('Receiving a message and a SocketAddress') {
    let listener = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let client = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let send_to = try! listener.local_address

    try! client.send_to(message: 'ping', ip: send_to.ip, port: send_to.port)

    let bytes = ByteArray.new
    let sender = try! listener.receive_from(bytes: bytes, size: 4)

    assert.equal(sender, try! client.local_address)
    assert.equal(bytes.to_string, 'ping')
  }
}

test.group('std::net::socket::UdpSocket.local_address') do (g) {
  g.test('Obtaining the local address of a UdpSocket') {
    let socket = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let local_address = try! socket.local_address

    assert.equal(local_address.ip.to_string, '127.0.0.1')
    assert.true(local_address.port.positive?)
  }
}

test.group('std::net::socket::UdpSocket.read_bytes') do (g) {
  g.test('Reading bytes from a UdpSocket') {
    let socket = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let bytes = ByteArray.new
    let local_addr = try! socket.local_address

    try! socket
      .send_to(message: 'ping', ip: local_addr.ip, port: local_addr.port)

    let read = try! socket.read_bytes(bytes: bytes, size: 4)

    assert.equal(bytes.to_string, 'ping')
    assert.equal(read, 4)
  }
}

test.group('std::net::socket::UdpSocket.write_bytes') do (g) {
  g.test('Writing bytes to a connected UdpSocket') {
    let server_socket = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let client_socket = try! UdpSocket.new(ip: '127.0.0.1', port: 0)
    let local_addr = try! server_socket.local_address

    try! client_socket.connect(ip: local_addr.ip, port: local_addr.port)

    let written = try! client_socket.write_bytes('ping'.to_byte_array)
    let message = try! server_socket.read_string(size: 4)

    assert.equal(message, 'ping')
    assert.equal(written, 4)
  }

  g.test('Writing bytes to a disconnected UdpSocket') {
    assert.panic {
      let socket = try! UdpSocket.new(ip: '127.0.0.1', port: 0)

      try! socket.write_bytes('ping'.to_byte_array)
    }
  }
}

test.group('std::net::socket::UdpSocket.close') do (g) {
  g.test('Closing a UdpSocket') {
    assert.no_panic {
      let socket = try! UdpSocket.new(ip: '127.0.0.1', port: 0)

      socket.close
    }
  }
}

test.group('std::net::socket::UdpSocket.flush') do (g) {
  g.test('Flushing a UdpSocket') {
    let socket = try! UdpSocket.new(ip: '127.0.0.1', port: 0)

    assert.equal(socket.flush, Nil)
  }
}

test.group('std::net::socket::TcpStream.new') do (g) {
  g.test('Creating a new TcpStream') {
    assert.no_panic {
      let listener = try! Socket.new(domain: IPV4, kind: STREAM)

      try! listener.bind(ip: '127.0.0.1', port: 0)
      try! listener.listen

      let listener_addr = try! listener.local_address

      try! TcpStream.new(ip: listener_addr.ip, port: listener_addr.port)
    }
  }
}

test.group('std::net::socket::TcpStream.local_address') do (g) {
  g.test('Obtaining the local address') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let listener_addr = try! listener.local_address
    let stream =
      try! TcpStream.new(ip: listener_addr.ip, port: listener_addr.port)

    let local_addr = try! stream.local_address

    assert.equal(local_addr.ip.to_string, '127.0.0.1')
    assert.true(local_addr.port.positive?)
  }
}

test.group('std::net::socket::TcpStream.peer_address') do (g) {
  g.test('Obtaining the peer address') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let listener_addr = try! listener.local_address
    let stream =
      try! TcpStream.new(ip: listener_addr.ip, port: listener_addr.port)

    let peer_addr = try! stream.peer_address

    assert.equal(peer_addr.ip as Ipv4Address, listener_addr.ip as Ipv4Address)
    assert.equal(peer_addr.port, listener_addr.port)
  }
}

test.group('std::net::socket::TcpStream.read_bytes') do (g) {
  g.test('Reading bytes from a TcpStream') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let addr = try! listener.local_address
    let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)
    let bytes = ByteArray.new

    try! listener.accept.write_string('ping')

    try! stream.read_bytes(bytes: bytes, size: 4)

    assert.equal(bytes.to_string, 'ping')
  }
}


test.group('std::net::socket::TcpStream.write_bytes') do (g) {
  g.test('Writing bytes to a TcpStream') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let addr = try! listener.local_address
    let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)
    let connection = try! listener.accept

    try! stream.write_bytes('ping'.to_byte_array)

    assert.equal(try! connection.read_string(4), 'ping')
  }
}

test.group('std::net::socket::TcpStream.write_string') do (g) {
  g.test('Writing a String to a TcpStream') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let addr = try! listener.local_address
    let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)
    let connection = try! listener.accept

    try! stream.write_string('ping')

    assert.equal(try! connection.read_string(4), 'ping')
  }
}

test.group('std::net::socket::TcpStream.close') do (g) {
  g.test('Closing a TcpStream') {
    assert.no_panic {
      let listener = try! Socket.new(domain: IPV4, kind: STREAM)

      try! listener.bind(ip: '127.0.0.1', port: 0)
      try! listener.listen

      let addr = try! listener.local_address
      let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)

      stream.close
    }
  }
}

test.group('std::net::socket::TcpStream.flush') do (g) {
  g.test('Flushing a TcpStream') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let addr = try! listener.local_address
    let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)

    assert.equal(stream.flush, Nil)
  }
}

test.group('std::net::socket::TcpStream.shutdown_read') do (g) {
  g.test('Shutting down the reading half of a TcpStream') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let addr = try! listener.local_address
    let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)

    try! stream.shutdown_read

    let message = try! stream.read_string(4)

    assert.equal(message, '')
  }
}

test.group('std::net::socket::TcpStream.shutdown_write') do (g) {
  g.test('Shutting down the writing half of a Socket') {
    assert.panic {
      let listener = try! Socket.new(domain: IPV4, kind: STREAM)

      try! listener.bind(ip: '127.0.0.1', port: 0)
      try! listener.listen

      let addr = try! listener.local_address
      let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)

      try! stream.shutdown_write
      try! stream.write_string('ping')
    }
  }
}

test.group('std::net::socket::Socket.shutdown') do (g) {
  g.test('Shutting down the writing half of a Socket') {
    assert.panic {
      let listener = try! Socket.new(domain: IPV4, kind: STREAM)

      try! listener.bind(ip: '127.0.0.1', port: 0)
      try! listener.listen

      let addr = try! listener.local_address
      let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)

      try! stream.shutdown
      try! stream.write_string('ping')
    }
  }

  g.test('Shutting down the reading half of a Socket') {
    let listener = try! Socket.new(domain: IPV4, kind: STREAM)

    try! listener.bind(ip: '127.0.0.1', port: 0)
    try! listener.listen

    let addr = try! listener.local_address
    let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)

    try! stream.shutdown

    let message = try! stream.read_string(4)

    assert.equal(message, '')
  }
}

test.group('std::net::socket::TcpListener.new') do (g) {
  g.test('Creating a TcpListener') {
    assert.no_panic {
      try! TcpListener.new(ip: '0.0.0.0', port: 0)
    }
  }

  g.test('Creating a TcpListener with an in-use address and port') {
    assert.no_panic {
      let listener1 = try! TcpListener.new(ip: '0.0.0.0', port: 0)
      let address = try! listener1.local_address

      try! TcpListener.new(ip: address.ip, port: address.port)
    }
  }

  g.test('Creating a TcpListener that only uses IPv6 packets') {
    let listener = try! TcpListener.new(ip: '::1', port: 0, only_ipv6: True)

    assert.true(try! listener.socket.only_ipv6?)
  }
}

test.group('std::net::socket::TcpListener.accept') do (g) {
  g.test('Accepting an incoming connection') {
    let listener = try! TcpListener.new(ip: '127.0.0.1', port: 0)
    let addr = try! listener.local_address
    let stream = try! TcpStream.new(ip: addr.ip, port: addr.port)
    let connection = try! listener.accept

    assert.equal(try! connection.local_address, try! stream.peer_address)
  }
}

test.group('std::net::socket::TcpListener.local_address') do (g) {
  g.test('Obtaining the local address') {
    let listener = try! TcpListener.new(ip: '127.0.0.1', port: 0)
    let addr = try! listener.local_address

    assert.equal(addr.ip.to_string, '127.0.0.1')
    assert.true(addr.port.positive?)
  }
}

test.group('std::net::socket::TcpListener.close') do (g) {
  g.test('Closing a TcpListener') {
    let listener = try! TcpListener.new(ip: '127.0.0.1', port: 0)

    assert.equal(listener.close, Nil)
  }
}
