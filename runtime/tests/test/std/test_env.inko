import std::env
import std::test
import std::process
import std::test::assert

def temporary_environment_variable!(R)(block: do (String) -> R) -> R {
  let name = 'INKO_ENV_' + process.current.identifier

  process.defer {
    env.remove(name)
  }

  block.call(name)
}

test.group('std::env.[]') do (g) {
  g.test('Obtaining the value of an existing environment variable') {
    temporary_environment_variable do (name) {
      env[name] = 'foo'

      assert.equal(env[name], 'foo')
    }
  }

  g.test('Obtaining the value of a non-existing environment variable') {
    temporary_environment_variable do (name) {
      assert.equal(env[name], Nil)
    }
  }
}

test.group('std::env.[]=') do (g) {
  g.test('Setting the value of an environment variable') {
    temporary_environment_variable do (name) {
      env[name] = 'foo'

      assert.equal(env[name], 'foo')

      env[name] = 'bar'

      assert.equal(env[name], 'bar')
    }
  }
}

test.group('std::env.remove') do (g) {
  g.test('Removing an existing environment variable') {
    temporary_environment_variable do (name) {
      env[name] = 'foo'

      env.remove(name)

      assert.equal(env[name], Nil)
    }
  }

  g.test('Removing a non-existing environment variable') {
    temporary_environment_variable do (name) {
      env.remove(name)

      assert.equal(env[name], Nil)
    }
  }
}

test.group('std::env.variables') do (g) {
  g.test('Obtaining all environment variables and their values') {
    temporary_environment_variable do (name) {
      env[name] = 'foo'

      let vars = env.variables

      assert.false(vars.empty?)
      assert.equal(vars[name], 'foo')
    }
  }
}

test.group('std::env.home_directory') do (g) {
  g.test('Obtaining the home directory of the current user') {
    # For the time being we'll assume that the user executing the tests has a
    # home directory set.
    let home_dir = env.home_directory

    assert.true(home_dir.exists?)
    assert.greater(home_dir.to_string.length, 0)
  }
}

test.group('std::env.temporary_directory') do (g) {
  g.test('Obtaining the temporary directory') {
    let temp_dir = env.temporary_directory

    assert.true(temp_dir.exists?)
    assert.greater(temp_dir.to_string.length, 0)
  }
}

test.group('std::env.working_directory') do (g) {
  g.test('Obtaining the current working directory') {
    let path = try env.working_directory.to_string else ''

    assert.greater(path.length, 0)
  }
}

test.group('std::env.working_directory=') do (g) {
  g.test('Changing the current working directory') {
    let path = try env.working_directory.to_string else '.'
    let new_path = try {
      (env.working_directory = path).to_string
    } else {
      ''
    }

    assert.equal(new_path, path)
  }

  g.test('Changing the working directory to an invalid directory') {
    let path = try {
      (env.working_directory = 'does-not-exist').to_string
    } else {
      'not-set'
    }

    assert.equal(path, 'not-set')
  }
}

test.group('std::env.arguments') do (g) {
  g.test('Obtaining the commandline arguments') {
    assert.equal(env.arguments, Array.new('dummy'))
  }

  g.test('Every call results in a new Array being returned') {
    let args1 = env.arguments
    let args2 = env.arguments

    assert.false(args1.equal?(args2))
  }

  g.test('Modifying the arguments Array does not affect other calls') {
    let args1 = env.arguments

    args1.push('bar')

    let args2 = env.arguments

    assert.equal(args1, Array.new('dummy', 'bar'))
    assert.equal(args2, Array.new('dummy'))
  }
}
