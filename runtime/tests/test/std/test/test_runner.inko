import std::debug::CallFrame
import std::mirror
import std::process::(self, Process)
import std::test
import std::test::assert
import std::test::config::DEFAULT_CONCURRENCY
import std::test::formatters::ProgressFormatter
import std::test::runner::(
  AddTest, Client, ConfigureRunner, RunTests, RunnerFinished, RunnerState
)
import std::test::test::Test
import std::time::Duration

def example_test -> Test {
  let frame = CallFrame.new(path: 'test.inko', name: 'test', line: 1)

  Test.new(
    name: 'test name',
    group_name: 'group name',
    runner: process.current,
    location: frame,
    body: lambda {}
  )
}

test.group('std::test::runner::RunnerState.add_test') do (g) {
  g.test('Adding a test') {
    let state = RunnerState.new
    let test = example_test

    state.add_test(test)

    assert.equal(state.tests, Array.new(test))
  }
}

test.group('std::test::runner::RunnerState.configuration') do (g) {
  g.test('Obtaining the Configuration of a RunnerState') {
    let state = RunnerState.new

    assert.equal(state.configuration.concurrency, DEFAULT_CONCURRENCY)
  }
}

test.group('std::test::runner::RunnerState.concurrency') do (g) {
  g.test('Obtaining the concurrency of a RunnerState') {
    let state = RunnerState.new

    assert.equal(state.concurrency, DEFAULT_CONCURRENCY)
  }
}

test.group('std::test::runner::RunnerState.formatter') do (g) {
  g.test('Obtaining the formatter of a RunnerState') {
    let state = RunnerState.new
    let mirror = mirror.reflect_object(state.formatter)

    assert.true(mirror.instance_of?(ProgressFormatter))
  }
}

test.group('std::test::runner::ConfigureRunner.run') do (g) {
  g.test('Configuring a test runner') {
    let state = RunnerState.new
    let command = ConfigureRunner.new(option: 'concurrency', value: 4)

    command.run(state)

    assert.equal(state.concurrency, 4)
  }
}

test.group('std::test::runner::AddTest.run') do (g) {
  g.test('Adding a test to a test suite') {
    let state = RunnerState.new
    let test = example_test
    let command = AddTest.new(test)

    command.run(state)

    assert.equal(state.tests, Array.new(test))
  }
}

test.group('std::test::runner::RunnerFinished.runner') do (g) {
  g.test('Obtaining the Process of a runner') {
    let proc = process.current

    assert.equal(RunnerFinished.new(runner: proc, failures: False).runner, proc)
  }
}

test.group('std::test::runner::RunnerFinished.failures?') do (g) {
  g.test('Checking if a runner encountered any test failures') {
    let proc = process.current

    assert.false(RunnerFinished.new(runner: proc, failures: False).failures?)
    assert.true(RunnerFinished.new(runner: proc, failures: True).failures?)
  }
}

test.group('std::test::runner::Client.runner') do (g) {
  g.test('Obtaining the Process of the test runner') {
    let proc = process.current

    assert.equal(Client.new(proc).runner, proc)
  }
}

test.group('std::test::runner::Client.configure') do (g) {
  g.test('Configuring a test runner that is not running') {
    let client = Client.new(process.current)
    let state = RunnerState.new

    client.configure('concurrency', 4)

    (process.receive as ConfigureRunner).run(state)

    assert.equal(state.concurrency, 4)
  }

  g.test('Configuring a test runner that is already running') {
    assert.panic {
      let client = Client.new(process.current)

      client.mark_as_running
      client.configure('concurrency', 4)
    }
  }
}

test.group('std::test::runner::Client.add_test') do (g) {
  g.test('Adding a test to a test runner that is not running') {
    let client = Client.new(process.current)
    let state = RunnerState.new
    let test = example_test

    client.add_test(test)

    (process.receive as AddTest).run(state)

    assert.equal(state.tests, Array.new(test))
  }

  g.test('Adding a test to a test runner that is running') {
    assert.panic {
      let client = Client.new(process.current)

      client.mark_as_running
      client.add_test(example_test)
    }
  }
}

test.group('std::test::runner::Client.run') do (g) {
  g.test('Running a test suite') {
    let proc = process.spawn {
      let command = process.receive as RunTests

      command.notify_client(failures: False)
    }

    let client = Client.new(proc)

    client.run

    assert.true(client.running?)
  }
}

test.group('std::test::runner::Client.wait_for_tests') do (g) {
  g.test('Wait for the tests to finish running') {
    let proc = process.spawn {
      let parent = process.receive as Process
      let result = RunnerFinished.new(runner: parent, failures: False)
      let client = Client.new(parent)

      process.current.send(result)

      client.wait_for_tests

      parent.send(True)
    }

    proc.send(process.current)

    # If the client never stops waiting for tests, this receive will time out
    # causing the below assertion to fail.
    let finished = process.receive(Duration.from_seconds(5)) as ?Boolean

    assert.true(finished)
  }
}

test.group('std::test::runner::Client.running?') do (g) {
  g.test('Checking if a test runner is running') {
    let client = Client.new(process.current)

    assert.false(client.running?)

    client.mark_as_running

    assert.true(client.running?)
  }
}
