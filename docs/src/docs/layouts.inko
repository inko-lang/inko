import builder.html
import docs.config (Config)
import docs.filters (
  AddCopyButton, AutoTableOfContents, RelativeLinks, StandardLibraryLinks,
)
import docs.menu (Item)
import docs.url (link_from)
import markdown
import markdown.html (Filter)
import wobsite (Page)
import wobsite.markdown (Admonitions, SyntaxHighlight)

let GIT_NOTICE = "You're looking at the documentation for the \"main\" branch, [click here](/manual/latest) to view the documentation for the latest stable release."

fn filters(config: ref Config, page: ref Page) -> Array[Filter] {
  [
    SyntaxHighlight.new as Filter,
    Admonitions.new as Filter,
    StandardLibraryLinks(config.std_docs) as Filter,
    RelativeLinks(menu: config.menu, page: page) as Filter,
    AddCopyButton.new as Filter,
    AutoTableOfContents() as Filter, # This filter must come last
  ]
}

fn extract_toc(document: mut html.Document) -> Option[html.Node] {
  match document.nodes.last {
    case Some(Element({ @name = 'ul', @attributes = attr })) -> {
      match attr.opt('class') {
        case Some('toc') -> document.nodes.pop
        case _ -> Option.None
      }
    }
    case _ -> Option.None
  }
}

fn content(config: ref Config, page: ref Page, root: mut html.Element) {
  let body = page.to_html(filters(config, page))
  let toc = extract_toc(body)
  let left = root.article.attr('class', 'content')

  left.header.h1.text(page.title)
  left.append(body)

  match toc {
    case Some(n) -> {
      let right = root.aside.attr('class', 'right')

      right.header.h1.text('Table of contents')
      right.nodes.push(n)
    }
    case _ -> {}
  }
}

fn sidebar_list(
  root: mut html.Element,
  title: String,
  items: ref Array[Item],
  page: ref Page,
) {
  root.header.h1.text(title)
  root.ul.with(fn (ul) {
    items.iter.each(fn (item) {
      let a = ul.li.a

      if item.url == page.url { a.attr('class', 'current') }

      a.attr('href', link_from(page, item.url)).text(item.title)
    })
  })
}

fn sidebar(config: ref Config, root: mut html.Element, page: ref Page) {
  let section = config.menu.items.iter.find(fn (pair) {
    pair.value.iter.any?(fn (item) { item.url == page.url })
  })

  let pair = match section {
    case Some(v) -> v
    case _ -> return
  }
  let left = root.aside.attr('class', 'left')

  sidebar_list(left, pair.key, pair.value, page)
}

fn home_sidebar(config: ref Config, root: mut html.Element, page: ref Page) {
  let left = root.aside.attr('class', 'left')

  config.menu.items.iter.each(fn (pair) {
    sidebar_list(left, pair.key, pair.value, page)
  })
}

fn toggle_menu(query: String, open: String, close: String) -> html.Element {
  let a = html.Element.new('a')

  a.attr('data-toggle-text', close).attr('data-toggle', query).text(open)
  a
}

fn link(href: String, rel: String) -> html.Element {
  let el = html.Element.new('link')

  el.attr('rel', rel).attr('href', href)
  el
}

fn head(config: ref Config, page: ref Page) -> html.Element {
  let head = html.Element.new('head')

  head
    .meta
    .attr(
      'content',
      "default-src 'self'; script-src 'self'; object-src 'none'; style-src 'self'; font-src 'self' data:; base-uri 'none'; form-action 'none';",
    )
    .attr('http-equiv', 'Content-Security-Policy')

  head.meta.attr('charset', 'utf-8')

  head.meta.attr('name', 'viewport').attr(
    'content',
    'width=device-width, initial-scale=1.0',
  )

  head
    .link
    .attr('rel', 'icon')
    .attr('href', link_from(page, '/favicon.ico'))
    .attr('type', 'image/x-icon')

  head.script.attr('src', link_from(page, '/js/main.js')).attr('defer', 'defer')

  head.add(link(link_from(page, '/css/reset.css'), rel: 'stylesheet'))
  head.add(link(link_from(page, '/css/icons.css'), rel: 'stylesheet'))
  head.add(link(link_from(page, '/css/main.css'), rel: 'stylesheet'))
  head.add(link(config.canonical_url(page), rel: 'canonical'))
  head.title.text(page.title)
  head
}

fn header(root: mut html.Element, config: ref Config, page: ref Page) {
  if config.main {
    root.div.attr('id', 'nightly-notice').div.attr('class', 'grid').with(
      fn (d) { d.append(markdown.Document.parse(GIT_NOTICE).get.to_html) },
    )
  }

  root.div.attr('id', 'top-bar').header.attr('class', 'grid').with(fn (h) {
    h.div.attr('class', 'logo').with(fn (logo) {
      logo
        .img
        .attr('src', link_from(page, '/images/logo.png'))
        .attr('height', '24')
        .attr('width', '24')

      logo.span.text(config.title)
    })

    h.div.attr('class', 'expand-menus').with(fn (div) {
      div.add(toggle_menu('#top-bar nav', 'Show menu', 'Hide menu'))
      div.add(toggle_menu('.page aside.left', 'Show chapters', 'Hide chapters'))
    })

    h.nav.ul.with(fn (ul) {
      config.menu.items.iter.each(fn (pair) {
        let item = match pair.value.opt(0) {
          case Some(v) -> v
          case _ -> return
        }

        ul.li.a.attr('href', link_from(page, item.url)).with(fn (a) {
          a.text(pair.key)

          if page.url.starts_with?(item.parent_url) or page.url == item.url {
            a.attr('class', 'current')
          }
        })
      })
    })
  })
}

fn container(
  body: mut html.Element,
  html_class: String,
  func: fn (mut html.Element),
) {
  body.div.attr('class', html_class).div.attr('class', 'grid').with(func)
}

fn pub home(config: ref Config, page: Page) -> html.Document {
  let doc = html.Document.html('en', fn (html) {
    html.add(head(config, page))
    html.body.with(fn (body) {
      header(body, config, page)
      container(body, 'page home', fn (div) {
        home_sidebar(config, div, page)
        content(config, page, div)
      })
    })
  })

  doc
}

fn pub page(config: ref Config, page: Page) -> html.Document {
  let doc = html.Document.html('en', fn (html) {
    html.add(head(config, page))
    html.body.with(fn (body) {
      header(body, config, page)
      container(body, 'page', fn (div) {
        sidebar(config, div, page)
        content(config, page, div)
      })
    })
  })

  doc
}

fn pub missing(config: ref Config, page: Page) -> html.Document {
  html.Document.html('en', fn (html) {
    html.add(head(config, page))
    html.body.with(fn (body) {
      header(body, config, page)
      container(body, 'missing-page', fn (div) {
        div.article.with(fn (article) {
          article.header.with(fn (h) {
            h.img.attr('src', link_from(page, '/images/404.gif')).attr(
              'height',
              '255',
            )

            h.h1.text(page.title)
          })

          article.append(page.to_html(filters(config, page)))
        })
      })
    })
  })
}
