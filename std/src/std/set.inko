# A hash set implemented using a Map.
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.hash (Hash)
import std.iter (Stream)

# A hash set implemented using a Map.
#
# The order of values in this Set are not guaranteed. For values to be stored in
# a `Set` they must implement the `Hash` and `Equal` traits.
type pub inline Set[V: Equal + Hash] {
  # The Map used for storing values.
  #
  # The keys are the values inserted in this `Set`, the values are always set to
  # `true`.
  let @map: Map[V, Bool]

  # Returns a new empty `Set`.
  fn pub static new -> Set[V] {
    Set(Map.new)
  }

  # Returns a `Set` containing the values from `values`.
  #
  # # Examples
  #
  # ```inko
  # import std.set (Set)
  #
  # let set = Set.from_array([10, 20, 30])
  #
  # set.contains?(10) # => true
  # ```
  fn pub static from_array(values: Array[V]) -> Set[V] {
    values.into_iter.reduce(new, fn (set, val) {
      set.insert(val)
      set
    })
  }

  # Inserts a new value into the `Set`.
  #
  # The returned value is `true` if the value was inserted, `false` otherwise.
  #
  # # Examples
  #
  # Inserting a value into a `Set`:
  #
  # ```inko
  # import std.set (Set)
  #
  # let set = Set.new
  #
  # set.insert(10)
  # ```
  fn pub mut insert(value: V) -> Bool {
    @map.set(value, true).none?
  }

  # Removes a value from this `Set`.
  #
  # If the value was removed `true` is returned, otherwise `false` is returned.
  #
  # # Examples
  #
  # Removing an existing value from a `Set`:
  #
  # ```inko
  # import std.set (Set)
  #
  # let set = Set.new
  #
  # set.insert(10)
  # set.remove(10) # => true
  # set.remove(10) # => false
  # ```
  #
  # Removing a non-existing value from a `Set`:
  #
  # ```inko
  # import std.set (Set)
  #
  # let set = Set.new
  #
  # set.remove(10) # => false
  # ```
  fn pub mut remove(value: ref V) -> Bool {
    @map.remove(value).ok?
  }

  # Returns an `Iter` over the values in this `Set`.
  #
  # # Examples
  #
  # Creating an `Iter` for the values:
  #
  # ```inko
  # import std.set (Set)
  #
  # let set = Set.new
  #
  # set.insert(10)
  # set.insert(20)
  #
  # set.iter.next # => 10
  # ```
  fn pub iter -> Stream[ref V] {
    @map.keys
  }

  # Returns the number of values in this `Set`.
  #
  # # Examples
  #
  # Using an empty `Set`:
  #
  # ```inko
  # import std.set (Set)
  #
  # Set.new.size # => 0
  # ```
  #
  # Using a `Set` with one value:
  #
  # ```inko
  # let set = Set.new
  #
  # set.insert('Alice')
  #
  # set.size # => 1
  # ```
  fn pub size -> Int {
    @map.size
  }

  # Returns `true` if this `Set` contains the given value.
  #
  # # Examples
  #
  # ```inko
  # import std.set (Set)
  #
  # let set = Set.new
  #
  # set.contains?(10) # => false
  # set.insert(10)
  # set.contains?(10) # => true
  # ```
  fn pub contains?(value: ref V) -> Bool {
    @map.contains?(value)
  }
}

impl Equal for Set {
  # Returns `true` if `self` and the given `Set` are identical to each
  # other.
  #
  # # Examples
  #
  # Comparing two `Set` instances:
  #
  # ```inko
  # import std.set (Set)
  #
  # let set1 = Set.new
  # let set2 = Set.new
  #
  # set1.insert(10)
  # set2.insert(10)
  #
  # set1 == set2 # => true
  # ```
  fn pub ==(other: ref Set[V]) -> Bool {
    if size != other.size { return false }

    iter.all?(fn (val) { other.contains?(val) })
  }
}

impl Format for Set if V: Format {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('{')

    for (index, value) in iter.with_index {
      if index > 0 { formatter.write(', ') }

      value.fmt(formatter)
    }

    formatter.write('}')
  }
}
