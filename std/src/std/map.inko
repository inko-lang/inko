# A hash map using linear probing and Robin Hood entry stealing.
import std.array (IntoIter)
import std.clone (Clone)
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.hash (Hash, Hasher)
import std.hash.siphash (SipHasher13)
import std.iter (Stream)
import std.string (ToString)

fn resize_threshold(size: Int) -> Int {
  # This produces a threshold of 90%, without the need to allocate floats.
  9 * size / 10
}

# A value that signals an index isn't used.
let EMPTY = -1
let DEFAULT_CAPACITY = 4

# An entry stored in a Map.
type pub Entry[K: Equal + Hash, V] {
  # The key that was hashed.
  let @key: K

  # The value of the key.
  let pub mut @value: V

  # The hash value of the key.
  let mut @hash: Int

  # The distance of this entry relative to its desired index.
  let mut @distance: Int

  # Returns an immutable reference to the key.
  #
  # Keys can never be mutated in place, as this can result in map lookups
  # returning unexpected results.
  fn pub key -> ref K {
    @key
  }

  fn hash -> Int {
    @hash
  }

  fn mut replace_value(new: V) -> V {
    @value := new
  }

  fn move into_value -> V {
    @value
  }
}

impl Clone for Entry if K: Clone, V: Clone {
  fn pub clone -> Entry[move K, move V] {
    Entry(
      key: @key.clone,
      value: @value.clone,
      hash: @hash,
      distance: @distance,
    )
  }
}

# An error that signals the lack of a key in a `Map`.
type pub inline MissingKey[K: Equal] {
  # The key that is missing.
  let pub @key: ref K

  # Returns a new `MissingKey` to signal that the key in `key` is missing.
  fn pub static new(key: ref K) -> Self {
    Self(key)
  }
}

impl ToString for MissingKey {
  fn pub to_string -> String {
    # The keys in a Map can be arbitrary types, and often are complex objects
    # that may not implement ToString (or do so in a way that isn't human
    # readable). As such we only provide a basic message such that e.g.
    # `Result.or_panic` is still available.
    'the key is missing'
  }
}

impl Format for MissingKey if K: Format {
  fn pub fmt(formatter: mut Formatter) {
    let obj = formatter.object('MissingKey')

    obj.field('key', @key)
    obj.finish
  }
}

impl Equal for MissingKey {
  fn pub ==(other: ref Self) -> Bool {
    @key == other.key
  }
}

# A hash map using linear probing and Robin Hood hashing.
#
# A `Map` preserves the order in which values are inserted, even when entries
# are removed.
#
# # Performance
#
# Preserving the insertion order makes it easier to use a `Map` (e.g. when
# writing tests or when serialising it), but comes with the trade-off that
# removals are more expensive. Our implementation simply shifts values when
# removing them. This makes removals more expensive compared to traditional maps
# (`O(n)` in the worst case, with `n` being the number of entries), but removes
# the need for using tombstones and extra indirection.
#
# If you find yourself in a situation where you need to remove many entries from
# a `Map`, it may be faster to construct a new `Map` that only contains the
# key/value pairs you are interested in.
#
# # Algorithm
#
# `Map` uses Robin Hood hashing, with the necessary changes to make this work
# while preserving insertion order. For more information on these algorithms you
# can refer to the following resources:
#
# - <http://codecapsule.com/2013/11/11/robin-hood-hashing/>
# - <http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/>
# - <https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/>
type pub Map[K: Equal + Hash, V] {
  # The slots we can hash into.
  #
  # An index of `-1` indicates the slot isn't used. A value of `0` or more
  # indicates the entry is at that given index in the `@entries` `Array`.
  #
  # The size of this Array is always a power of two.
  let mut @slots: Array[Int]

  # The entries stored in this map.
  let @entries: Array[Entry[K, V]]

  # The number of values to store before a resize is necessary.
  let mut @resize_at: Int

  # Returns a new empty `Map`.
  fn pub static new -> Map[K, V] {
    with_capacity(DEFAULT_CAPACITY)
  }

  # Returns a new `Map` with space for at least the given number of values.
  #
  # The actual size may be larger.
  #
  # # Examples
  #
  # ```inko
  # let map = Map.with_capacity(32)
  #
  # map.set('name', 'Alice')
  # ```
  fn pub static with_capacity(amount: Int) -> Map[K, V] {
    let size = if amount <= 0 {
      DEFAULT_CAPACITY
    } else {
      amount.nearest_power_of_two
    }
    let slots = Array.filled(with: EMPTY, times: size)
    let resize_at = resize_threshold(size)

    Map(slots: slots, entries: [], resize_at: resize_at)
  }

  # Removes the given key, returning its value.
  #
  # If the key is missing, a `MissingKey` error is returned.
  #
  # # Examples
  #
  # Removing a non-existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.remove('name') # => Result.Error(MissingKey(...))
  # ```
  #
  # Removing an existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  # map.remove('name') # => Result.Ok('Alice')
  # ```
  fn pub mut remove(key: ref K) -> Result[V, MissingKey[K]] {
    let mut slot = slot_index(hash_key(key))
    let mut dist = 0
    let mut index = @slots.get(slot).or_panic

    # For the removal we need both the slot and the entry index, so we have to
    # duplicate the logic of `entries_index()` here, as this is the only place
    # we need both.
    loop {
      if index == EMPTY { throw MissingKey.new(key) }

      let entry = @entries.get(index).or_panic

      if dist > entry.distance { throw MissingKey.new(key) }

      if entry.key == key { break }

      slot = slot_index(slot + 1)
      index = @slots.get(slot).or_panic
      dist += 1
    }

    let value = @entries.remove_at(index).or_panic.into_value

    @slots.set(slot, EMPTY)

    # Because we shifted the entries to the left, any slots pointing to entries
    # _after_ the removed value have to be updated accordingly.
    for (slot, entry) in @slots.iter.with_index {
      if entry > index { @slots.set(slot, entry - 1) }
    }

    let mut prev_slot = slot

    slot = slot_index(slot + 1)

    loop {
      let mut index = @slots.get(slot).or_panic

      if index == EMPTY { break }

      let entry = @entries.get_mut(index).or_panic

      if entry.distance > 0 {
        @slots.set(slot, EMPTY)
        @slots.set(prev_slot, index)
        entry.distance -= 1
      } else {
        break
      }

      prev_slot = slot
      slot = slot_index(slot + 1)
    }

    Result.Ok(value)
  }

  # Returns an iterator of immutable key-value pairs.
  #
  # # Examples
  #
  # Iterating over all the key-value pairs:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for entry in map.iter {
  #   entry.key   # => 'name'
  #   entry.value # => 'Alice'
  # }
  # ```
  fn pub iter -> Stream[ref Entry[K, V]] {
    @entries.iter
  }

  # Returns an iterator of mutable key-value pairs.
  #
  # # Examples
  #
  # Iterating over all the key-value pairs:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for entry in map.iter_mut {
  #   entry.key   # => 'name'
  #   entry.value # => 'Alice'
  # }
  # ```
  fn pub mut iter_mut -> Stream[mut Entry[K, V]] {
    @entries.iter_mut
  }

  # Returns an `Iter` that iterates over all key-value pairs in this
  # `Map`, yielding them by value.
  #
  # # Examples
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for entry in map.into_iter {
  #   entry.key   # => 'name'
  #   entry.value # => 'Alice'
  # }
  # ```
  fn pub move into_iter -> IntoIter[Entry[K, V]] {
    @entries.into_iter
  }

  # Returns an `Iter` visiting all the keys in this `Map`.
  #
  # # Examples
  #
  # Iterating over the keys in a `Map`:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for key in map.keys {
  #   key # => 'name'
  # }
  # ```
  fn pub keys -> Stream[ref K] {
    iter.map(fn (e) { e.key })
  }

  # Returns an iterator that yields immutable references to the values in
  # `self`.
  #
  # # Examples
  #
  # Iterating over the values in a `Map`:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for value in map.values {
  #   value # => 'Alice'
  # }
  # ```
  fn pub values -> Stream[ref V] {
    iter.map(fn (e) { e.value })
  }

  # Returns an immutable borrow of the key's value.
  #
  # If the key is missing, a `MissingKey` error is returned.
  #
  # # Examples
  #
  # Getting the value of a missing key:
  #
  # ```inko
  # let map = Map.new
  #
  # map.get('name') # => Result.Error(MissingKey(...))
  # ```
  #
  # Getting the value of an existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  # map.get('name') # => Result.Ok('Alice')
  # ```
  fn pub get(key: ref K) -> Result[ref V, MissingKey[K]] {
    match entries_index(key) {
      case EMPTY -> Result.Error(MissingKey.new(key))
      case index -> Result.Ok(@entries.get(index).or_panic.value)
    }
  }

  # Inserts the key and value in this `Map`, returning the previous value if
  # there is any.
  #
  # # Examples
  #
  # Inserting a new key-value pair:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice') # => Option.Some('Alice')
  # ```
  fn pub mut set(key: K, value: V) -> Option[V] {
    if size >= @resize_at { resize }

    let hash = hash_key(key)
    let entry = Entry(key: key, value: value, hash: hash, distance: 0)

    insert_entry(entry)
  }

  # Merges two `Map` objects together.
  #
  # # Examples
  #
  # ```inko
  # let map1 = Map.new
  # let map2 = Map.new
  #
  # map1.set('name', 'Alice')
  # map2.set('city', 'Amsterdam')
  #
  # map1.merge(map2)
  #
  # map1['name'] # => 'Alice'
  # map2['city'] # => 'Amsterdam'
  # ```
  fn pub mut merge(other: Map[K, V]) {
    for entry in other {
      entry.distance = 0
      entry.hash = hash_key(entry.key)
      insert_entry(entry)
    }
  }

  # Returns the number of key-value pairs in this map.
  #
  # # Examples
  #
  # Using an empty map:
  #
  # ```inko
  # let map = Map.new
  #
  # map.size # => 0
  # ```
  #
  # Using a map with one key-value pair:
  #
  # ```inko
  # let map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # map.size # => 1
  # ```
  fn pub size -> Int {
    @entries.size
  }

  # Returns the number of entries this map can store before needing a resize.
  #
  # # Examples
  #
  # ```inko
  # Map.new.capacity              # => 4
  # Map.with_capacity(8).capacity # => 8
  # ```
  fn pub capacity -> Int {
    @slots.size
  }

  # Returns the `Entry` for the given key.
  #
  # If the key is missing, a `MissingKey` error is returned.
  #
  # # Examples
  #
  # ```inko
  # let map = Map.new
  #
  # map.set('name', 'Alice')
  # map.entry('name').or_panic.value = 'Bob'
  # map.get('name') # => Result.Ok('Bob')
  # ```
  fn pub mut entry(key: ref K) -> Result[mut Entry[K, V], MissingKey[K]] {
    match entries_index(key) {
      case EMPTY -> Result.Error(MissingKey.new(key))
      case index -> Result.Ok(@entries.get_mut(index).or_panic)
    }
  }

  # Returns `true` if `self` contains the key `key`.
  #
  # # Examples
  #
  # ```inko
  # let map = Map.new
  #
  # map.set('name', 'Alice')
  # map.contains?('name') # => true
  # map.contains?('city') # => false
  # ```
  fn pub contains?(value: ref K) -> Bool {
    entries_index(value) > EMPTY
  }

  fn mut resize {
    let new_size = @slots.size * 2

    @resize_at = resize_threshold(new_size)
    @slots = Array.filled(with: EMPTY, times: new_size)

    for entry in @entries.iter_mut { entry.distance = 0 }

    for (rehash_index, rehash) in @entries.iter_mut.with_index {
      let mut slot = slot_index(rehash.hash)

      loop {
        let index = @slots.get(slot).or_panic

        if index == EMPTY {
          @slots.set(slot, rehash_index)
          break
        }

        let entry = @entries.get(index).or_panic

        if entry.distance < rehash.distance {
          @slots.set(slot, rehash_index)
          shift_stolen_slots(slot, index)
          break
        }

        slot = slot_index(slot + 1)
        rehash.distance += 1
      }
    }
  }

  fn mut insert_entry(insert: Entry[K, V]) -> Option[V] {
    let mut slot = slot_index(insert.hash)

    loop {
      let index = @slots.get(slot).or_panic

      if index == EMPTY {
        @slots.set(slot, @entries.size)

        @entries.push(insert)
        return Option.None
      }

      let entry = @entries.get_mut(index).or_panic

      if entry.key == insert.key {
        return Option.Some(entry.replace_value(insert.into_value))
      }

      if entry.distance < insert.distance {
        @slots.set(slot, @entries.size)

        @entries.push(insert)
        shift_stolen_slots(slot, index)
        return Option.None
      }

      slot = slot_index(slot + 1)
      insert.distance += 1
    }
  }

  # Shifts an entry who's slot has been stolen to the right of the `@slots`
  # array.
  #
  # This method implements the stealing part of Robin Hood hashing.
  #
  # In a vanilla Robin Hood implementation this can mostly reuse the regular
  # insertion loop. Due to us preserving the insertion order this is a bit more
  # tricky, as we have to move `@slots` values around, instead of the actual
  # entries. In addition, comparing keys when moving stolen values around is
  # redundant, as we'd never update any entries (due to all keys being unique).
  # For these reasons we implement this in a separate method, specialised to
  # only handle what's actually needed when moving slot values around.
  fn mut shift_stolen_slots(start_slot: Int, start_index: Int) {
    # We are given the `@slots` index of the slot we stole, so we should start
    # at the next one.
    let mut slot = slot_index(start_slot + 1)
    let mut stolen_index = start_index
    let mut stolen = @entries.get_mut(stolen_index).or_panic

    loop {
      stolen.distance += 1

      let index = @slots.get(slot).or_panic

      if index == EMPTY {
        @slots.set(slot, stolen_index)

        return
      }

      let entry = @entries.get_mut(index).or_panic

      if entry.distance < stolen.distance {
        @slots.set(slot, stolen_index)
        stolen_index = index
        stolen = entry
      }

      slot = slot_index(slot + 1)
    }
  }

  fn entries_index(key: ref K) -> Int {
    let mut slot = slot_index(hash_key(key))
    let mut dist = 0

    loop {
      let index = @slots.get(slot).or_panic

      if index == EMPTY { return EMPTY }

      let entry = @entries.get(index).or_panic

      if dist > entry.distance { return EMPTY }

      if entry.key == key { return index }

      slot = slot_index(slot + 1)
      dist += 1
    }
  }

  fn hash_key(key: ref K) -> Int {
    let hasher = SipHasher13.default

    key.hash(mut hasher)
    hasher.finish
  }

  fn slot_index(hash: Int) -> Int {
    # Since the @slots Array is always a power of two, we can use & instead of
    # %, which is a bit faster.
    hash & (@slots.size - 1)
  }
}

impl Map if V: mut {
  # Returns a mutable borrow of the key's value.
  #
  # If the key is missing, a `MissingKey` error is returned.
  #
  # # Examples
  #
  # Getting the value of a missing key:
  #
  # ```inko
  # let map = Map.new
  #
  # map.get_mut('example') # => Result.Error(MissingKey(...))
  # ```
  #
  # Getting the value of an existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('example', (10, 20))
  # map.get_mut('example') # => Result.Ok(mut (10, 20))
  # ```
  fn pub mut get_mut(key: ref K) -> Result[mut V, MissingKey[K]] {
    match entries_index(key) {
      case EMPTY -> Result.Error(MissingKey.new(key))
      case index -> Result.Ok(@entries.get_mut(index).or_panic.value)
    }
  }

  # Returns an iterator that yields mutable references to the values in `self`.
  #
  # # Examples
  #
  # Iterating over the values in a `Map`:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for value in map.values_mut {
  #   value # => 'Alice'
  # }
  # ```
  fn pub mut values_mut -> Stream[mut V] {
    iter_mut.map(fn (e) { e.value })
  }
}

impl Equal for Map if V: Equal {
  # Returns `true` if `self` and the given `Map` are identical to each
  # other.
  #
  # # Examples
  #
  # Comparing two `Map` instances:
  #
  # ```inko
  # let map1 = Map.new
  # let map2 = Map.new
  #
  # map1.set('name', 'Alice')
  # map2.set('name', 'Alice')
  #
  # map1 == map2 # => true
  # ```
  fn pub ==(other: ref Map[K, V]) -> Bool {
    if size != other.size { return false }

    iter.all?(fn (ours) {
      match other.entries_index(ours.key) {
        case EMPTY -> false
        case index -> other.entries.get(index).or_panic.value == ours.value
      }
    })
  }
}

impl Hash for Map if K: Hash, V: Hash {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    for entry in iter {
      entry.key.hash(hasher)
      entry.value.hash(hasher)
    }
  }
}

impl Format for Map if K: Format, V: Format {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('{')

    for (index, entry) in iter.with_index {
      if index > 0 { formatter.write(', ') }

      entry.key.fmt(formatter)
      formatter.write(': ')
      entry.value.fmt(formatter)
    }

    formatter.write('}')
  }
}

impl Clone for Map if K: Clone, V: Clone {
  fn pub clone -> Map[K, V] {
    Map(slots: @slots.clone, entries: @entries.clone, resize_at: @resize_at)
  }
}
