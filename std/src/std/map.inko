# A hash map using linear probing and Robin Hood entry stealing.
import std.clone (Clone)
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.hash (Hash, Hasher)
import std.hash.siphash (SipHasher13)
import std.iter (Stream)
import std.string (ToString)

fn invalid_capacity(size: Int) -> Never {
  panic('the capacity (${size}) must be greater than zero')
}

fn map_too_large -> Never {
  panic('the maximum number of slots in a Map is ${MAX_SIZE}')
}

fn resize_threshold(size: Int) -> Int {
  # This produces a threshold of 90%, without the need to allocate floats.
  9 * size / 10
}

# A value that signals an index isn't used.
let EMPTY = -1
let DEFAULT_CAPACITY = 4

# The maximum number of values allowed in a Map.
let MAX_SIZE = 2_147_483_648

# The index of a key-value pair and its distance from its ideal index.
#
# This type uses `Int32` for the entry index and distance in order to reduce the
# amount of space required (8 bytes per `Slot` instead of 16), given that it's
# basically impossible to create a `Map` with 2^64 key-value pairs to begin
# with.
type copy Slot {
  # The index of the Entry of this slot.
  #
  # An index of `-1` indicates the slot isn't used.
  let @entry: Int32

  # The distance of the entry relative to its most ideal location.
  #
  # This value is stored separately from an `Entry` because:
  #
  # 1. It allows us to update it without having to touch any `Entry` values
  # 2. It makes it possible for `Entry` to be an `inline` type as we don't need
  #    to mutate it during e.g. rehashing. A `Slot` in turn is a `copy` type
  #    that we can trivially "update" by replacing it with a new `Slot`
  let @distance: Int32

  fn inline static empty -> Self {
    new(EMPTY, distance: 0)
  }

  fn inline static new(entry: Int, distance: Int) -> Self {
    Self(entry: entry as Int32, distance: distance as Int32)
  }

  fn inline entry -> Int {
    @entry as Int
  }

  fn inline distance -> Int {
    @distance as Int
  }

  fn inline empty? -> Bool {
    entry == EMPTY
  }

  fn inline reduce_entry -> Self {
    let entry = match entry {
      case EMPTY -> EMPTY
      case n -> n - 1
    }

    Slot.new(entry, distance)
  }

  fn inline increase_distance -> Self {
    Slot.new(entry, distance + 1)
  }

  fn inline reduce_distance -> Self {
    Slot.new(entry, distance - 1)
  }
}

impl Clone for Slot {
  fn pub inline clone -> Slot {
    self
  }
}

# A key-value pair and its hash code.
type inline Entry[K: Equal + Hash, V] {
  # The hash of the key.
  let @hash: Int

  # The key that was hashed.
  let @key: K

  # The value of the key.
  let @value: V

  fn inline move into_value -> V {
    @value
  }
}

impl Clone for Entry if K: Clone, V: Clone {
  fn pub clone -> Entry[move K, move V] {
    Self(key: @key.clone, value: @value.clone, hash: @hash)
  }
}

# An error that signals the lack of a key in a `Map`.
type pub inline MissingKey[K: Equal] {
  # The key that is missing.
  let pub @key: ref K

  # Returns a new `MissingKey` to signal that the key in `key` is missing.
  fn pub static new(key: ref K) -> Self {
    Self(key)
  }
}

impl ToString for MissingKey {
  fn pub to_string -> String {
    # The keys in a Map can be arbitrary types, and often are complex objects
    # that may not implement ToString (or do so in a way that isn't human
    # readable). As such we only provide a basic message such that e.g.
    # `Result.or_panic` is still available.
    'the key is missing'
  }
}

impl Format for MissingKey if K: Format {
  fn pub fmt(formatter: mut Formatter) {
    let obj = formatter.object('MissingKey')

    obj.field('key', @key)
    obj.finish
  }
}

impl Equal for MissingKey {
  fn pub ==(other: ref Self) -> Bool {
    @key == other.key
  }
}

# A hash map using linear probing and Robin Hood hashing.
#
# A `Map` preserves the order in which values are inserted, even when entries
# are removed.
#
# # Performance
#
# Preserving the insertion order makes it easier to use a `Map` (e.g. when
# writing tests or when serialising it), but comes with the trade-off that
# removals are more expensive. Our implementation simply shifts values when
# removing them. This makes removals more expensive compared to traditional maps
# (`O(n)` in the worst case, with `n` being the number of entries), but removes
# the need for using tombstones and extra indirection.
#
# If you find yourself in a situation where you need to remove many entries from
# a `Map`, it may be faster to construct a new `Map` that only contains the
# key/value pairs you are interested in.
#
# # Size limitations
#
# The maximum number of slots a `Map` can store is 2 147 483 648, which
# corresponds to a maximum of 1 932 735 283 key-value pairs (due to the load
# factor being 90%). When resizing a `Map` beyond this limit, a panic is
# produced.
#
# This limit shouldn't pose a problem for real-world scenarios, as most systems
# won't have enough memory available to create such a `Map` in the first place.
# In addition, a `Map` with so many values is likely the result of a bug or
# better served by a more memory efficient data structure in the first place.
#
# The reason for this limit is that `Map` uses signed 32-bits indexes internally
# to conserve memory, with the limit being enforced during a resize.
#
# # Algorithm
#
# `Map` uses Robin Hood hashing, with the necessary changes to make this work
# while preserving insertion order. For more information on these algorithms you
# can refer to the following resources:
#
# - <http://codecapsule.com/2013/11/11/robin-hood-hashing/>
# - <http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/>
# - <https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/>
type pub Map[K: Equal + Hash, V] {
  # An Array tracking the indexes into the entries list and the distance of each
  # entry relative to its desired index.
  #
  # The size of this Array is always a power of two.
  let mut @slots: Array[Slot]

  # The entries stored in this map, in insertion order.
  let @entries: Array[Entry[K, V]]

  # The number of values to store before a resize is necessary.
  let mut @resize_at: Int

  # Returns a new empty `Map`.
  fn pub static new -> Map[K, V] {
    with_capacity(DEFAULT_CAPACITY)
  }

  # Returns a new `Map` with space for at least `amount` values before resizing
  # the `Map` is necessary.
  #
  # The actual capacity may be greater due to the load factor of a `Map`, but it
  # will never be less than `amount`.
  #
  # # Panics
  #
  # This method panics if `amount` is less than or equal to zero.
  #
  # # Examples
  #
  # ```inko
  # let map = Map.with_capacity(32)
  #
  # map.capacity # => 57
  # map.set('name', 'Alice')
  # ```
  fn pub static with_capacity(amount: Int) -> Map[K, V] {
    if amount <= 0 { invalid_capacity(amount) }

    let mut size = amount.nearest_power_of_two
    let mut resize_at = resize_threshold(size)

    # If the amount is greater than the resize threshold we'd still need a
    # resize, so in this case we double the capacity (due to it always being a
    # power of two).
    if resize_at < amount {
      size = (size * 2).nearest_power_of_two
      resize_at = resize_threshold(size)
    }

    if size > MAX_SIZE { map_too_large }

    let slots = Array.filled(with: Slot.empty, times: size)
    let entries = Array.with_capacity(amount)

    Map(slots: slots, entries: entries, resize_at: resize_at)
  }

  # Removes the given key, returning its value.
  #
  # If the key is missing, a `MissingKey` error is returned.
  #
  # # Examples
  #
  # Removing a non-existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.remove('name') # => Result.Error(MissingKey(...))
  # ```
  #
  # Removing an existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  # map.remove('name') # => Result.Ok('Alice')
  # ```
  fn pub mut remove(key: ref K) -> Result[V, MissingKey[K]] {
    let mut slot_idx = index_for(hash_key(key))
    let mut dist = 0
    let mut slot = @slots.get(slot_idx).or_panic

    loop {
      if slot.empty? or dist > slot.distance { throw MissingKey.new(key) }

      if @entries.get(slot.entry).or_panic.key == key { break }

      slot_idx = index_for(slot_idx + 1)
      slot = @slots.get(slot_idx).or_panic
      dist += 1
    }

    let value = @entries.remove_at(slot.entry).or_panic.into_value

    @slots.set(slot_idx, Slot.empty)

    # Because we shifted the entries to the left, any slots pointing to entries
    # _after_ the removed value have to be updated accordingly.
    #
    # We have to iterate over _all_ the slots because any slot can point to an
    # entry after the one that was removed.
    let mut shift_idx = 0

    while shift_idx < @slots.size {
      let shift = @slots.get(shift_idx).or_panic

      if shift.entry > slot.entry { @slots.set(shift_idx, shift.reduce_entry) }

      shift_idx += 1
    }

    let mut prev_slot = slot_idx

    slot_idx = index_for(slot_idx + 1)

    # Removing an entry means we migh be able to shift slots that were pushed to
    # the right (= its distance is increased) due to a collision.
    loop {
      let slot = @slots.get(slot_idx).or_panic

      if slot.empty? or slot.distance == 0 { break }

      @slots.set(slot_idx, Slot.empty)
      @slots.set(prev_slot, slot.reduce_distance)
      prev_slot = slot_idx
      slot_idx = index_for(slot_idx + 1)
    }

    Result.Ok(value)
  }

  # Returns an iterator of immutable key-value pairs.
  #
  # # Examples
  #
  # Iterating over all the key-value pairs:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for entry in map.iter {
  #   entry.key   # => 'name'
  #   entry.value # => 'Alice'
  # }
  # ```
  fn pub iter -> Stream[(ref K, ref V)] {
    let mut idx = 0

    Stream(fn move {
      match @entries.get(idx) {
        case Ok(e) -> {
          idx += 1
          Option.Some((e.key, e.value))
        }
        case _ -> Option.None
      }
    })
  }

  # Returns an `Iter` that iterates over all key-value pairs in this
  # `Map`, yielding them by value.
  #
  # # Examples
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for entry in map.into_iter {
  #   entry.key   # => 'name'
  #   entry.value # => 'Alice'
  # }
  # ```
  fn pub move into_iter -> Stream[(K, V)] {
    let iter = @entries.into_iter

    Stream(fn move {
      match iter.next {
        case Some({ @key = k, @value = v }) -> Option.Some((k, v))
        case _ -> Option.None
      }
    })
  }

  # Returns an `Iter` visiting all the keys in this `Map`.
  #
  # # Examples
  #
  # Iterating over the keys in a `Map`:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for key in map.keys {
  #   key # => 'name'
  # }
  # ```
  fn pub keys -> Stream[ref K] {
    let mut idx = 0

    Stream(fn move {
      match @entries.get(idx) {
        case Ok(e) -> {
          idx += 1
          Option.Some(e.key)
        }
        case _ -> Option.None
      }
    })
  }

  # Returns an iterator that yields immutable references to the values in
  # `self`.
  #
  # # Examples
  #
  # Iterating over the values in a `Map`:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for value in map.values {
  #   value # => 'Alice'
  # }
  # ```
  fn pub values -> Stream[ref V] {
    let mut idx = 0

    Stream(fn move {
      match @entries.get(idx) {
        case Ok(e) -> {
          idx += 1
          Option.Some(e.value)
        }
        case _ -> Option.None
      }
    })
  }

  # Returns an immutable borrow of the key's value.
  #
  # If the key is missing, a `MissingKey` error is returned.
  #
  # # Examples
  #
  # Getting the value of a missing key:
  #
  # ```inko
  # let map = Map.new
  #
  # map.get('name') # => Result.Error(MissingKey(...))
  # ```
  #
  # Getting the value of an existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  # map.get('name') # => Result.Ok('Alice')
  # ```
  fn pub get(key: ref K) -> Result[ref V, MissingKey[K]] {
    match entries_index(key) {
      case EMPTY -> Result.Error(MissingKey.new(key))
      case index -> Result.Ok(@entries.get(index).or_panic.value)
    }
  }

  # Inserts the key and value in this `Map`, returning the previous value if
  # there is any.
  #
  # # Examples
  #
  # Inserting a new key-value pair:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice') # => Option.Some('Alice')
  # ```
  fn pub mut set(key: K, value: V) -> Option[V] {
    if size >= @resize_at { resize }

    let hash = hash_key(key)
    let entry = Entry(key: key, value: value, hash: hash)

    insert_entry(entry)
  }

  # Merges two `Map` objects together.
  #
  # # Examples
  #
  # ```inko
  # let map1 = Map.new
  # let map2 = Map.new
  #
  # map1.set('name', 'Alice')
  # map2.set('city', 'Amsterdam')
  #
  # map1.merge(map2)
  #
  # map1['name'] # => 'Alice'
  # map2['city'] # => 'Amsterdam'
  # ```
  fn pub mut merge(other: Map[K, V]) {
    for (k, v) in other { set(k, v) }
  }

  # Returns the number of key-value pairs in this map.
  #
  # # Examples
  #
  # Using an empty map:
  #
  # ```inko
  # let map = Map.new
  #
  # map.size # => 0
  # ```
  #
  # Using a map with one key-value pair:
  #
  # ```inko
  # let map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # map.size # => 1
  # ```
  fn pub size -> Int {
    @entries.size
  }

  # Returns the number of key-value pairs `self` can store before a resize is
  # required.
  #
  # # Examples
  #
  # ```inko
  # Map.new.capacity              # => 7
  # Map.with_capacity(8).capacity # => 14
  # ```
  fn pub capacity -> Int {
    @resize_at
  }

  # Returns `true` if `self` contains the key `key`.
  #
  # # Examples
  #
  # ```inko
  # let map = Map.new
  #
  # map.set('name', 'Alice')
  # map.contains?('name') # => true
  # map.contains?('city') # => false
  # ```
  fn pub contains?(value: ref K) -> Bool {
    entries_index(value) > EMPTY
  }

  # Removes all values in `self`.
  #
  # # Examples
  #
  # ```inko
  # let map = Map.new
  #
  # map.set('name', 'Alice')
  # map.set('age', '42')
  # map.clear
  # map.size # => 0
  # ```
  fn pub mut clear {
    @slots = Array.filled(with: Slot.empty, times: @slots.size)
    @entries.clear
  }

  fn mut resize {
    let new_size = @slots.size * 2

    # It's _highly_ unlikely we'll ever trigger this panic, but it's in place
    # such that we don't produce undefined behavior when resizing a Map beyond
    # this limit.
    if new_size > MAX_SIZE { map_too_large }

    @resize_at = resize_threshold(new_size)
    @slots = Array.filled(with: Slot.empty, times: new_size)

    for (entry_idx, entry) in @entries.iter_mut.with_index {
      let mut idx = index_for(entry.hash)
      let mut dist = 0

      loop {
        let slot = @slots.get(idx).or_panic

        if slot.empty? {
          @slots.set(idx, Slot.new(entry_idx, dist))
          break
        }

        if slot.distance < dist {
          @slots.set(idx, Slot.new(entry_idx, dist))
          shift_stolen_slots(idx, slot)
          break
        }

        idx = index_for(idx + 1)
        dist += 1
      }
    }
  }

  fn mut insert_entry(insert: Entry[K, V]) -> Option[V] {
    let mut idx = index_for(insert.hash)
    let mut dist = 0

    loop {
      let slot = @slots.get(idx).or_panic

      if slot.empty? {
        @slots.set(idx, Slot.new(@entries.size, dist))
        @entries.push(insert)
        return Option.None
      }

      if @entries.get(slot.entry).or_panic.key == insert.key {
        return Option.Some(@entries.swap(slot.entry, insert).into_value)
      }

      if slot.distance < dist {
        @slots.set(idx, Slot.new(@entries.size, dist))
        @entries.push(insert)
        shift_stolen_slots(idx, slot)
        return Option.None
      }

      idx = index_for(idx + 1)
      dist += 1
    }
  }

  # This method implements the stealing part of Robin Hood hashing.
  #
  # In a vanilla Robin Hood implementation this can mostly reuse the regular
  # insertion loop. Due to us preserving the insertion order this is a bit more
  # tricky, as we have to move `@slots` values around, instead of the actual
  # entries. In addition, comparing keys when moving stolen values around is
  # redundant, as we'd never update any entries (due to all keys being unique).
  # For these reasons we implement this in a separate method, specialised to
  # only handle what's actually needed when moving slot values around.
  fn mut shift_stolen_slots(stolen_index: Int, stolen: Slot) {
    let mut idx = index_for(stolen_index + 1)
    let mut stolen = stolen

    loop {
      stolen = stolen.increase_distance

      let slot = @slots.get(idx).or_panic

      if slot.empty? {
        @slots.set(idx, stolen)
        return
      }

      if slot.distance < stolen.distance {
        @slots.set(idx, stolen)
        stolen = slot
      }

      idx = index_for(idx + 1)
    }
  }

  fn entries_index(key: ref K) -> Int {
    let mut idx = index_for(hash_key(key))
    let mut dist = 0

    loop {
      let slot = @slots.get(idx).or_panic

      if slot.empty? or dist > slot.distance { return EMPTY }

      let entry = @entries.get(slot.entry).or_panic

      if entry.key == key { return slot.entry }

      idx = index_for(idx + 1)
      dist += 1
    }
  }

  fn hash_key(key: ref K) -> Int {
    let hasher = SipHasher13.default

    key.hash(mut hasher)
    hasher.finish
  }

  fn index_for(hash: Int) -> Int {
    # Since the @slots Array is always a power of two, we can use & instead of
    # %, which is a bit faster.
    hash & (@slots.size - 1)
  }
}

impl Map if V: mut {
  # Returns a mutable borrow of the key's value.
  #
  # If the key is missing, a `MissingKey` error is returned.
  #
  # # Examples
  #
  # Getting the value of a missing key:
  #
  # ```inko
  # let map = Map.new
  #
  # map.get_mut('example') # => Result.Error(MissingKey(...))
  # ```
  #
  # Getting the value of an existing key:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('example', (10, 20))
  # map.get_mut('example') # => Result.Ok(mut (10, 20))
  # ```
  fn pub mut get_mut(key: ref K) -> Result[mut V, MissingKey[K]] {
    match entries_index(key) {
      case EMPTY -> Result.Error(MissingKey.new(key))
      case index -> Result.Ok(@entries.get_mut(index).or_panic.value)
    }
  }

  # Returns an iterator that yields mutable references to the values in `self`.
  #
  # # Examples
  #
  # Iterating over the values in a `Map`:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for value in map.values_mut {
  #   value # => 'Alice'
  # }
  # ```
  fn pub mut values_mut -> Stream[mut V] {
    let mut idx = 0

    Stream(fn move {
      match @entries.get_mut(idx) {
        case Ok(e) -> {
          idx += 1
          Option.Some(e.value)
        }
        case _ -> Option.None
      }
    })
  }

  # Returns an iterator of mutable key-value pairs.
  #
  # # Examples
  #
  # Iterating over all the key-value pairs:
  #
  # ```inko
  # let mut map = Map.new
  #
  # map.set('name', 'Alice')
  #
  # for entry in map.iter_mut {
  #   entry.key   # => 'name'
  #   entry.value # => 'Alice'
  # }
  # ```
  fn pub mut iter_mut -> Stream[(ref K, mut V)] {
    let mut idx = 0

    Stream(fn move {
      match @entries.get_mut(idx) {
        case Ok(e) -> {
          idx += 1
          Option.Some((e.key, e.value))
        }
        case _ -> Option.None
      }
    })
  }
}

impl Equal for Map if V: Equal {
  # Returns `true` if `self` and the given `Map` are identical to each
  # other.
  #
  # # Examples
  #
  # Comparing two `Map` instances:
  #
  # ```inko
  # let map1 = Map.new
  # let map2 = Map.new
  #
  # map1.set('name', 'Alice')
  # map2.set('name', 'Alice')
  #
  # map1 == map2 # => true
  # ```
  fn pub ==(other: ref Map[K, V]) -> Bool {
    if size != other.size { return false }

    for (k, v) in iter {
      match other.entries_index(k) {
        case EMPTY -> return false
        case idx if other.entries.get(idx).or_panic.value != v -> return false
        case _ -> {}
      }
    }

    true
  }
}

impl Hash for Map if K: Hash, V: Hash {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    for (k, v) in iter {
      k.hash(hasher)
      v.hash(hasher)
    }
  }
}

impl Format for Map if K: Format, V: Format {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('{')

    for (index, (k, v)) in iter.with_index {
      if index > 0 { formatter.write(', ') }

      k.fmt(formatter)
      formatter.write(': ')
      v.fmt(formatter)
    }

    formatter.write('}')
  }
}

impl Clone for Map if K: Clone, V: Clone {
  fn pub clone -> Map[K, V] {
    Map(slots: @slots.clone, entries: @entries.clone, resize_at: @resize_at)
  }
}
