# The Int type.
import std.bytes (Bytes)
import std.clone (Clone)
import std.cmp (Compare, Equal, Ordering)
import std.float (ToFloat)
import std.fmt (Format as FormatTrait, Formatter)
import std.hash (Hash, Hasher)
import std.int.debug (self as mode) if debug
import std.int.release (self as mode) if release
import std.iter (Iter)
import std.ops (
  Add, BitAnd, BitOr, BitXor, Divide, Modulo, Multiply, Power, ShiftLeft,
  ShiftRight, Subtract, UnsignedShiftRight,
)
import std.range (ExclusiveRange, InclusiveRange)
import std.string (ToString)

fn extern inko_int_checked_pow(left: Int, right: Int) -> CheckedIntResult

# A type that can be converted to a Int.
trait pub ToInt {
  # Converts `self` to a `Int`
  fn pub to_int -> Int
}

# The minimum value an `Int` can represent.
let pub MIN = -9_223_372_036_854_775_808

# The maximum value an `Int` can represent.
let pub MAX = 9_223_372_036_854_775_807
let PLUS = 43
let MINUS = 45
let ZERO = 48
let NINE = 57
let LOWER_A = 97
let LOWER_F = 102
let UPPER_A = 65
let UPPER_F = 90
let LOWER_X = 120

# The type returned by checked integer builtin functions, such as
# `int_checked_add()`.
#
# This is the `{i64, i1}` type returned by the LLVM checked arithmetic
# intrinsics, and must match its layout.
type builtin CheckedIntResult {
  let @value: Int64
  let @tag: UInt8
}

# Produces a panic in response to an overflowed operation.
fn overflow_error -> Never {
  panic('Int operation overflowed')
}

# The format to use for parsing and formatting an `Int`.
type pub copy enum Format {
  # The `Int` is to be parsed or formatted as a binary number.
  case Binary

  # The `Int` is to be parsed or formatted as a decimal number.
  case Decimal

  # The `Int` is to be parsed or formatted as a hexadecimal number.
  case Hex

  fn pub to_base -> Int {
    match self {
      case Binary -> 2
      case Decimal -> 10
      case Hex -> 16
    }
  }
}

# A 64-bits signed integer type.
#
# `Int` values can represent values in the range
# `-9223372036854775808 <= value <= 9223372036854775807`.
#
# # Overflows
#
# Methods used for operators such as `Int.+` and `Int.>>` change their behavior
# based on the mode (debug or release) used for compiling code. In debug mode
# such methods trigger a panic upon overflow, while in release mode they wrap
# using two's complement. This makes it easier to catch unintended overflows,
# while still allowing for efficient code generation when using the release
# mode.
type builtin Int {
  # Parses a `Bytes` into an `Int` in the format specified in `format`,
  # returning a `Some` if the value is valid, and a `None` otherwise.
  #
  # For numbers in binary, the valid digits are `0` and `1`. For decimal numbers,
  # the valid digits are in the range `0-9`. For hexadecimal numbers, the valid
  # digits are in the ranges `a-z`, `A-Z`, `0-9`, and the input may start with
  # `0x`.
  #
  # In addition, the input may start with `+` or `-`, regardless of the input
  # format.
  #
  # Leading and/or trailing whitespace is considered invalid.
  #
  # # Examples
  #
  # Parsing a binary number:
  #
  # ```inko
  # import std.int (Format)
  #
  # Int.parse('11', Format.Binary)  # => Option.Some(3)
  # Int.parse('-11', Format.Binary) # => Option.Some(-3)
  # Int.parse('ff', Format.Binary)  # => Option.None
  # ```
  #
  # Parsing a decimal number:
  #
  # ```inko
  # import std.int (Format)
  #
  # Int.parse('123', Format.Decimal)  # => Option.Some(123)
  # Int.parse('-123', Format.Decimal) # => Option.Some(-123)
  # Int.parse('abc', Format.Decimal)  # => Option.None
  # ```
  #
  # Parsing a hexadecimal number:
  #
  # ```inko
  # import std.int (Format)
  #
  # Int.parse('ef', Format.Hex)    # => Option.Some(239)
  # Int.parse('0xef', Format.Hex)  # => Option.Some(239)
  # Int.parse('-0xef', Format.Hex) # => Option.Some(-239)
  # Int.parse('zz', Format.Hex)    # => Option.None
  # ```
  fn pub static parse[T: Bytes](
    bytes: ref T,
    format: ref Format,
  ) -> Option[Int] {
    let input = bytes.bytes.peekable
    let base = format.to_base
    let mut byte = -1
    let pos = match input.next {
      case Some(PLUS) -> {
        byte = try input.next
        true
      }
      case Some(MINUS) -> {
        byte = try input.next
        false
      }
      case Some(val) -> {
        byte = val
        true
      }
      case None -> return Option.None
    }

    let mut num = 0

    # For base 16 numbers, we allow them to start with -0x and 0x, as most base
    # 16 numbers will likely use the format 0xABC and not just ABC.
    if base == 16 and byte == ZERO {
      match input.peek {
        case Some(LOWER_X) -> {
          let _ = input.next

          byte = try input.next
        }
        case _ -> {}
      }
    }

    # Rust's approach is to check if an overflow is possible, and use wrapped
    # arithmetic in that case, in an attempt to improve performance. This was
    # implemented in https://github.com/rust-lang/rust/pull/95399, with
    # https://github.com/rust-lang/rust/pull/83371 and
    # https://github.com/rust-lang/rust/pull/83088 being related pull requests.
    #
    # I opted not to take this approach at the time of writing, as the
    # performance improvements seem very small, and simply not worth the extra
    # code at the time of writing. If this ever changes, we can consider taking
    # a similar approach.
    loop {
      let digit = if base <= 10 {
        byte.wrapping_sub(ZERO)
      } else if byte >= ZERO and byte <= NINE {
        byte - ZERO
      } else if byte >= LOWER_A and byte <= LOWER_F {
        byte - LOWER_A + 10
      } else if byte >= UPPER_A and byte <= UPPER_F {
        byte - UPPER_A + 10
      } else {
        return Option.None
      }

      if digit > base or digit < 0 { return Option.None }

      num = try num.checked_mul(base)
      num = try if pos {
        num.checked_add(digit)
      } else {
        num.checked_sub(digit)
      }

      match input.next {
        case Some(val) -> byte = val
        case _ -> return Option.Some(num)
      }
    }
  }

  # Sums the values of `iterator` into a single `Int`.
  #
  # # Examples
  #
  # ```inko
  # Int.sum([10, 20, 30].into_iter) # => 60
  # ```
  fn pub static sum[I: Iter[Int]](iterator: move I) -> Int {
    iterator.reduce(0, fn (acc, val) { acc + val })
  }

  # Formats `self` as a `String` in the given format.
  #
  # # Examples
  #
  # Formatting an `Int` as binary number:
  #
  # ```inko
  # import std.int (Format)
  #
  # 3.format(Format.Binary)  # => '11'
  # -1.format(Format.Binary) # => '-11'
  # ```
  #
  # Formatting an `Int` as a a decimal number:
  #
  # ```inko
  # 123.format(Format.Decimal) # => '123'
  # 123.format(Format.Hex)     # => '7b'
  # ```
  #
  # Formatting an `Int` as a hexadecimal number:
  #
  # ```inko
  # -123.format(Format.Hex) # => '-7b'
  # ```
  fn pub format(format: ref Format) -> String {
    let base = format.to_base

    match self {
      case 0 -> return '0'
      # MIN can't be turned positive using absolute(), so we have to handle
      # these cases explicitly.
      case MIN if base == 2 -> {
        return '-1000000000000000000000000000000000000000000000000000000000000000'
      }
      case MIN if base == 10 -> return '-9223372036854775808'
      case MIN if base == 16 -> return '-8000000000000000'
      case _ -> {}
    }

    let alphabet = '0123456789abcdef'
    let bytes = ByteArray.new
    let mut int = absolute

    while int > 0 {
      bytes.push(alphabet.get(int % base).or_panic)
      int /= base
    }

    if self < 0 { bytes.push(0x2D) }

    bytes.reverse
    bytes.into_string
  }

  # Calls the supplied closure `self` times.
  #
  # # Examples
  #
  # ```inko
  # 4.times fn (i) {
  #   i # => 0, 1, 2, 3
  # }
  # ```
  fn pub times(block: fn (Int)) {
    let mut index = 0

    while index < self {
      block.call(index)

      index += 1
    }
  }

  # Returns the absolute value of `self`.
  #
  # If `self` is equal to `std.int.MIN`, then the returned value is also
  # `std.int.MIN`.
  #
  # # Examples
  #
  # ```inko
  # -4.absolute                        # => 4
  # 4.absolute                         # => 4
  # -9_223_372_036_854_775808.absolute # => -9_223_372_036_854_775808
  # ```
  fn pub inline absolute -> Int {
    _INKO.int_absolute(self)
  }

  # Returns a value with the opposite sign of `self`.
  #
  # # Examples
  #
  # ```inko
  # -42.opposite # => 42
  # 42.opposite  # => -42
  # ```
  fn pub inline opposite -> Int {
    0 - self
  }

  # Returns a `Range` from `self` up to but excluding `other`.
  fn pub inline until(other: Int) -> ExclusiveRange {
    ExclusiveRange.new(clone, other)
  }

  # Returns a `Range` from `self` up to and including `other`.
  fn pub inline to(other: Int) -> InclusiveRange {
    InclusiveRange.new(clone, other)
  }

  # Returns the number of digits of `self`.
  #
  # # Examples
  #
  # ```inko
  # 0.digits    # => 1
  # 10.digits   # => 2
  # 100.digits  # => 3
  # -100.digits # => 3
  # ```
  fn pub digits -> Int {
    if self == 0 { return 1 }

    let mut digits = 0
    let mut number = absolute

    while number > 0 {
      number /= 10
      digits += 1
    }

    digits
  }

  # Rounds `self` to the nearest power of two.
  #
  # If `self <= 0`, this method returns zero.
  #
  # # Examples
  #
  # ```inko
  # 0.nearest_power_of_two # => 0
  # 1.nearest_power_of_two # => 1
  # 2.nearest_power_of_two # => 2
  # 3.nearest_power_of_two # => 4
  # ```
  fn pub nearest_power_of_two -> Int {
    if self <= 0 { return 0 }

    let mut rounded = clone

    rounded -= 1
    rounded |= rounded >> 1
    rounded |= rounded >> 2
    rounded |= rounded >> 4
    rounded |= rounded >> 8
    rounded |= rounded >> 16
    rounded |= rounded >> 32
    rounded += 1

    rounded
  }

  # Returns the result of performing a bitwise `NOT` on `self`.
  #
  # As Inko doesn't support unary operators besides `not` (which only supports
  # booleans), this is just a regular method.
  #
  # # Examples
  #
  # ```inko
  # 12.not # => -13
  # ```
  fn pub inline not -> Int {
    _INKO.int_bit_not(self)
  }

  # Shifts the bits to the left, wrapping the truncated bits to the end of the
  # resulting integer.
  #
  # # Examples
  #
  # ```inko
  # 0xaa00000000006e1.rotate_left(12) # => 0x6e10aa
  # ```
  fn pub inline rotate_left(amount: Int) -> Int {
    _INKO.int_rotate_left(self, amount)
  }

  # Shifts the bits to the right, wrapping the truncated bits to the end of the
  # resulting integer.
  #
  # # Examples
  #
  # ```inko
  # 0x6e10aa.rotate_right(12) # => 0xaa00000000006e1
  # ```
  fn pub inline rotate_right(amount: Int) -> Int {
    _INKO.int_rotate_right(self, amount)
  }

  # Adds `other` to `self`, wrapping around when overflowing.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX, MIN)
  #
  # 1.wrapping_add(1)   # => 2
  # MAX.wrapping_add(1) # => MIN
  # ```
  fn pub inline wrapping_add(other: Int) -> Int {
    _INKO.int_wrapping_add(self, other)
  }

  # Subtracts `other` from `self`, wrapping around when overflowing.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX, MIN)
  #
  # 1.wrapping_sub(1)   # => 0
  # MIN.wrapping_sub(1) # => MAX
  # ```
  fn pub inline wrapping_sub(other: Int) -> Int {
    _INKO.int_wrapping_sub(self, other)
  }

  # Multiplies `other` with `self`, wrapping around when overflowing.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX)
  #
  # 1.wrapping_mul(2)   # => 2
  # MAX.wrapping_mul(2) # => -2
  # ```
  fn pub inline wrapping_mul(other: Int) -> Int {
    _INKO.int_wrapping_mul(self, other)
  }

  # Adds `other` to `self`, returning a `None` when overflowing.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX)
  #
  # 1.checked_add(5)   # => Option.Some(6)
  # MAX.checked_add(1) # => Option.None
  # ```
  fn pub inline checked_add(other: Int) -> Option[Int] {
    let res = _INKO.int_checked_add(self, other)

    if res.tag as Int == 0 {
      Option.Some(res.value as Int)
    } else {
      Option.None
    }
  }

  # Subtracts `other` from `self`, returning a `None` when overflowing.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX, MIN)
  #
  # 1.checked_sub(1)   # => Option.Some(0)
  # MIN.checked_sub(1) # => Option.None
  # ```
  fn pub inline checked_sub(other: Int) -> Option[Int] {
    let res = _INKO.int_checked_sub(self, other)

    if res.tag as Int == 0 {
      Option.Some(res.value as Int)
    } else {
      Option.None
    }
  }

  # Multiplies `other` with `self`, returning a `None` when overflowing.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX)
  #
  # 1.checked_mul(2)   # => Option.Some(2)
  # MAX.checked_mul(2) # => Option.None
  # ```
  fn pub inline checked_mul(other: Int) -> Option[Int] {
    let res = _INKO.int_checked_mul(self, other)

    if res.tag as Int == 0 {
      Option.Some(res.value as Int)
    } else {
      Option.None
    }
  }

  # Divides `self` by `other`, returning a `None` when overflowing or if `other`
  # is zero.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX)
  #
  # 10.checked_div(0) # => Option.None
  # 10.checked_div(2) # => Option.Some(5)
  # ```
  fn pub inline checked_div(other: Int) -> Option[Int] {
    if other == 0 or (self == MIN and other == -1) {
      Option.None
    } else {
      Option.Some(unchecked_div(other))
    }
  }

  # Raises `self` to the power of `other`, returning a `None` when overflowing.
  #
  # # Examples
  #
  # ```inko
  # import std.int (MAX)
  #
  # 2.checked_pow(2)   # => Option.Some(4)
  # MAX.checked_pow(2) # => Option.None
  # ```
  fn pub inline checked_pow(other: Int) -> Option[Int] {
    let res = inko_int_checked_pow(self, other)

    if res.tag as Int == 0 {
      Option.Some(res.value as Int)
    } else {
      Option.None
    }
  }

  # Returns a copy of `self` with the byte order reversed.
  #
  # # Examples
  #
  # ```inko
  # 12345.swap_bytes               # => 4120793659044003840
  # 4120793659044003840.swap_bytes # => 12345
  # ```
  fn pub inline swap_bytes -> Int {
    _INKO.int_swap_bytes(self)
  }

  # Returns the number of leading (most significant) zeros in the binary
  # representation of `self`.
  #
  # # Examples
  #
  # ```inko
  # 0.leading_zeros    # => 64
  # 1000.leading_zeros # => 54
  # ```
  fn pub inline leading_zeros -> Int {
    _INKO.int_leading_zeros(self)
  }

  # Returns the number of trailing (least significant) zeros in the binary
  # representation of `self`.
  #
  # # Examples
  #
  # ```inko
  # 0.trailing_zeros    # => 0
  # 1000.trailing_zeros # => 3
  # ```
  fn pub inline trailing_zeros -> Int {
    _INKO.int_trailing_zeros(self)
  }

  # Returns the number of leading (most significant) ones in the binary
  # representation of `self`.
  #
  # # Examples
  #
  # ```inko
  # -1.leading_ones    # => 64
  # -2.leading_ones    # => 63
  # ```
  fn pub inline leading_ones -> Int {
    _INKO.int_leading_zeros(not)
  }

  # Returns the number of trailing (least significant) ones in the binary
  # representation of `self`.
  #
  # # Examples
  #
  # ```inko
  # 1.trailing_ones  # => 1
  # 11.trailing_ones # => 2
  # ```
  fn pub inline trailing_ones -> Int {
    _INKO.int_trailing_zeros(not)
  }

  fn inline unchecked_div(other: Int) -> Int {
    # This implements floored division, rather than rounding towards zero. This
    # makes division work more natural when using negative numbers.
    #
    # This code is based on the upcoming div_floor() implementation of the Rust
    # standard library: https://github.com/rust-lang/rust/pull/88582.
    let d = _INKO.int_div(self, other)
    let r = _INKO.int_rem(self, other)

    if (r > 0 and other < 0) or (r < 0 and other > 0) { d - 1 } else { d }
  }
}

impl Add[Int, Int] for Int {
  # Adds `other` to `self`.
  #
  # # Examples
  #
  # ```inko
  # 10 + 2 # => 12
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic upon overflowing. In release
  # mode, two's complement wrapping is used instead.
  fn pub inline +(other: Int) -> Int {
    mode.add(self, other)
  }
}

impl Subtract[Int, Int] for Int {
  # Subtracts `other` from `self`.
  #
  # # Examples
  #
  # ```inko
  # 10 - 2 # => 8
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic upon overflowing. In release
  # mode, two's complement wrapping is used instead.
  fn pub inline -(other: Int) -> Int {
    mode.sub(self, other)
  }
}

impl Multiply[Int, Int] for Int {
  # Multiplies `other` with `self`.
  #
  # # Examples
  #
  # ```inko
  # 10 * 2 # => 20
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic upon overflowing. In release
  # mode, two's complement wrapping is used instead.
  fn pub inline *(other: Int) -> Int {
    mode.mul(self, other)
  }
}

impl Modulo[Int, Int] for Int {
  # Returns the remainder of dividing `self` by `other`.
  #
  # # Examples
  #
  # ```inko
  # 10 % 3 # => 1
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic upon overflowing. In release
  # mode, two's complement wrapping is used instead.
  #
  # # Panics
  #
  # This method _always_ panics (regardless of the mode used) if any of the
  # following is true:
  #
  # - `other` is equal to zero
  # - `self` is equal to `std.int.MIN` and `other` is equal to -1
  fn pub inline %(other: Int) -> Int {
    mode.mod(self, other)
  }
}

impl ShiftLeft[Int, Int] for Int {
  # Shifts `self` by `other` bits to the left.
  #
  # # Examples
  #
  # ```inko
  # 10 << 1 # => 20
  # 1 << 65 # => 2
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic if `other` is greater than 63.
  # In release mode, a bitmask is applied to `other` such that it wraps around
  # when the value is greater than `63` (i.e. `64` is treated as `1`).
  fn pub inline <<(other: Int) -> Int {
    mode.shl(self, other)
  }
}

impl ShiftRight[Int, Int] for Int {
  # Shifts `self` by `other` bits to the right.
  #
  # # Examples
  #
  # ```inko
  # 10 >> 1  # => 5
  # 10 >> 65 # => 5
  # -10 >> 2 # => -3
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic if `other` is greater than 63.
  # In release mode, a bitmask is applied to `other` such that it wraps around
  # when the value is greater than `63` (i.e. `64` is treated as `1`).
  fn pub inline >>(other: Int) -> Int {
    mode.shr(self, other)
  }
}

impl UnsignedShiftRight[Int, Int] for Int {
  # Shifts `self` by `other` bits to the right, treating `self` as an unsigned
  # integer as part of the shift.
  #
  # # Examples
  #
  # ```inko
  # 10 >>> 2  # => 2
  # -10 >>> 2 # => 4611686018427387901
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic if `other` is greater than 63.
  # In release mode, a bitmask is applied to `other` such that it wraps around
  # when the value is greater than `63` (i.e. `64` is treated as `1`).
  fn pub inline >>>(other: Int) -> Int {
    mode.ushr(self, other)
  }
}

impl Power[Int, Int] for Int {
  # Raises `self` to the power of `other`.
  #
  # # Examples
  #
  # ```inko
  # 10 ** 2 # => 100
  # ```
  #
  # # Overflows
  #
  # In debug mode, this method triggers a panic upon overflowing. In release
  # mode, two's complement wrapping is used instead.
  fn pub inline **(other: ref Int) -> Int {
    mode.pow(self, other)
  }
}

impl ToInt for Int {
  fn pub inline to_int -> Int {
    clone
  }
}

impl ToFloat for Int {
  fn pub inline to_float -> Float {
    self as Float
  }
}

impl Compare for Int {
  fn pub inline cmp(other: ref Int) -> Ordering {
    if self > other {
      Ordering.Greater
    } else if self < other {
      Ordering.Less
    } else {
      Ordering.Equal
    }
  }

  fn pub inline <(other: ref Int) -> Bool {
    _INKO.int_lt(self, other)
  }

  fn pub inline <=(other: ref Int) -> Bool {
    _INKO.int_le(self, other)
  }

  fn pub inline >(other: ref Int) -> Bool {
    _INKO.int_gt(self, other)
  }

  fn pub inline >=(other: ref Int) -> Bool {
    _INKO.int_ge(self, other)
  }
}

impl Equal for Int {
  fn pub inline ==(other: ref Int) -> Bool {
    _INKO.int_eq(self, other)
  }

  fn pub inline !=(other: ref Int) -> Bool {
    _INKO.int_ne(self, other)
  }
}

impl Clone for Int {
  fn pub inline clone -> Int {
    self
  }
}

impl ToString for Int {
  fn pub to_string -> String {
    format(Format.Decimal)
  }
}

impl Divide[Int, Int] for Int {
  # Divides `self` by `other`.
  #
  # # Panics
  #
  # This method panics if `other` is zero, or if `self` is `MIN` and `other` is
  # `-1`. This is true for both debug and release builds.
  fn pub inline /(other: ref Int) -> Int {
    if other == 0 or (self == MIN and other == -1) { overflow_error }

    unchecked_div(other)
  }
}

impl BitAnd[Int, Int] for Int {
  fn pub inline &(other: ref Int) -> Int {
    _INKO.int_bit_and(self, other)
  }
}

impl BitOr[Int, Int] for Int {
  fn pub inline |(other: ref Int) -> Int {
    _INKO.int_bit_or(self, other)
  }
}

impl BitXor[Int, Int] for Int {
  fn pub inline ^(other: ref Int) -> Int {
    _INKO.int_bit_xor(self, other)
  }
}

impl Hash for Int {
  fn pub inline hash[H: mut + Hasher](hasher: mut H) {
    hasher.write(clone)
  }
}

impl FormatTrait for Int {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write(to_string)
  }
}
