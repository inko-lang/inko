# A UTF-8 encoded and immutable string.
#
# A `String` is an immutable, UTF-8 encoded string.
#
# Various methods for `String` may operate on or mention "characters". Whenever
# this is the case, we are referring to extended grapheme clusters, _not_
# Unicode scalar values or bytes.
import std.alloc
import std.array (OutOfBounds, check_bounds)
import std.bytes (Bytes, IntoByteArray, Slice, ToByteArray, hash_bytes)
import std.clone (Clone)
import std.cmp (Compare, Equal, Ordering, min)
import std.drop (Drop)
import std.fmt (Format, Formatter)
import std.fs.path (Path)
import std.hash (Hash, Hasher)
import std.iter (Iter, Stream)
import std.ops (Add)
import std.ptr

type extern PrimitiveString {
  let @bytes: Pointer[UInt8]
  let @size: Int
}

fn extern inko_string_to_lower(string: PrimitiveString) -> PrimitiveString

fn extern inko_string_to_upper(string: PrimitiveString) -> PrimitiveString

fn extern inko_string_chars(string: PrimitiveString) -> Pointer[UInt8]

fn extern inko_string_chars_next(iter: Pointer[UInt8]) -> PrimitiveString

fn extern inko_string_chars_drop(iter: Pointer[UInt8])

fn extern inko_string_from_pointer(pointer: Pointer[UInt8]) -> PrimitiveString

let TAB = 0x9
let LF = 0xA
let CR = 0xD
let SPACE = 0x20
let DQUOTE = 0x22
let BSLASH = 0x5C
let LOWER_B = 0x62
let LOWER_N = 0x6e
let LOWER_F = 0x66
let LOWER_R = 0x72
let LOWER_T = 0x74

# A table mapping bytes to their replacements for `String.escaped`.
let ESCAPE_TABLE = [
  -1, -1, -1, -1, -1, -1, -1, -1, LOWER_B, LOWER_T, LOWER_N, -1, LOWER_F,
  LOWER_R, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, DQUOTE, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, BSLASH, -1, -1, -1,
]

fn whitespace?(byte: Int) -> Bool {
  byte == TAB or byte == LF or byte == CR or byte == SPACE
}

fn padding(string: String, chars: Int, pad_to: Int) -> String {
  if chars >= pad_to { return '' }

  let pad_size = pad_to - chars
  let pad_buf = StringBuffer.new

  pad_size.times(fn (_) { pad_buf.push(string) })

  let mut pad = pad_buf.into_string

  if pad.chars.count > pad_size {
    # In case the `string` value contains multiple characters, we may need to
    # truncate the padding to produce the correct final size.
    pad.substring(start: 0, end: pad_size)
  } else {
    pad
  }
}

# A type that can be moved into a `String`.
trait pub IntoString {
  # Moves `self` into a `String`.
  fn pub move into_string -> String
}

# A type that can be converted to a `String`.
trait pub ToString {
  # Converts `self` to a `String`.
  fn pub to_string -> String
}

# An UTF-8 encoded and immutable string type.
type builtin String {
  # The size of the string in bytes, _excluding_ the trailing NULL byte.
  let @size: Int

  # A pointer to the bytes of this string, including the trailing NULL byte.
  let @ptr: Pointer[UInt8]

  fn static from_primitive(value: PrimitiveString) -> String {
    if value.size == 0 { return '' }

    let str = from_borrowed_primitive(value)

    alloc.free(value.bytes)
    str
  }

  fn static from_borrowed_primitive(value: PrimitiveString) -> String {
    if value.size == 0 { return '' }

    let new = alloc.allocate(value.size + 1)

    # String values are NULL terminated _in addition_ to storing a length, such
    # that we can pass pointers to C functions as-is, so we have to make sure
    # the NULL byte is indeed present.
    alloc.copy(from: value.bytes, to: new, size: value.size)
    alloc.write(byte: 0, to: ptr.add(new, value.size), size: 1)
    String(ptr: new, size: value.size)
  }

  # Returns a `String` created from the given NULL terminated pointer.
  #
  # If `pointer` is NULL, an empty `String` is returned.
  #
  # # Safety
  #
  # The purpose of this method is to allow creating a `String` from a pointer
  # returned by C code. Do not use this method unless you have somehow verified
  # that the pointer is a valid NULL terminated C string.
  #
  # If the pointer points to invalid memory or isn't NULL terminated, the
  # behavior is undefined and likely results in a crash.
  #
  # # Examples
  #
  # ```inko
  # String.from_pointer("hello".pointer) == "hello" # => true
  # ```
  fn pub static from_pointer(pointer: Pointer[UInt8]) -> String {
    if pointer as Int == 0 { return '' }

    from_primitive(inko_string_from_pointer(pointer))
  }

  # Return a `String` that contains the values of the iterator, separated by the
  # value of the `with` argument.
  #
  # # Examples
  #
  # ```inko
  # let vals = [10, 20, 30].into_iter
  #
  # String.join(vals, with: ',') => '10,20,30'
  # ```
  fn pub static join[T: ToString, I: Iter[T]](
    iter: move I,
    with: String,
  ) -> String {
    let result = iter.reduce(StringBuffer.new, fn (buff, val) {
      if buff.empty?.false? { buff.push(with) }

      buff.push(val.to_string)
      buff
    })

    result.into_string
  }

  # Slices `self` into a slice of bytes using a _byte_ range from `start` until
  # (but excluding) `end`.
  #
  # Both the `start` and `end` arguments are _byte_ indexes.
  #
  # The `start` index is allowed to be equal to the size of `self`, but only if
  # `end` is the same as `start`. Thus given a `String` with a size of `4`, the
  # range `4 until 4` is valid.
  #
  # # Panics
  #
  # This method panics if `start` or `end` is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # 'ðŸ˜Š'.slice(start: 0, end: 4).to_string # => 'ðŸ˜Š'
  # 'ðŸ˜Š'.slice(start: 0, end: 3).to_string # => "\u{FFFD}"
  # ```
  fn pub slice(start: Int, end: Int) -> Slice[Self] {
    Slice.checked(self, start, end)
  }

  # Returns the uppercase equivalent of the current `String`.
  #
  # # Examples
  #
  # Converting a `String` containing only ASCII symbols:
  #
  # ```inko
  # 'hello'.to_upper # => 'HELLO'
  # ```
  #
  # Converting a `String` containing Unicode symbols:
  #
  # ```inko
  # 'Ã¤'.to_upper # => 'Ã„'
  # ```
  #
  # Converting a `String` containing both ASCII and Unicode symbols:
  #
  # ```inko
  # 'aÃ¤'.to_upper # => 'AÃ„'
  # ```
  fn pub inline to_upper -> String {
    String.from_primitive(inko_string_to_upper(to_primitive))
  }

  # Returns the lowercase equivalent of the current `String`.
  #
  # # Examples
  #
  # Converting a `String` containing only ASCII symbols:
  #
  # ```inko
  # 'HELLO'.to_lower # => 'hello'
  # ```
  #
  # Converting a `String` containing Unicode symbols:
  #
  # ```inko
  # 'Ã„'.to_lower # => 'Ã¤'
  # ```
  #
  # Converting a `String` containing both ASCII and Unicode symbols:
  #
  # ```inko
  # 'AÃ„'.to_lower # => 'aÃ¤'
  # ```
  fn pub inline to_lower -> String {
    String.from_primitive(inko_string_to_lower(to_primitive))
  }

  # Slices `self` into a substring using a _character_ range from `start` until
  # (but excluding) `end`.
  #
  # Both the `start` and `end` arguments are _character_ indexes, _not_ byte
  # indexes. If `start` is less than zero, it's treated as if it were set to
  # zero. If `end` is zero or `start` is greater than or equal to `end`, the
  # returned value is always an empty `String`.
  #
  # Slicing a `String` into a substring is _not_ a constant-time operation,
  # instead it's `O(n)` where `n` is the number of characters in the `String`.
  #
  # # Examples
  #
  # ```inko
  # 'hello_world'.substring(start: 0, end: 5)  # => 'hello'
  # 'hello_world'.substring(start: 0, end: 50) # => 'hello'
  # 'ðŸ˜Š'.substring(start: 0, end: 1)           # => 'ðŸ˜Š'
  # ```
  fn pub substring(start: Int, end: Int) -> String {
    let buff = StringBuffer.new

    for (index, char) in self.chars.with_index {
      if index >= end { break } else if index >= start { buff.push(char) }
    }

    buff.into_string
  }

  # Returns `true` if `self` starts with the given `String`.
  #
  # # Examples
  #
  # Checking if a `String` starts with another `String`:
  #
  # ```inko
  # 'test_starts_with'.starts_with?('test_') # => true
  # 'hello'.starts_with?('test_')            # => false
  # ```
  fn pub starts_with?(prefix: String) -> Bool {
    ptr.starts_with?(@ptr, size, prefix.ptr, prefix.size)
  }

  # Returns `true` if `self` ends with the given `String`.
  #
  # # Examples
  #
  # Checking if a `String` ends with another `String`:
  #
  # ```inko
  # 'hello_world'.ends_with?('world') # => true
  # 'hello'.ends_with?('world')       # => false
  # ```
  fn pub ends_with?(suffix: String) -> Bool {
    ptr.ends_with?(@ptr, size, suffix.ptr, suffix.size)
  }

  # Splits `self` into an iterator of `Strings`, each separated by the given
  # separator.
  #
  # # Examples
  #
  # Splitting a `String` using a single character as the separator:
  #
  # ```inko
  # let iter = 'foo/bar/baz'.split('/')
  #
  # iter.next # => Option.Some('foo')
  # iter.next # => Option.Some('bar')
  # ```
  #
  # Splitting a `String` using multiple characters as the separator:
  #
  # ```inko
  # let iter = 'foo::bar::baz'.split('::')
  #
  # iter.next # => Option.Some('foo')
  # iter.next # => Option.Some('bar')
  # ```
  fn pub split(separator: String) -> Stream[String] {
    let mut offset = 0

    Stream.new(fn move {
      match index_of(separator, starting_at: offset) {
        case Some(at) -> {
          let start = offset := at + separator.size

          Option.Some(slice(start: start, end: at).to_string)
        }
        case _ if offset < size -> {
          # No separator found, but we haven't reached the end of the String
          # yet. In this case we return the remaining String.
          let at = offset := size

          Option.Some(slice(start: at, end: size).to_string)
        }
        case _ -> Option.None
      }
    })
  }

  # Returns `true` if `self` is an empty `String`.
  #
  # # Examples
  #
  # ```inko
  # ''.empty?    # => true
  # 'foo'.empty? # => false
  # ```
  fn pub inline empty? -> Bool {
    size == 0
  }

  # Returns a new `String` that is padded with another `String` until the given
  # number of characters is reached.
  #
  # The padding is applied at the start of the new `String`.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.pad_start(with: ' ', chars: 7) # => '  hello'
  # 'hello'.pad_start(with: ' ', chars: 5) # => 'hello'
  # ```
  fn pub pad_start(with: String, chars: Int) -> String {
    padding(with, chars: self.chars.count, pad_to: chars) + self
  }

  # Returns a new `String` that is padded with another `String` until the given
  # number of characters is reached.
  #
  # The padding is applied at the end of the new `String`.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.pad_end(with: ' ', chars: 7) # => 'hello  '
  # 'hello'.pad_end(with: ' ', chars: 5) # => 'hello'
  # ```
  fn pub pad_end(with: String, chars: Int) -> String {
    self + padding(with, chars: self.chars.count, pad_to: chars)
  }

  # Returns a new `String` that contains `self` multiple times.
  #
  # # Examples
  #
  # ```inko
  # 'a'.repeat(4) # => 'aaaa'
  # ```
  fn pub repeat(times: Int) -> String {
    match times {
      case 0 -> ''
      case 1 -> self
      case _ -> {
        let buf = StringBuffer.new

        times.times(fn (_) { buf.push(clone) })
        buf.into_string
      }
    }
  }

  # Returns an iterator over the characters (= extended grapheme clusters) in
  # `self`.
  #
  # # Examples
  #
  # ```inko
  # 'ðŸ˜€ðŸ˜ƒ'.chars.next # => Option.Some('ðŸ˜€')
  # ```
  fn pub inline chars -> Chars {
    Chars(string: self, iter: inko_string_chars(to_primitive))
  }

  # Returns a new `String` without the given prefix.
  #
  # If `self` starts with the prefix, a `Option.Some` is returned containing the
  # substring after the prefix. If `self` doesn't start with the prefix, an
  # `Option.None` is returned.
  #
  # # Examples
  #
  # ```inko
  # 'xhellox'.strip_prefix('x') # => Option.Some('hellox')
  # 'xhellox'.strip_prefix('y') # => Option.None
  # ```
  fn pub strip_prefix(prefix: String) -> Option[String] {
    if starts_with?(prefix).false? { return Option.None }

    if size == prefix.size {
      Option.Some('')
    } else {
      Option.Some(slice(start: prefix.size, end: size).to_string)
    }
  }

  # Returns a new `String` without the given suffix.
  #
  # If `self` ends with the suffix, a `Option.Some` is returned containing the
  # substring before the prefix. If `self` doesn't end with the suffix, an
  # `Option.None` is returned.
  #
  # # Examples
  #
  # ```inko
  # 'xhellox'.strip_suffix('x') # => Option.Some('xhello')
  # 'xhellox'.strip_suffix('y') # => Option.None
  # ```
  fn pub strip_suffix(suffix: String) -> Option[String] {
    if ends_with?(suffix).false? { return Option.None }

    Option.Some(slice(start: 0, end: size - suffix.size).to_string)
  }

  # Returns a new `String` without any leading whitespace.
  #
  # # Examples
  #
  # ```inko
  # ' hello'.trim_start  # => 'hello'
  # "\thello".trim_start # => 'hello'
  # ```
  fn pub trim_start -> String {
    let mut index = 0
    let max = size

    while index < max {
      if whitespace?(get(index).or_panic) { index += 1 } else { break }
    }

    if index == size { '' } else { slice(start: index, end: size).to_string }
  }

  # Returns a new `String` without any trailing whitespace.
  #
  # # Examples
  #
  # ```inko
  # 'hello '.trim_end  # => 'hello'
  # "hello\t".trim_end # => 'hello'
  # ```
  fn pub trim_end -> String {
    let mut index = size - 1

    while index >= 0 {
      if whitespace?(get(index).or_panic) { index -= 1 } else { break }
    }

    if index == -1 { '' } else { slice(start: 0, end: index + 1).to_string }
  }

  # Returns a new `String` with both leading and trailing whitespace removed.
  #
  # # Examples
  #
  # ```inko
  # ' hello '.trim  # => 'hello'
  # " hello\t".trim # => 'hello'
  # ```
  fn pub trim -> String {
    let max = size
    let mut start = 0
    let mut end = max - 1

    while start < max {
      if whitespace?(get(start).or_panic) { start += 1 } else { break }
    }

    while end >= 0 {
      if whitespace?(get(end).or_panic) { end -= 1 } else { break }
    }

    if start == max { '' } else { slice(start: start, end: end + 1).to_string }
  }

  # Returns a copy of `self` with all special characters escaped.
  #
  # The following characters are escaped:
  #
  # 1. Double quotes
  # 1. Tabs
  # 1. Newlines
  # 1. Carriage returns
  # 1. Backspace
  # 1. Form feed
  # 1. Backslash
  #
  # # Examples
  #
  # ```inko
  # "hello\nworld" # => 'hello\nworld'
  # "hello\\world" # => 'hello\\world'
  # ```
  fn pub escaped -> String {
    # If the String doesn't contain any special characters then we can/should
    # avoid the allocations that take place below.
    if escape?.false? { return self }

    let buff = ByteArray.new
    let mut i = 0

    while i < size {
      let byte = byte_unchecked(i := i + 1)

      match ESCAPE_TABLE.get(byte) {
        case Ok(-1) or Error(_) -> buff.push(byte)
        case Ok(byte) -> {
          buff.push(BSLASH)
          buff.push(byte)
        }
      }
    }

    buff.into_string
  }

  # Replaces all occurrences of `string` with the value in `with`, returning the
  # result as a new `String`.
  #
  # If the `string` argument is an empty `String`, this method doesn't perform
  # any replacements and instead returns a copy of `self`.
  #
  # # Examples
  #
  # ```inko
  # 'foo foo'.replace('foo', with: 'bar') # => 'bar bar'
  # ```
  fn pub replace(string: String, with: String) -> String {
    # Different languages handle the pattern being empty differently. For
    # example, Javascript and Node only match the start of the string if the
    # pattern is empty. Other languages such as Ruby and Python appear to inject
    # the replacement in between every character, such that
    # `'AB'.replace('', ',')` results in `,A,B,`.
    #
    # We make the decision to just _not_ do any replacements in this case, as
    # replacing an empty string is nonsensical to begin with.
    if string.size == 0 { return self }

    let buf = ByteArray.new
    let mut start = 0
    let mut last = 0

    loop {
      match index_of(string, start) {
        case Some(i) -> {
          if i > last { buf.append(slice(start: last, end: i)) }

          buf.append(with.slice(start: 0, end: with.size))
          start = i + string.size
          last = start
        }
        case _ -> {
          if start < size { buf.append(slice(start: start, end: size)) }

          break
        }
      }
    }

    buf.into_string
  }

  # Converts `self` to a `Path`
  #
  # # Examples
  #
  # ```inko
  # '/tmp/test.txt'.to_path # => Path.new('/tmp/test.txt')
  # ```
  fn pub inline to_path -> Path {
    Path.new(self)
  }

  # Returns `true` if `self` contains the given `String`.
  #
  # If you instead want to use a `ByteArray` or `Slice` as the argument, use
  # `String.contains_bytes?` instead.
  #
  # # Examples
  #
  # ```inko
  # 'hello world'.contains?('hello') # => true
  # ```
  fn pub contains?(value: String) -> Bool {
    contains_bytes?(value)
  }

  fn inline byte_unchecked(index: Int) -> Int {
    (@ptr as Int + index as Pointer[UInt8]).0 as Int
  }

  fn inline escape? -> Bool {
    let mut i = 0

    while i < size {
      match ESCAPE_TABLE.get(byte_unchecked(i := i + 1)) {
        case Ok(-1) or Error(_) -> {}
        case Ok(_) -> return true
      }
    }

    false
  }

  fn inline to_primitive -> PrimitiveString {
    PrimitiveString(bytes: @ptr, size: size)
  }
}

impl Bytes for String {
  # Returns the size of the `String` in bytes.
  #
  # # Examples
  #
  # Getting the byte size of a `String`:
  #
  # ```inko
  # 'foo'.size # => 3
  # 'ðŸ˜€'.size  # => 4
  # ```
  fn pub inline size -> Int {
    @size
  }

  # Returns the byte at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # ```inko
  # 'abc'.get(0)  # => Result.Ok(97)
  # 'abc'.get(10) # => Result.Error(OutOfBounds(...))
  # ```
  fn pub inline get(index: Int) -> Result[Int, OutOfBounds] {
    try check_bounds(index, size)
    Result.Ok(byte_unchecked(index))
  }

  # Returns a raw pointer to the bytes of `self`.
  #
  # This method is meant to be used when passing strings to foreign functions
  # (i.e. `*char` arguments). You should avoid using it for anything else.
  fn pub inline pointer -> Pointer[UInt8] {
    @ptr
  }
}

impl Drop for String {
  fn mut drop {
    alloc.free(@ptr)
  }
}

impl ToByteArray for String {
  fn pub inline to_byte_array -> ByteArray {
    let bytes = ByteArray.new
    let _ = bytes.append(self)

    bytes
  }
}

impl IntoByteArray for String {
  fn pub inline move into_byte_array -> ByteArray {
    to_byte_array
  }
}

impl Clone for String {
  fn pub inline clone -> String {
    self
  }
}

impl ToString for String {
  fn pub inline to_string -> String {
    clone
  }
}

impl IntoString for String {
  fn pub inline move into_string -> String {
    self
  }
}

impl Equal for String {
  # Returns `true` if the current `String` and `other` are equal to each other.
  #
  # # Examples
  #
  # Returns `true` if two Strings are equal:
  #
  # ```inko
  # 'foo' == 'foo' # => true
  # ```
  #
  # Returns `false` if two Strings are not equal:
  #
  # ```inko
  # 'foo' == 'bar' # => false
  # ```
  fn pub ==(other: ref String) -> Bool {
    let lsize = self.size

    if lsize == other.size { ptr.equal(@ptr, other.ptr, lsize) } else { false }
  }
}

impl Hash for String {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    hash_bytes(self, hasher)
  }
}

impl Add[String, String] for String {
  # Concatenates `self` and the given `String`, returning a new `String`.
  #
  # # Examples
  #
  # ```inko
  # 'hello ' + 'world' # => 'hello world'
  # ```
  fn pub inline +(other: ref String) -> String {
    let tot = size + other.size
    let new = alloc.allocate(tot + 1)

    alloc.copy(from: pointer, to: new, size: size)
    alloc.copy(from: other.pointer, to: ptr.add(new, size), size: other.size)
    alloc.write(byte: 0, to: ptr.add(new, tot), size: 1)
    String(size: tot, ptr: new)
  }
}

impl Format for String {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('"')
    formatter.write(escaped)
    formatter.write('"')
  }
}

impl Compare for String {
  # Performs a byte-wise comparison of `self` with `other`.
  #
  # This method _does not_ perform lexicographic sorting, and thus produces
  # unreliable results for multi-byte strings.
  #
  # # Examples
  #
  #     'aaa'.cmp('bbb') # => Ordering.Less
  #     'aab'.cmp('aaa') # => Ordering.Greater
  fn pub cmp(other: String) -> Ordering {
    let mut max = min(size, other.size)
    let mut idx = 0

    while idx < max {
      match byte_unchecked(idx).cmp(other.byte_unchecked(idx)) {
        case Equal -> idx += 1
        case ord -> return ord
      }
    }

    size.cmp(other.size)
  }
}

# An iterator over the characters (= extended grapheme clusters) in a String.
#
# The exact number of grapheme clusters a `String` contains may change over time
# as the Unicode specification changes. If you want to index into a `String` in
# a stable way, it's best to calculate the character index, then translate that
# to a more stable index such as the code point index, or the byte index.
type pub Chars {
  # The String we're iterating over.
  #
  # We need to maintain a reference to the String, otherwise the underlying
  # native iterator would be invalidated.
  let @string: String

  # The native iterator provided by the VM.
  let @iter: Pointer[UInt8]
}

impl Iter[String] for Chars {
  fn pub mut next -> Option[String] {
    match inko_string_chars_next(@iter) {
      case { @size = 0 } -> Option.None
      case v -> Option.Some(String.from_borrowed_primitive(v))
    }
  }
}

impl Drop for Chars {
  fn mut drop {
    inko_string_chars_drop(@iter)
  }
}

# A buffer for efficiently concatenating `String` objects together.
#
# When concatenating multiple `String` objects together, intermediate `String`
# objects are created. For example:
#
# ```inko
# 'foo' + 'bar' + 'baz'
# ```
#
# This code will allocate three `String` objects (for the `String` literals),
# and two additional `String` objects. This is the result of the above
# expression being evaluated as follows:
#
# ```inko
# ('foo' + 'bar') + 'baz'
# ```
#
# This means that the first allocated `String` resulting from this expression
# is `'foobar'`, which is then concatenated with `'baz'`, producing
# `'foobarbaz'`.
#
# Using a `StringBuffer` we can work around this, only allocating a `String`
# once we are done:
#
# ```inko
# import std.string (StringBuffer)
#
# let buffer = StringBuffer.new
#
# buffer.push('foo')
# buffer.push('bar')
# buffer.push('baz')
#
# buffer.to_string # => 'foobarbaz'
# ```
#
# You can also create a `StringBuffer` and feed it values right away:
#
# ```inko
# import std.string (StringBuffer)
#
# let buffer = StringBuffer.from_array(['foo', 'bar', 'baz'])
#
# buffer.to_string # => 'foobarbaz'
# ```
type pub inline StringBuffer {
  let @bytes: ByteArray

  # Returns a new empty `StringBuffer`.
  fn pub inline static new -> StringBuffer {
    StringBuffer(ByteArray.new)
  }

  # Returns a new `StringBuffer` from an existing `Array`.
  #
  # # Examples
  #
  # Creating a `StringBuffer` from an `Array`:
  #
  # ```inko
  # import std.string (StringBuffer)
  #
  # let strings = ['foo', 'bar']
  #
  # StringBuffer.from_array(strings).to_string # => 'foobar'
  # ```
  fn pub inline static from_array(strings: Array[String]) -> StringBuffer {
    let tot = strings.iter.reduce(0, fn (cur, str) { cur + str.size })
    let buf = StringBuffer(ByteArray.with_capacity(tot))

    for i in strings { buf.push(i) }

    buf
  }

  # Adds the given `String` to the buffer.
  #
  # # Examples
  #
  # Adding a `String` to a `StringBuffer`:
  #
  # ```inko
  # import std.string (StringBuffer)
  #
  # let buffer = StringBuffer.new
  #
  # buffer.push('hello') # => 'hello'
  # ```
  fn pub mut push(string: String) {
    @bytes.append(string)
  }

  # Removes all values stored in `self`.
  #
  # # Examples
  #
  # ```inko
  # import std.string (StringBuffer)
  #
  # let buf = StringBuffer.new
  #
  # buf.push('hello')
  # buf.clear
  # buf.size # => 0
  # ```
  fn pub mut clear {
    @bytes.clear
  }

  # Returns `true` if `self` is empty.
  #
  # # Examples
  #
  # ```inko
  # import std.string (StringBuffer)
  #
  # let buf = StringBuffer.new
  #
  # buf.empty? # => true
  # buf.push('foo')
  # buf.empty? # => false
  # ```
  fn pub empty? -> Bool {
    @bytes.size == 0
  }
}

impl IntoString for StringBuffer {
  # Generates a `String` by consuming the buffer
  #
  # # Examples
  #
  # ```inko
  # import std.string (StringBuffer)
  #
  # let buffer = StringBuffer.new
  #
  # buffer.push('hello ')
  # buffer.push('world')
  # buffer.into_string # => 'hello world'
  # ```
  fn pub move into_string -> String {
    if empty? { return '' }

    let len = @bytes.size

    # Strings end with a NULL byte in addition to storing a size.
    @bytes.push(0)

    let buf = @bytes.buffer := 0 as Pointer[UInt8]

    @bytes.size = 0
    String(ptr: buf, size: len)
  }
}
