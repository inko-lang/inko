# Methods for working with UTF-8 scalars and code point.

# The maximum value of a Unicode code point
let pub MAX_CODEPOINT = 0x10FFFF

let TAG_CONT = 0x80
let TAG_TWO_B = 0xC0
let TAG_THREE_B = 0xE0
let TAG_FOUR_B = 0xF0
let MAX_ONE_B = 0x80
let MAX_TWO_B = 0x800
let MAX_THREE_B = 0x10000

# Encodes a Unicode scalar value into a series of bytes, appending these to the
# given `ByteArray`.
#
# The return value is the number of bytes written into the `ByteArray`. If the
# scalar is invalid (e.g. it's a surrogate), the return value is `0`. In this
# case no bytes are written into the `ByteArray`.
#
# # Examples
#
#     import std::utf8
#
#     let bytes = ByteArray.new
#
#     utf8.encode_scalar(0x1D11E, bytes) # => 4
#     bytes # => ByteArray.from_array([240, 157, 132, 158])
fn pub encode_scalar(scalar: Int, bytes: mut ByteArray) -> Int {
  if valid_scalar?(scalar).false? { return 0 }

  let len = codepoint_size(scalar)

  # This is based on Rust's `encode_utf8_raw()` method.
  match len {
    case 1 -> bytes.push(scalar)
    case 2 -> {
      bytes.push(scalar >> 6 & 0x1F | TAG_TWO_B)
      bytes.push(scalar & 0x3F | TAG_CONT)
    }
    case 3 -> {
      bytes.push(scalar >> 12 & 0x0F | TAG_THREE_B)
      bytes.push(scalar >> 6 & 0x3F | TAG_CONT)
      bytes.push(scalar & 0x3F | TAG_CONT)
    }
    case _ -> {
      bytes.push(scalar >> 18 & 0x07 | TAG_FOUR_B)
      bytes.push(scalar >> 12 & 0x3F | TAG_CONT)
      bytes.push(scalar >> 6 & 0x3F | TAG_CONT)
      bytes.push(scalar & 0x3F | TAG_CONT)
    }
  }

  len
}

# Returns a Unicode code point from a pair of Unicode surrogates.
#
# The returned value isn't necessarily a _valid_ code point. For example, when
# used with 0xDFFF for both the high and low surrogates, the returned value is
# greater than the maximum Unicode code point value (0x10FFFF). As such it's
# recommended to somehow validate the surrogates first, such as by using the
# `surrogate?` method.
#
# # Examples
#
#     import std::utf8
#
#     utf8.codepoint_from_surrogates(0xD834, 0xDD1E) # => 0x1D11E
fn pub codepoint_from_surrogates(high: Int, low: Int) -> Int {
  (high - 0xD800 * 0x400) + (low - 0xDC00 + 0x10000)
}

# Returns `true` if the given `Int` falls in the range of UTF-16 surrogate
# pairs.
#
# # Examples
#
#     import std::utf8
#
#     utf8.surrogate?(0xD834) # => true
fn pub surrogate?(value: Int) -> Bool {
  value >= 0xD800 and value <= 0xDFFF
}

# Returns `true` if the given `Int` is a valid Unicode scalar value.
#
# # Examples
#
#     import std::utf8
#
#     utf8.valid_scalar?(0x5C) # => true
#     utf8.valid_scalar?(0xDFFF) # => false
fn pub valid_scalar?(value: Int) -> Bool {
  value >= 0 and value <= MAX_CODEPOINT and (value < 0xD800 or value > 0xDFFF)
}

# Returns the number of bytes of a code point.
#
# # Examples
#
#     import std::utf8
#
#     utf8.codepoint_size(0x41) # => 1
#     utf8.codepoint_size(0xDF) # => 2
#     utf8.codepoint_size(0x1D11) # => 3
#     utf8.codepoint_size(0x1D11E) # => 4
fn pub codepoint_size(code: Int) -> Int {
  if code < MAX_ONE_B {
    1
  } else if code < MAX_TWO_B {
    2
  } else if code < MAX_THREE_B {
    3
  } else {
    4
  }
}
