# Standard input and output streams.
#
# This module provides types for working with STDOUT, STDERR, and STDIN.
#
# # Examples
#
# Writing to STDOUT:
#
# ```inko
# import std.stdio (Stdout)
#
# Stdout.new.print('hello')
# ```
#
# Writing to STDERR:
#
# ```inko
# import std.stdio (Stderr)
#
# Stderr.new.print('hello')
# ```
#
# Reading from STDIN:
#
# ```inko
# import std.stdio (Stdin)
#
# let bytes = ByteArray.new
# let stdin = Stdin.new
#
# stdin.read_all(bytes).or_panic_with('failed to read from STDIN')
# ```
import std.bytes (Bytes)
import std.io (Error, Read, Write, WriteInternal)
import std.sys.unix.stdio (self as sys) if unix

# The standard input stream of the current OS process.
type pub inline Stdin {
  let @fd: Int32

  # Returns a new `Stdin`.
  fn pub static new -> Stdin {
    Stdin(sys.stdin)
  }

  # Returns `true` if the input stream is connected to a terminal/TTY.
  #
  # # Examples
  #
  # ```inko
  # import std.stdio (Stdin)
  #
  # Stdin.new.terminal? # => true
  # ```
  fn pub terminal? -> Bool {
    sys.terminal?(@fd)
  }
}

impl Read[Error] for Stdin {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    sys.read(@fd, into, size)
  }
}

# The standard output stream of the current OS process.
#
# # Buffering
#
# This output stream _does not_ use any form of buffering and instead writes its
# output directly. If buffering is desired, you can do so by wrapping a `Stdout`
# in a `std.io.BufferedWriter`.
#
# Coming from other languages that apply buffering this may be surprising. The
# reason for this is simple: it's easy to apply buffering by combining `Stdout`
# with existing types, but opting out of buffering would require additional
# flags or types, resulting in a messy API.
type pub inline Stdout {
  let @fd: Int32

  # Returns a new `Stdout`.
  fn pub static new -> Stdout {
    Stdout(sys.stdout)
  }

  # Returns `true` if the output stream is connected to a terminal/TTY.
  #
  # # Examples
  #
  # ```inko
  # import std.stdio (Stdout)
  #
  # Stdout.new.terminal? # => true
  # ```
  fn pub terminal? -> Bool {
    sys.terminal?(@fd)
  }
}

impl WriteInternal for Stdout {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    sys.write(@fd, data, size)
  }
}

impl Write[Error] for Stdout {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, Error] {
    write_all_internal(bytes.pointer, bytes.size)
  }

  # Flushes any pending writes.
  #
  # Since this type doesn't use any buffering, this method is a no-op.
  fn pub mut flush -> Result[Nil, Error] {
    Result.Ok(nil)
  }
}

# The standard error stream of the current OS process.
#
# # Buffering
#
# This output stream _does not_ use any form of buffering and instead writes its
# output directly. If buffering is desired, you can do so by wrapping a `Stdout`
# in a `std.io.BufferedWriter`.
type pub inline Stderr {
  let @fd: Int32

  # Returns a new `Stderr`.
  fn pub static new -> Stderr {
    Stderr(sys.stderr)
  }

  # Returns `true` if the output stream is connected to a terminal/TTY.
  #
  # # Examples
  #
  # ```inko
  # import std.stdio (Stderr)
  #
  # Stderr.new.terminal? # => true
  # ```
  fn pub terminal? -> Bool {
    sys.terminal?(@fd)
  }
}

impl WriteInternal for Stderr {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    sys.write(@fd, data, size)
  }
}

impl Write[Error] for Stderr {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, Error] {
    write_all_internal(bytes.pointer, bytes.size)
  }

  # Flushes any pending writes.
  #
  # Since this type doesn't use any buffering, this method is a no-op.
  fn pub mut flush -> Result[Nil, Error] {
    Result.Ok(nil)
  }
}
