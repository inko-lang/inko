# A simple unit testing library.
#
# This module provides a simple and opinionated unit testing library. Tests are
# simply closures with a description, and define assertions using a `Test`
# instance passed as an argument to these closures.
#
# Unlike many other testing libraries, assertion failures don't immediately
# terminate the test, instead the test runs until the end. This ensures all
# failing assertions are immediately visible, instead of only the first
# assertion per failing test being visible.
#
# This module doesn't provide the means for setting up hooks (e.g. a function
# that runs before every or all tests), nor does it provide the means to tag
# tests, temporarily disable them, and more.
#
# Tests are run concurrently and in random order. The number of concurrently
# running tests is limited, with the default limit being the number of CPU cores
# available. This makes it easier to interact with external services, such as
# databases, as these may only be able to handle a limit number of concurrent
# requests.
#
# # Writing tests
#
# To write a test you need to import the `Tests` type into your module of
# choice. You can then write your tests like so:
#
# ```inko
# import std.test (Tests)
#
# type async Main {
#   fn async main {
#     let tests = Tests.new
#
#     tests.test('This is the test description') fn (t) {
#       t.equal('foo'.size, 3)
#     }
#
#     tests.run
#   }
# }
# ```
#
# The closure passed to the `test` method must be a `uni` closure, otherwise it
# can't be sent to the process that runs the test. If you pass the closure
# directly (as shown above) no extra work is needed. If you decide to first
# store the closure in a variable, you must explicitly recover it:
#
# ```inko
# import std.test (Tests)
#
# type async Main {
#   fn async main {
#     let tests = Tests.new
#     let block = recover fn (t: mut Tets) { t.equal('foo'.size, 3) }
#
#     tests.test('This is the test description', block)
#     tests.run
#   }
# }
# ```
#
# For more information about the available assertions, refer to the
# documentation of the `Test` type.
import std.cmp (Compare, Equal)
import std.debug
import std.env
import std.fmt (Format, Formatter, fmt)
import std.fs.path (Path)
import std.int (Format as IntFormat)
import std.io (Error, Write)
import std.process
import std.rand (Random)
import std.stdio (Stdout)
import std.sync (Channel)
import std.sys (Command, ExitStatus, Stream, cpu_cores, exit)
import std.time (Duration, Instant)

let CHILD_VAR = 'INKO_TEST_CHILD'

# Returns the last stack frame that originates from a unit test file.
fn unit_test_stack_frame -> debug.StackFrame {
  let frames = debug.stacktrace(skip: 2)

  loop {
    match frames.pop {
      case Some(frame) -> {
        if frame.path.tail.starts_with?('test_') { return frame }
      }
      case _ -> break
    }
  }

  panic('failed to find a stack frame originating from a unit test file')
}

# A single unit test.
type pub Test {
  # The unique ID of this test.
  #
  # This ID can be used when you want to create some sort of resource unique to
  # a test, such as a file. This removes the need for manually generating unique
  # names/paths/etc.
  let pub @id: Int

  # The name of the test as defined by the user.
  let pub @name: String

  # The path to the source file the test is defined in.
  let pub @path: Path

  # The line on which the test is defined.
  let pub @line: Int

  # All test failures produced when running the tests.
  let pub @failures: Array[Failure]

  # A closure containing the assertions to perform.
  let @code: uni fn (mut Test)

  # Returns a new `Test`.
  fn pub static new(
    id: Int,
    name: String,
    path: Path,
    line: Int,
    code: uni fn (mut Test),
  ) -> Test {
    Test(id: id, name: name, path: path, line: line, failures: [], code: code)
  }

  # Asserts that the given arguments are equal to each other.
  fn pub mut equal[T: Equal + Format](got: ref T, expected: ref T) {
    if got == expected { return }

    @failures.push(Failure.new(fmt(got), fmt(expected)))
  }

  # Asserts that the given arguments are not equal to each other.
  fn pub mut not_equal[T: Equal + Format](got: ref T, expected: ref T) {
    if got != expected { return }

    @failures.push(Failure.new(fmt(got), fmt(expected)))
  }

  # Asserts that `got` is greater than `minimum`.
  fn pub mut greater[T: Compare + Format](got: ref T, minimum: ref T) {
    if got > minimum { return }

    @failures.push(Failure.new(fmt(got), '> ${fmt(minimum)}'))
  }

  # Asserts that `got` is greater than or equal to `minimum`.
  fn pub mut greater_or_equal[T: Compare + Format](got: ref T, minimum: ref T) {
    if got >= minimum { return }

    @failures.push(Failure.new(fmt(got), '>= ${fmt(minimum)}'))
  }

  # Asserts that the given value is `true`.
  fn pub mut true(value: Bool) {
    if value { return }

    @failures.push(Failure.new('false', 'true'))
  }

  # Asserts that the given value is `false`.
  fn pub mut false(value: Bool) {
    if value.false? { return }

    @failures.push(Failure.new('true', 'false'))
  }

  fn matches?(filter: ref Filter) -> Bool {
    match filter {
      case Pattern(pat) -> @name.contains?(pat)
      case Location(path) -> @path == path
      case None -> true
    }
  }
}

# A type used for reporting test progress.
trait pub Reporter {
  # Reports a test that passed.
  fn pub mut passed(test: Test)

  # Reports a test that failed.
  fn pub mut failed(test: Test)

  # Presents a summary of the test suite upon completion.
  #
  # The `duration` argument is set to the total execution time.
  #
  # The `seed` argument is the seed used to sort the tests in a random order.
  #
  # If any tests failed, this method must return `false`.
  fn pub move finished(duration: Duration, seed: Int) -> Bool
}

# A test reporter that prints results in a simple text based format.
type pub Plain[T: mut + Write[Error]] {
  let @out: T
  let mut @tests: Int
  let @failed: Array[Test]
  let @colors: Bool

  # Returns a new reporter that writes to the given output stream.
  fn pub static new(out: T, colors: Bool) -> Plain[T] {
    Plain(out: out, tests: 0, failed: [], colors: colors)
  }

  fn red(value: String) -> String {
    if @colors { '\e[31m${value}\e[0m' } else { value }
  }

  fn green(value: String) -> String {
    if @colors { '\e[32m${value}\e[0m' } else { value }
  }
}

impl Reporter for Plain {
  fn pub mut passed(test: Test) {
    @tests += 1
    @out.write(green('.')).get
    @out.flush.get
  }

  fn pub mut failed(test: Test) {
    @tests += 1
    @failed.push(test)
    @out.write(red('F')).get
    @out.flush.get
  }

  fn pub move finished(duration: Duration, seed: Int) -> Bool {
    if @failed.size > 0 {
      @out.print('\n\nFailures:').get

      for (test_index, test) in @failed.iter.with_index {
        for (failure_index, fail) in test.failures.iter.with_index {
          let num = '${test_index + failure_index + 1}.'
          let indent = ' '.repeat(num.chars.count)

          @out
            .print(
              '
${num} Test: ${test.name}
${indent} Line: ${fail.path}:${fail.line}

${indent}   ${green('expected:')} ${fail.expected}
${indent}        ${red('got:')} ${fail.got}',
            )
            .get
        }
      }
    }

    let decimals = 4
    let dur = if duration.to_secs >= 1.0 {
      '${duration.to_secs.round(decimals)} seconds'
    } else {
      '${duration.to_millis} milliseconds'
    }
    let failed = @failed.iter.reduce(0, fn (sum, test) {
      sum + test.failures.size
    })
    let failures = if failed > 0 {
      red('${failed} failures')
    } else {
      green('0 failures')
    }

    @out
      .print(
        '\nFinished running ${@tests} tests in ${dur}, ${failures}, seed: ${seed}',
      )
      .get

    @failed.empty?
  }
}

type async Jobs {
  let @pending: Array[uni Test]

  fn async mut schedule(runner: Runner) {
    match @pending.pop {
      case Some(t) -> runner.run(t)
      case _ -> {
        # No more tests remain, so the Runner can shut itself down.
      }
    }
  }
}

type async Runner {
  let @jobs: Jobs
  let @output: Channel[uni Test]

  fn async schedule {
    @jobs.schedule(self)
  }

  fn async run(test: uni Test) {
    let result = recover {
      let test = recover test

      test.code.call(test)
      test
    }

    @output.send(result)
    schedule
  }
}

# A test failure produced by an assertion.
type pub inline Failure {
  # A description of what happened.
  let pub @got: String

  # A description of what was expected to happen.
  let pub @expected: String

  # The path to the source file in which the failure occurred.
  let pub @path: Path

  # The line on which the failure occurred.
  let pub @line: Int

  # Returns a new failure for the given reason.
  #
  # The source location is determined automatically based on the call stack.
  fn pub static new(got: String, expected: String) -> Failure {
    match unit_test_stack_frame {
      case { @path = path, @line = line } -> {
        Failure(got: got, expected: expected, path: path, line: line)
      }
    }
  }
}

# A type describing how to filter out tests.
type pub inline enum Filter {
  # Only run tests of which the description matches this pattern.
  case Pattern(String)

  # Only run tests defined in the given file.
  case Location(Path)

  # No filter is applied.
  case None

  # Parses a `String` into a filter.
  #
  # If the `String` is a valid path, a `Location` is returned, if not a
  # `Pattern` is returned.
  fn pub static from_string(string: String) -> Filter {
    if string.empty? { return Filter.None }

    match Path.new(string).expand {
      case Ok(path) -> Filter.Location(path)
      case _ -> Filter.Pattern(string)
    }
  }
}

impl Equal for Filter {
  fn pub ==(other: ref Filter) -> Bool {
    match self {
      case Pattern(lhs) -> {
        match other {
          case Pattern(rhs) -> lhs == rhs
          case _ -> false
        }
      }
      case Location(lhs) -> {
        match other {
          case Location(rhs) -> lhs == rhs
          case _ -> false
        }
      }
      case None -> {
        match other {
          case None -> true
          case _ -> false
        }
      }
    }
  }
}

impl Format for Filter {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Pattern(val) -> formatter.tuple('Pattern').field(val).finish
      case Location(path) -> formatter.tuple('Location').field(path).finish
      case None -> formatter.tuple('None').finish
    }
  }
}

# A child process to run as part of a unit test.
type pub Process {
  let @cmd: Command
  let mut @stdin: String

  fn static new(id: Int) -> Process {
    let cmd = Command.new(env.executable.get)

    cmd.stdin = Stream.Piped
    cmd.stdout = Stream.Piped
    cmd.stderr = Stream.Piped
    cmd.variables.set(CHILD_VAR, id.to_string)

    # Inko uses a set of thread pools for running processes, with their sizes
    # depending on the number of CPU cores. We limit the number of threads here
    # so we don't overload the system when running sub process tests on systems
    # with many CPU cores.
    cmd.variables.set('INKO_PROCESS_THREADS', '1')
    cmd.variables.set('INKO_BACKUP_THREADS', '1')
    Process(cmd: cmd, stdin: '')
  }

  # Adds an argument to the process.
  fn pub mut argument(value: String) {
    @cmd.arguments.push(value)
  }

  # Adds or updates an environment variable to the process.
  fn pub mut variable(name: String, value: String) {
    @cmd.variables.set(name, value)
  }

  # Sets the data to write to STDIN.
  fn pub mut stdin(bytes: String) {
    @stdin = bytes
  }

  # Spawns the process, waits for it to finish, and returns an `Output`
  # containing the results.
  fn pub move spawn -> Output {
    let child = match @cmd.spawn {
      case Ok(child) -> child
      case Error(err) -> panic("failed to spawn '${@cmd.program}': ${err}")
    }

    let _ = (child.stdin := Option.None).get.write(@stdin)
    let stdout = ByteArray.new
    let stderr = ByteArray.new
    let _ = child.stdout.as_mut.get.read_all(stdout)
    let _ = child.stderr.as_mut.get.read_all(stderr)
    let status = match child.wait {
      case Ok(val) -> val
      case Error(err) -> panic('failed to wait for the child process: ${err}')
    }

    Output(
      status: status,
      stdout: stdout.into_string,
      stderr: stderr.into_string,
    )
  }
}

# The output of a sub process.
type pub inline Output {
  # The exit status of the process.
  let pub @status: ExitStatus

  # The data written to Stdout.
  let pub @stdout: String

  # The data written to STDERR.
  let pub @stderr: String
}

# A collection of tests to run.
type pub Tests {
  # The number of tests to run concurrently.
  #
  # This defaults to the number of CPU cores.
  let pub mut @concurrency: Int

  # The reporter to use for producing test output.
  #
  # This defaults to the `Plain` reporter that writes to STDOUT. The use of
  # colors is enabled if STDOUT is connected to a terminal, unless the
  # `NO_COLOR` environment variable is set to a non-empty value.
  let pub mut @reporter: Reporter

  # The filter to apply to decide which tests to run.
  let pub mut @filter: Filter

  # The seed to use for ordering the tests.
  #
  # Tests are sorted in random order before running them, in an attempt to
  # prevent them from depending on a specific execution order. When debugging
  # test failures it may be useful to set the seed to a fixed value, ensuring
  # tests are sorted in the same order.
  #
  # While this value affects the order in which tests are sorted and scheduled,
  # tests may finish in a different order. For example, given a seed S and tests
  # `[A, B, C]`, the tests might be ordered as `[C, B, A]` but finish in the
  # order `[B, C, A]`, due to tests being run concurrently. For a truly
  # deterministic execution order you'll also need to set the `concurrency`
  # field to `1`.
  let pub mut @seed: Option[Int]

  # All the tests that have been registered.
  let @tests: Array[uni Test]

  # Closures to call as part of a forking test/child process.
  let @children: Array[fn]

  # Returns a new test tests with its default settings.
  fn pub static new -> Tests {
    let out = Stdout.new
    let colors = match env.get('NO_COLOR') {
      case Ok(v) if v.size > 0 -> false
      case _ -> out.terminal?
    }

    Tests(
      tests: [],
      children: [],
      concurrency: cpu_cores,
      reporter: Plain.new(out, colors) as Reporter,
      filter: Filter.None,
      seed: Option.None,
    )
  }

  # Registers a new test with the test tests.
  fn pub mut test(name: String, code: uni fn (mut Test)) {
    let id = @tests.size
    let test = recover {
      match unit_test_stack_frame {
        case { @path = path, @line = line } -> {
          Test.new(id, name, path, line, code)
        }
      }
    }

    @tests.push(test)
  }

  # Registers a new test that returns a `Result`.
  #
  # If the test closure returns an `Error`, an additional test failure is added.
  #
  # This is useful when writing tests that perform operations that might fail
  # but in general shouldn't, such as connecting to a socket that's expected to
  # be available. Such tests could sporadically fail, resulting in any
  # getping terminating the entire test suite. Using this method, you can
  # instead use the `try` operator. So instead of this:
  #
  # ```inko
  # t.test('Foo', fn (t) {
  #   let a = foo.get
  #   let b = bar(a).get
  #   ...
  # })
  # ```
  #
  # You'd write this:
  #
  # ```inko
  # t.ok('Foo', fn (t) {
  #   let a = try foo
  #   let b = try bar(a)
  #   ...
  # })
  # ```
  #
  # Using this method comes with the following trade-offs:
  #
  # 1. All error values must be of the same type
  # 2. The test failure location points to the location at which the test is
  #    defined, not the location at which the error is produced
  # 3. If the last expression doesn't return a `Result`, you'll need to use
  #    `Result.Ok(nil)` as the last expression
  fn pub mut ok[T, E: Format](
    name: String,
    code: uni fn (mut Test) -> Result[T, E],
  ) {
    test(name, fn move (t) {
      match code.call(t) {
        case Error(e) -> {
          t.failures.push(
            Failure(
              got: 'Result.Error(${fmt(e)})',
              expected: 'a value matching the pattern Result.Ok(_)',
              path: t.path.clone,
              line: t.line,
            ),
          )
        }
        case _ -> {}
      }
    })
  }

  # Registers a new test using a fork/subprocess.
  #
  # This doesn't use the actual `fork()` system call. Instead, a new instance of
  # the test executable is spawned such that it only runs the closure specified
  # in the `child` argument.
  fn pub mut fork(name: String, child: fn, test: uni fn (mut Test, Process)) {
    let id = @children.size

    @children.push(child)
    test(name, fn move (t) { test.call(t, Process.new(id)) })
  }

  # Registers a new test that asserts the given closure triggers a panic.
  fn pub mut panic(name: String, code: uni fn) {
    fork(name, code, fn (test, process) {
      let output = process.spawn
      let code = output.status.to_int

      if code == 101 { return }

      # These tests run in a separate OS process, and `debug.stacktrace` won't
      # include any frames pointing to the unit tests's source file. To work
      # around that, we reuse the test's location.
      let failure = Failure(
        got: 'the process exited with status ${code}',
        expected: 'the process to panic with exit status 101',
        path: test.path.clone,
        line: test.line,
      )

      test.failures.push(failure)
    })
  }

  # Registers a new test that asserts the given closure doesn't panic.
  fn pub mut no_panic(name: String, code: uni fn) {
    fork(name, code, fn (test, process) {
      let output = process.spawn
      let code = output.status.to_int

      if code != 101 { return }

      let got = match output.stderr.split('\n').last {
        case Some(v) -> v.to_string
        case _ -> 'the process panicked'
      }

      test.failures.push(
        Failure(
          got: got,
          expected: 'the process not to panic',
          path: test.path.clone,
          line: test.line,
        ),
      )
    })
  }

  # Runs all the tests.
  fn pub move run {
    match env.get(CHILD_VAR) {
      case Ok(id) -> return run_child(id)
      case _ -> {}
    }

    let rng = Random.new
    let seed = match @seed {
      case Some(seed) -> seed
      case _ -> rng.int
    }

    # We shuffle tests in a random order to ensure they don't end up
    # (implicitly) depending on a specific execution order. We do this first so
    # we can build a unique list of filtered tests (which retain the order).
    @tests.shuffle(rng)

    let filter = @filter
    let tests = @tests
      .into_iter
      .select_map(fn (test) {
        if test.matches?(filter) { Option.Some(test) } else { Option.None }
      })
      .reduce(recover [], fn (tests, test) {
        tests.push(test)
        tests
      })

    let size = tests.size
    let rep = @reporter
    let start = Instant.new
    let jobs = Jobs(tests)
    let output = Channel.new

    @concurrency.times(fn (_) { Runner(jobs, recover output.clone).schedule })

    size.times(fn (_) {
      let test = recover output.receive

      if test.failures.empty? { rep.passed(test) } else { rep.failed(test) }
    })

    if rep.finished(start.elapsed, seed) {
      exit(status: 0)
    } else {
      exit(status: 1)
    }
  }

  fn pub move run_child(id: String) {
    match
      Int.parse(id, IntFormat.Decimal).then(fn (v) { @children.get_mut(v).ok })
    {
      case Some(block) -> block.call
      case _ -> process.panic("The child ID '${id}' is invalid")
    }
  }
}
