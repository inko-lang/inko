# Internal helper methods for parsing bytes.
import std.bytes (Bytes)
import std.cmp (min)
import std.ptr

let NINE = 57
let ZERO = 48
let LOWER_A = 97
let LOWER_Z = 122
let UPPER_A = 65
let UPPER_F = 70
let UPPER_Z = 90
let LOWER_F = 102

fn inline digit?(byte: Int) -> Bool {
  byte >= ZERO and byte <= NINE
}

fn inline lower?(byte: Int) -> Bool {
  byte >= LOWER_A and byte <= LOWER_Z
}

fn inline upper?(byte: Int) -> Bool {
  byte >= UPPER_A and byte <= UPPER_Z
}

fn inline alpha?(byte: Int) -> Bool {
  lower?(byte) or upper?(byte)
}

fn inline lower_hex_char?(byte: Int) -> Bool {
  byte >= LOWER_A and byte <= LOWER_F
}

fn inline upper_hex_char?(byte: Int) -> Bool {
  byte >= UPPER_A and byte <= UPPER_F
}

fn inline hex?(byte: Int) -> Bool {
  lower_hex_char?(byte) or upper_hex_char?(byte) or digit?(byte)
}

fn inline to_lower(byte: Int) -> Int {
  byte + 32
}

# Parses two base 10 digits into an `Int`.
fn inline two_digits[T: Bytes](input: ref T, start: Int) -> Option[Int] {
  if start.wrapping_add(2) > input.size { return Option.None }

  let a = input.get(start).or_panic
  let b = input.get(start.wrapping_add(1)).or_panic

  if digit?(a) and digit?(b) {
    Option.Some(
      a.wrapping_sub(ZERO).wrapping_mul(10).wrapping_add(b.wrapping_sub(ZERO)),
    )
  } else {
    Option.None
  }
}

# Parses four base 10 digits into an `Int`.
fn inline four_digits[T: Bytes](input: ref T, start: Int) -> Option[Int] {
  if start.wrapping_add(4) > input.size { return Option.None }

  let a = input.get(start).or_panic
  let b = input.get(start.wrapping_add(1)).or_panic
  let c = input.get(start.wrapping_add(2)).or_panic
  let d = input.get(start.wrapping_add(3)).or_panic

  if digit?(a) and digit?(b) and digit?(c) and digit?(d) {
    Option.Some(
      a
        .wrapping_sub(ZERO)
        .wrapping_mul(10)
        .wrapping_add(b.wrapping_sub(ZERO))
        .wrapping_mul(10)
        .wrapping_add(c.wrapping_sub(ZERO))
        .wrapping_mul(10)
        .wrapping_add(d.wrapping_sub(ZERO)),
    )
  } else {
    Option.None
  }
}

# Parses up to N base 10 digits into an `Int`.
fn digits[T: Bytes](
  input: ref T,
  start: Int,
  limit: Int,
) -> Option[(Int, Int)] {
  let mut idx = start
  let mut num = 0
  let max = min(start + limit, input.size)

  while idx < max {
    let byte = input.get(idx).or_panic

    if digit?(byte).false? { break }

    num = try num.checked_mul(10)
    num = try num.checked_add(byte - ZERO)
    idx += 1
  }

  let len = idx - start

  if len > 0 { Option.Some((num, len)) } else { Option.None }
}

fn name_index_at[T: Bytes](
  input: ref T,
  start: Int,
  names: ref Array[String],
) -> Option[(Int, Int)] {
  let in_len = input.size - start
  let in_ptr = ptr.add(input.pointer, start)
  let mut i = 0
  let max = names.size

  while i < max {
    let name = names.get(i).or_panic
    let name_ptr = name.pointer
    let name_len = name.size

    if ptr.starts_with?(in_ptr, in_len, name_ptr, name_len) {
      return Option.Some((i, name_len))
    }

    i += 1
  }

  Option.None
}
