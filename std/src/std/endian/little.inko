# Methods for converting values to/from little-endian encoded bytes.

# Writes a value interpreted as a 32-bits unsigned integer into `into` as a
# series of bytes, starting at the index `at`.
#
# If `value` is greater than the maximum value of a 32-bits unsigned integer,
# the additional bits are ignored (i.e. the value wraps around).
#
# # Examples
#
#     import std::endian::little
#
#     let bytes = ByteArray.filled(with: 0, times: 4)
#
#     little.write_u32(123456789, into: bytes, at: 0)
#     bytes # => ByteArray.from_array([21, 205, 91, 7])
fn pub write_u32(value: Int, into: mut ByteArray, at: Int) {
  into.set(at, value)
  into.set(at + 1, value >> 8)
  into.set(at + 2, value >> 16)
  into.set(at + 3, value >> 24)
}

# Writes a value interpreted as a 64-bits signed integer into `into` as a series
# of bytes, starting at the index `at`.
#
# # Examples
#
#     import std::endian::little
#
#     let bytes = ByteArray.filled(with: 0, times: 8)
#
#     little.write_i64(123456789, into: bytes, at: 0)
#     bytes # => ByteArray.from_array([21, 205, 91, 7])
fn pub write_i64(value: Int, into: mut ByteArray, at: Int) {
  into.set(at, value)
  into.set(at + 1, value >> 8)
  into.set(at + 2, value >> 16)
  into.set(at + 3, value >> 24)
  into.set(at + 4, value >> 32)
  into.set(at + 5, value >> 40)
  into.set(at + 6, value >> 48)
  into.set(at + 7, value >> 56)
}

# Reads four bytes starting at `at` as a 32-bits signed integer.
#
# # Panics
#
# This method panics if there are less than four bytes available starting at
# `at`.
#
# # Examples
#
#     import std::endian::little
#
#     let bytes = ByteArray.filled(with: 0, times: 4)
#
#     little.write_u32(123456789, into: bytes, at: 0)
#     little.read_u32(from: bytes, at: 0) # => 123456789
fn pub read_u32(from: ref ByteArray, at: Int) -> Int {
  (from.get(at + 3) << 24)
    | (from.get(at + 2) << 16)
    | (from.get(at + 1) << 8)
    | from.get(at)
}

# Reads eight bytes starting at `at` as a 64-bits signed integer.
#
# # Panics
#
# This method panics if there are less than eight bytes available starting at
# `at`.
#
# # Examples
#
#     import std::endian::little
#
#     let bytes = ByteArray.filled(with: 0, times: 8)
#
#     little.write_i64(123456789, into: bytes, at: 0)
#     little.read_i64(from: bytes, at: 0) # => 123456789
fn pub read_i64(from: ref ByteArray, at: Int) -> Int {
  (from.get(at + 7) << 56)
    | (from.get(at + 6) << 48)
    | (from.get(at + 5) << 40)
    | (from.get(at + 4) << 32)
    | (from.get(at + 3) << 24)
    | (from.get(at + 2) << 16)
    | (from.get(at + 1) << 8)
    | from.get(at)
}
