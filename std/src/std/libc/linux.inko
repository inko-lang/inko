import std.io (Error)
import std.libc.linux.amd64 (self as arch) if amd64
import std.libc.linux.arm64 (self as arch) if arm64

let AF_INET = 2
let AF_INET6 = 10
let AF_UNIX = 1
let AF_UNSPEC = 0
let AI_ADDRCONFIG = 0x20
let AI_V4MAPPED = 0x8
let AT_EMPTY_PATH = 0x1000
let AT_FDCWD = -0x64
let CLOCK_REALTIME = 0
let DT_DIR = 4
let DT_LNK = 10
let DT_REG = 8
let EACCES = 13
let EADDRINUSE = 98
let EADDRNOTAVAIL = 99
let EAGAIN = 11
let EAI_ADDRFAMILY = -9
let EAI_AGAIN = -3
let EAI_FAIL = -4
let EAI_NONAME = -2
let EAI_SERVICE = -8
let EAI_SYSTEM = -11
let EBADF = 9
let EBUSY = 16
let ECONNABORTED = 103
let ECONNREFUSED = 111
let ECONNRESET = 104
let EDEADLK = 35
let EEXIST = 17
let EFAULT = 14
let EFBIG = 27
let EHOSTUNREACH = 113
let EINPROGRESS = 115
let EINTR = 4
let EINVAL = 22
let EIO = 5
let EISCONN = 106
let EISDIR = 21
let ENAMETOOLONG = 36
let ENETDOWN = 100
let ENETUNREACH = 101
let ENOENT = 2
let ENOMEM = 12
let ENOSPC = 28
let ENOSYS = 38
let ENOTCONN = 107
let ENOTDIR = 20
let ENOTEMPTY = 39
let ENOTSUP = 95
let EOPNOTSUPP = 95
let EPERM = 1
let EPIPE = 32
let ERANGE = 34
let EROFS = 30
let ESPIPE = 29
let ETIME = 62
let ETIMEDOUT = 110
let EXDEV = 18
let F_DUPFD_CLOEXEC = 1030
let IPPROTO_IP = 0
let IPPROTO_IPV6 = 41
let IPPROTO_TCP = 6
let IPV6_V6ONLY = 26
let IP_TTL = 2
let O_APPEND = 0x400
let O_CLOEXEC = 0x80000
let O_CREAT = 0x40
let O_RDONLY = 0
let O_RDWR = 0x2
let O_TRUNC = 0x200
let O_WRONLY = 0x1
let POSIX_SPAWN_SETSIGDEF = 0x04
let POSIX_SPAWN_SETSIGMASK = 0x08
let SEEK_CUR = 1
let SEEK_END = 2
let SEEK_SET = 0
let SHUT_RD = 0
let SHUT_RDWR = 2
let SHUT_WR = 1
let SOCK_CLOEXEC = 0x80000
let SOCK_DGRAM = 2
let SOCK_NONBLOCK = 0x800
let SOCK_RAW = 3
let SOCK_STREAM = 1
let SOL_SOCKET = 1
let SO_BROADCAST = 6
let SO_ERROR = 4
let SO_KEEPALIVE = 9
let SO_LINGER = 13
let SO_RCVBUF = 8
let SO_REUSEADDR = 2
let SO_REUSEPORT = 15
let SO_SNDBUF = 7
let STATX_BASIC_STATS = 0x7FF
let STATX_BTIME = 0x800
let S_IFDIR = 0x4000
let S_IFLNK = 0xA000
let S_IFMT = 0xF000
let S_IFREG = 0x8000
let TCP_NODELAY = 1
let WNOHANG = 0x00000001

type extern Dirent {
  let @d_ino: UInt64
  let @d_off: UInt64
  let @d_reclen: UInt16
  let @d_type: UInt8
}

type extern StatxBuf {
  let @stx_mask: UInt32
  let @stx_blksize: UInt32
  let @stx_attributes: UInt64
  let @stx_nlink: UInt32
  let @stx_uid: UInt32
  let @stx_gid: UInt32
  let @stx_mode: UInt16
  let @__pad0: UInt16
  let @stx_ino: UInt64
  let @stx_size: UInt64
  let @stx_blocks: UInt64
  let @stx_attributes_mask: UInt64
  let @stx_atime: StatxTimestamp
  let @stx_btime: StatxTimestamp
  let @stx_ctime: StatxTimestamp
  let @stx_mtime: StatxTimestamp
  let @stx_rdev_major: UInt32
  let @stx_rdev_minor: UInt32
  let @stx_dev_major: UInt32
  let @stx_dev_minor: UInt32
  let @stx_mnt_id: UInt64
  let @stx_dio_mem_align: UInt32
  let @stx_dio_offset_align: UInt32
  let @__pad1: UInt64
  let @__pad2: UInt64
  let @__pad3: UInt64
  let @__pad4: UInt64
  let @__pad5: UInt64
  let @__pad6: UInt64
  let @__pad7: UInt64
  let @__pad8: UInt64
  let @__pad9: UInt64
  let @__pad10: UInt64
  let @__pad11: UInt64
  let @__pad12: UInt64
}

type extern StatxTimestamp {
  let @tv_sec: Int64
  let @tv_nsec: UInt32
  let @__pad0: Int32
}

type extern SigSet {
  let @__val0: UInt64
  let @__val1: UInt64
  let @__val2: UInt64
  let @__val3: UInt64
  let @__val4: UInt64
  let @__val5: UInt64
  let @__val6: UInt64
  let @__val7: UInt64
  let @__val8: UInt64
  let @__val9: UInt64
  let @__val10: UInt64
  let @__val11: UInt64
  let @__val12: UInt64
  let @__val13: UInt64
  let @__val14: UInt64
  let @__val15: UInt64
}

type extern PosixSpawnAttrs {
  let @__flags: Int16
  let @__pgrp: Int32
  let @__sd: SigSet
  let @__ss: SigSet
  let @__sp: Int32
  let @__policy: Int32
  let @__cgroup: Int32
  let @__pad0: Int32
  let @__pad1: Int32
  let @__pad2: Int32
  let @__pad3: Int32
  let @__pad4: Int32
  let @__pad5: Int32
  let @__pad6: Int32
  let @__pad7: Int32
  let @__pad8: Int32
  let @__pad9: Int32
  let @__pad10: Int32
  let @__pad11: Int32
  let @__pad12: Int32
  let @__pad13: Int32
  let @__pad14: Int32
}

type extern PosixSpawnFileActions {
  let @__allocated: Int32
  let @__used: Int32
  let @__actions: Pointer[UInt8]
  let @__pad0: Int32
  let @__pad1: Int32
  let @__pad2: Int32
  let @__pad3: Int32
  let @__pad4: Int32
  let @__pad5: Int32
  let @__pad6: Int32
  let @__pad7: Int32
  let @__pad8: Int32
  let @__pad9: Int32
  let @__pad10: Int32
  let @__pad11: Int32
  let @__pad12: Int32
  let @__pad13: Int32
  let @__pad14: Int32
  let @__pad15: Int32
}

type extern Pipes {
  let @reader: Int32
  let @writer: Int32
}

type extern SockAddrIn {
  let @sin_family: UInt16
  let @sin_port: UInt16
  let @sin_addr: UInt32
  let @sin_zero: UInt64
}

type extern SockAddrIn6 {
  let @sin6_family: UInt16
  let @sin6_port: UInt16
  let @sin6_flowinfo: UInt32
  let @sin6_addr0: UInt32
  let @sin6_addr1: UInt32
  let @sin6_addr2: UInt32
  let @sin6_addr3: UInt32
  let @sin6_scope_id: UInt32
}

type extern SockAddrUn {
  let @sun_family: UInt16
  let @sun_path0: UInt8
  let @sun_path1: UInt8
  let @sun_path2: UInt8
  let @sun_path3: UInt8
  let @sun_path4: UInt8
  let @sun_path5: UInt8
  let @sun_path6: UInt8
  let @sun_path7: UInt8
  let @sun_path8: UInt8
  let @sun_path9: UInt8
  let @sun_path10: UInt8
  let @sun_path11: UInt8
  let @sun_path12: UInt8
  let @sun_path13: UInt8
  let @sun_path14: UInt8
  let @sun_path15: UInt8
  let @sun_path16: UInt8
  let @sun_path17: UInt8
  let @sun_path18: UInt8
  let @sun_path19: UInt8
  let @sun_path20: UInt8
  let @sun_path21: UInt8
  let @sun_path22: UInt8
  let @sun_path23: UInt8
  let @sun_path24: UInt8
  let @sun_path25: UInt8
  let @sun_path26: UInt8
  let @sun_path27: UInt8
  let @sun_path28: UInt8
  let @sun_path29: UInt8
  let @sun_path30: UInt8
  let @sun_path31: UInt8
  let @sun_path32: UInt8
  let @sun_path33: UInt8
  let @sun_path34: UInt8
  let @sun_path35: UInt8
  let @sun_path36: UInt8
  let @sun_path37: UInt8
  let @sun_path38: UInt8
  let @sun_path39: UInt8
  let @sun_path40: UInt8
  let @sun_path41: UInt8
  let @sun_path42: UInt8
  let @sun_path43: UInt8
  let @sun_path44: UInt8
  let @sun_path45: UInt8
  let @sun_path46: UInt8
  let @sun_path47: UInt8
  let @sun_path48: UInt8
  let @sun_path49: UInt8
  let @sun_path50: UInt8
  let @sun_path51: UInt8
  let @sun_path52: UInt8
  let @sun_path53: UInt8
  let @sun_path54: UInt8
  let @sun_path55: UInt8
  let @sun_path56: UInt8
  let @sun_path57: UInt8
  let @sun_path58: UInt8
  let @sun_path59: UInt8
  let @sun_path60: UInt8
  let @sun_path61: UInt8
  let @sun_path62: UInt8
  let @sun_path63: UInt8
  let @sun_path64: UInt8
  let @sun_path65: UInt8
  let @sun_path66: UInt8
  let @sun_path67: UInt8
  let @sun_path68: UInt8
  let @sun_path69: UInt8
  let @sun_path70: UInt8
  let @sun_path71: UInt8
  let @sun_path72: UInt8
  let @sun_path73: UInt8
  let @sun_path74: UInt8
  let @sun_path75: UInt8
  let @sun_path76: UInt8
  let @sun_path77: UInt8
  let @sun_path78: UInt8
  let @sun_path79: UInt8
  let @sun_path80: UInt8
  let @sun_path81: UInt8
  let @sun_path82: UInt8
  let @sun_path83: UInt8
  let @sun_path84: UInt8
  let @sun_path85: UInt8
  let @sun_path86: UInt8
  let @sun_path87: UInt8
  let @sun_path88: UInt8
  let @sun_path89: UInt8
  let @sun_path90: UInt8
  let @sun_path91: UInt8
  let @sun_path92: UInt8
  let @sun_path93: UInt8
  let @sun_path94: UInt8
  let @sun_path95: UInt8
  let @sun_path96: UInt8
  let @sun_path97: UInt8
  let @sun_path98: UInt8
  let @sun_path99: UInt8
  let @sun_path100: UInt8
  let @sun_path101: UInt8
  let @sun_path102: UInt8
  let @sun_path103: UInt8
  let @sun_path104: UInt8
  let @sun_path105: UInt8
  let @sun_path106: UInt8
  let @sun_path107: UInt8
}

type extern SockAddr {
  let @sa_family: UInt16
  let @sa_data0: UInt8
  let @sa_data1: UInt8
  let @sa_data2: UInt8
  let @sa_data3: UInt8
  let @sa_data4: UInt8
  let @sa_data5: UInt8
  let @sa_data6: UInt8
  let @sa_data7: UInt8
  let @sa_data8: UInt8
  let @sa_data9: UInt8
  let @sa_data10: UInt8
  let @sa_data11: UInt8
  let @sa_data12: UInt8
  let @sa_data13: UInt8
}

type extern SockAddrStorage {
  let @ss_family: UInt16
  let @__pad0: UInt16
  let @__pad1: UInt32
  let @__val0: UInt64
  let @__val1: UInt64
  let @__val2: UInt64
  let @__val3: UInt64
  let @__val4: UInt64
  let @__val5: UInt64
  let @__val6: UInt64
  let @__val7: UInt64
  let @__val8: UInt64
  let @__val9: UInt64
  let @__val10: UInt64
  let @__val11: UInt64
  let @__val12: UInt64
  let @__val13: UInt64
  let @__val14: UInt64
}

type extern AddrInfo {
  let @ai_flags: Int32
  let @ai_family: Int32
  let @ai_socktype: Int32
  let @ai_protocol: Int32
  let @ai_addrlen: UInt64
  let @ai_addr: Pointer[SockAddr]
  let @ai_canonname: Pointer[UInt8]
  let @ai_next: Pointer[AddrInfo]
}

fn extern fchmod(fd: Int32, mode: UInt16) -> Int32

fn extern syscall(number: Int32, ...) -> Int32

fn extern opendir(path: Pointer[UInt8]) -> Pointer[UInt8]

fn extern readdir(stream: Pointer[UInt8]) -> Pointer[Dirent]

fn extern fsync(fd: Int32) -> Int32

fn extern sendfile(
  out: Int32,
  input: Int32,
  offset: Pointer[Int64],
  count: UInt64,
) -> Int64

fn extern copy_file_range(
  input: Int32,
  off_in: Pointer[Int64],
  out: Int32,
  off_out: Pointer[Int64],
  len: UInt64,
  flags: UInt32,
) -> Int64

fn extern pipe2(pipes: Pointer[Pipes], flags: Int32) -> Int32

fn extern __errno_location -> Pointer[Int32]

fn extern accept4(
  socket: Int32,
  addr: Pointer[SockAddr],
  size: Pointer[UInt32],
  flags: Int32,
) -> Int32

fn extern getrandom(buf: Pointer[UInt8], size: UInt64, flags: Int32) -> Int

fn inline flush(fd: Int32) -> Int32 {
  fsync(fd)
}

fn inline dirent_type(pointer: Pointer[Dirent]) -> Int {
  pointer.d_type as Int
}

fn inline dirent_name(pointer: Pointer[Dirent]) -> Pointer[UInt8] {
  pointer as Int + 19 as Pointer[UInt8]
}

# statx() has been available in glibc since version 2.28 (August 2018), but for
# musl it's only available starting version 1.2.5 (February 2024). Meanwhile,
# the system call is available since Linux 4.11 (April 2017). Rather than try to
# use statx() with some sort of fallback (e.g. when using an older version of
# musl), we just use the system call directly.
fn inline statx(
  fd: Int32,
  name: String,
  flags: Int,
  mask: Int,
  buf: Pointer[StatxBuf],
) -> Int {
  syscall(
    arch.SYS_statx as Int32,
    fd,
    name.pointer,
    flags as Int32,
    mask as UInt32,
    buf,
  )
    as Int
}

fn inline pipes -> Result[(Int32, Int32), Error] {
  let pipes = Pipes()

  if pipe2(mut pipes, O_CLOEXEC as Int32) as Int != 0 {
    throw Error.last_os_error
  }

  Result.Ok((pipes.reader, pipes.writer))
}

fn inline errno_location -> Pointer[Int32] {
  __errno_location
}

fn inline sockaddr_in_size -> Int {
  _INKO.size_of_type_name(SockAddrIn)
}

fn inline sockaddr_in6_size -> Int {
  _INKO.size_of_type_name(SockAddrIn6)
}

fn inline sockaddr_un_size -> Int {
  _INKO.size_of_type_name(SockAddrUn)
}

fn inline sockaddr_un_name_offset -> Int {
  2
}

fn inline unix_socket_path_limit -> Int {
  108
}

fn inline sockaddr_storage_size -> Int {
  _INKO.size_of_type_name(SockAddrStorage)
}
