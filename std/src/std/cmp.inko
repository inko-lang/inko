# Types for for common comparison operations, such as equality, ordering,
# inclusion, and others.
import std::fmt::(Format, Formatter)

# A type describing the ordering between two values.
class pub enum Ordering {
  case Less
  case Equal
  case Greater
}

impl Equal[Ordering] for Ordering {
  fn pub ==(other: ref Ordering) -> Bool {
    match self {
      case Less -> match other {
        case Less -> true
        case _ -> false
      }
      case Equal -> match other {
        case Equal -> true
        case _ -> false
      }
      case Greater -> match other {
        case Greater -> true
        case _ -> false
      }
    }
  }
}

impl Format for Ordering {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Less -> formatter.write('Less')
      case Equal -> formatter.write('Equal')
      case Greater -> formatter.write('Greater')
    }
  }
}

# A type that can be compared to another type for a sort-order.
trait pub Compare[T] {
  # Returns the ordering between `self` and the given argument.
  #
  # The returned value should be as follows:
  #
  # | Expression | Return value
  # |:-----------|:------------
  # | `a == b`   | `Ordering.Equal`
  # | `a > b`    | `Ordering.Greater`
  # | `a < b`    | `Ordering.Less`
  fn pub cmp(other: ref T) -> Ordering

  # Returns `true` if `self` is lower than the given argument.
  fn pub <(other: ref T) -> Bool {
    match cmp(other) {
      case Less -> true
      case _ -> false
    }
  }

  # Returns `true` if `self` is lower than or equal to the given argument.
  fn pub <=(other: ref T) -> Bool {
    match cmp(other) {
      case Less or Equal -> true
      case _ -> false
    }
  }

  # Returns `true` if `self` is greater than the given argument.
  fn pub >(other: ref T) -> Bool {
    match cmp(other) {
      case Greater -> true
      case _ -> false
    }
  }

  # Returns `true` if `self` is equal to or greater than the given argument.
  fn pub >=(other: ref T) -> Bool {
    match cmp(other) {
      case Greater or Equal -> true
      case _ -> false
    }
  }
}

# A type that can be compared for equality.
trait pub Equal[T] {
  # Returns `True` if `self` and the given object are equal to each other.
  #
  # This operator is used to perform structural equality. This means two objects
  # residing in different memory locations may be considered equal, provided
  # their structure is equal. For example, two different arrays may be
  # considered to have structural equality if they contain the exact same
  # values.
  fn pub ==(other: ref T) -> Bool

  # Returns `True` if `self` and the given object are not equal to each other.
  fn pub !=(other: ref T) -> Bool {
    (self == other).false?
  }
}

# A type that supports checking if a value is included in `self`.
trait pub Contains[T] {
  # Returns `true` if the given value is contained in `self`.
  fn pub contains?(value: ref T) -> Bool
}

# Returns the minimum of two values.
#
# # Examples
#
#     import std::cmp::(min)
#
#     min(10, 5) # => 5
fn pub min[T: Compare[T]](a: T, b: T) -> T {
  if a <= b { a } else { b }
}

# Returns the maximum of two values.
#
# # Examples
#
#     import std::cmp::(max)
#
#     max(10, 5) # => 10
fn pub max[T: Compare[T]](a: T, b: T) -> T {
  if a >= b { a } else { b }
}
