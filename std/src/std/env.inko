# Methods for inspecting the OS process' environment.
#
# This module provides methods for getting environment variables, the home
# directory, changing the working directory, etc.
#
# # Modifying variables
#
# Modifying the current process' environment variables isn't supported, as this
# can introduce race conditions, or even unsound/undefined behaviour depending
# on the underlying platform.
#
# Fortunately, the use-case for changing variables is rare and probably better
# served by using a sub process.
#
# For more information:
#
# - <https://github.com/chronotope/chrono/issues/499>
# - <https://github.com/rust-lang/rust/pull/24741>
# - <https://github.com/rust-lang/rust/issues/27970>
# - <https://github.com/rustsec/advisory-db/issues/926>
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.fs.path (Path)
import std.io (Error)
import std.string (PrimitiveString, ToString)
import std.sys.unix.env (self as sys) if unix

fn extern inko_env_arguments_size(state: Pointer[UInt8]) -> Int64

fn extern inko_env_argument(
  state: Pointer[UInt8],
  index: Int,
) -> PrimitiveString

fn extern inko_env_executable -> PrimitiveString

fn extern inko_env_get(
  state: Pointer[UInt8],
  name: PrimitiveString,
) -> PrimitiveString

fn extern inko_env_temp_directory -> PrimitiveString

fn extern inko_env_get_key(state: Pointer[UInt8], index: Int) -> PrimitiveString

fn extern inko_env_size(state: Pointer[UInt8]) -> Int64

# The architecture of the CPU the code is compiled for.
let pub ARCH = 'generated at compile-time'

# The operating system the code is compiled for.
let pub OS = 'generated at compile-time'

# The ABI of the operating system the code is compiled for.
let pub ABI = 'generated at compile-time'

# The compilation mode ("debug" or "release").
let pub MODE = 'generated at compile-time'

# An error that signals the lack of an environment variable.
type pub inline MissingVariable {
  # The variable that is missing.
  let pub @name: String

  # Returns a new `MissingVariable` to signal that the given variable is
  # missing.
  fn pub static new(name: String) -> Self {
    Self(name)
  }
}

impl ToString for MissingVariable {
  fn pub to_string -> String {
    "the environment variable '${@name}' is missing"
  }
}

impl Format for MissingVariable {
  fn pub fmt(formatter: mut Formatter) {
    let obj = formatter.object('MissingVariable')

    obj.field('name', @name)
    obj.finish
  }
}

impl Equal for MissingVariable {
  fn pub ==(other: ref Self) -> Bool {
    @name == other.name
  }
}

# Returns the value of an environment variable.
#
# If the environment variable is missing, a `MissingVariable` error is returned.
#
# # Examples
#
# ```inko
# import std.env
#
# env.get('HOME') # => Result.Ok('/home/alice')
# ```
fn pub get(name: String) -> Result[String, MissingVariable] {
  match inko_env_get(_INKO.state, name.to_primitive) {
    case { @size = 0 } -> Result.Error(MissingVariable.new(name))
    case v -> Result.Ok(String.from_primitive(v))
  }
}

# Returns all defined environment variables and their values.
#
# # Examples
#
# Obtaining all environment variables and their values:
#
# ```inko
# import std.env
#
# env.variables.get('HOME') # => Result.Ok('/home/alice')
# ```
fn pub variables -> Map[String, String] {
  let vars = Map.new
  let mut idx = 0
  let len = inko_env_size(_INKO.state) as Int

  while idx < len {
    let key = String.from_borrowed_primitive(inko_env_get_key(_INKO.state, idx))

    match get(key) {
      case Ok(val) -> {
        vars.set(key, val)
        nil
      }
      case _ -> {}
    }

    idx += 1
  }

  vars
}

# Returns the path to the current user's home directory.
#
# # Examples
#
# Obtaining the home directory of a user:
#
# ```inko
# import std.env
#
# env.home_directory # => Option.Some('/home/alice')
# ```
fn pub home_directory -> Option[Path] {
  # Rather than performing all sorts of magical incantations to get the home
  # directory, we're just going to require that HOME is set.
  #
  # If the home is explicitly set to an empty string we still ignore it, because
  # there's no scenario in which Some("") is useful.
  match get('HOME') {
    case Ok(v) if v.size > 0 -> Option.Some(Path.new(v))
    case _ -> Option.None
  }
}

# Returns the path to the temporary directory.
#
# # Examples
#
# Obtaining the temporary directory:
#
# ```inko
# import std.env
#
# env.temporary_directory # => '/tmp'
# ```
fn pub temporary_directory -> Path {
  Path.new(String.from_primitive(inko_env_temp_directory))
}

# Returns the current working directory.
#
# This method will return an `Error` if we failed to get the directory. Possible
# causes for this could be:
#
# 1. The directory no longer exists.
# 1. You do not have the permissions to access the directory.
#
# # Examples
#
# Obtaining the current working directory:
#
# ```inko
# import std.env
#
# env.working_directory # => Result.Ok('/home/alice/example'.to_path)
# ```
fn pub working_directory -> Result[Path, Error] {
  sys.working_directory
}

# Changes the current working directory to the given directory.
#
# # Examples
#
# Changing the current working directory:
#
# ```inko
# import std.env
#
# env.working_directory = '..'.to_path
# ```
fn pub working_directory=(directory: ref Path) -> Result[Nil, Error] {
  sys.working_directory = directory
}

# Returns an `Array` containing all the commandline arguments passed to the
# current program.
#
# # Examples
#
# ```inko
# import std.env
#
# # Assuming this program is executed using `inko foo.inko first second`:
# env.arguments # => ['first', 'second']
# ```
fn pub arguments -> Array[String] {
  let len = inko_env_arguments_size(_INKO.state) as Int
  let mut idx = 0
  let args = []

  while idx < len {
    let raw = inko_env_argument(_INKO.state, idx)

    args.push(String.from_borrowed_primitive(raw))
    idx += 1
  }

  args
}

# Returns the path to the current executable.
#
# If the program is executed through a symbolic link, the returned path may
# point to the symbolic link instead of the executable the link points to.
fn pub executable -> Result[Path, Error] {
  match inko_env_executable {
    case { @size = -1, @bytes = err } -> {
      Result.Error(Error.from_os_error(err as Int))
    }
    case v -> Result.Ok(Path.new(String.from_primitive(v)))
  }
}
