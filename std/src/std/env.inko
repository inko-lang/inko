# Methods for inspecting the OS process' environment.
#
# This module provides methods for getting environment variables, the home
# directory, changing the working directory, etc.
#
# # Modifying variables
#
# Modifying the current process' environment variables isn't supported, as this
# can introduce race conditions, or even unsound/undefined behaviour depending
# on the underlying platform.
#
# Fortunately, the use-case for changing variables is rare and probably better
# served by using a sub process.
#
# For more information:
#
# - https://github.com/chronotope/chrono/issues/499
# - https://github.com/rust-lang/rust/pull/24741
# - https://github.com/rust-lang/rust/issues/27970
# - https://github.com/rustsec/advisory-db/issues/926
import std::fs::path::Path
import std::io::Error
import std::string::ToString

class extern AnyResult {
  let @tag: Int
  let @value: Any
}

fn extern inko_env_arguments_length(state: Pointer[Int8]) -> Int64
fn extern inko_env_argument(state: Pointer[Int8], index: Int) -> String
fn extern inko_env_executable(state: Pointer[Int8]) -> AnyResult
fn extern inko_env_get(state: Pointer[Int8], name: String) -> AnyResult
fn extern inko_env_get_working_directory(state: Pointer[Int8]) -> AnyResult
fn extern inko_env_home_directory(state: Pointer[Int8]) -> AnyResult
fn extern inko_env_set_working_directory(path: String) -> AnyResult
fn extern inko_env_temp_directory(state: Pointer[Int8]) -> String
fn extern inko_env_get_key(state: Pointer[Int8], index: Int) -> String
fn extern inko_env_length(state: Pointer[Int8]) -> Int64

# The architecture of the CPU the code is compiled for.
let pub ARCH = _INKO_ARCH

# The operating system the code is compiled for.
let pub OS = _INKO_OS

# The ABI of the operating system the code is compiled for.
let pub ABI = _INKO_ABI

# Returns an optional value of an environment variable.
#
# # Examples
#
# Obtaining the value of an environment variable:
#
#     import std::env
#
#     env.opt('HOME') # => Option.Some('/home/alice')
fn pub opt(name: String) -> Option[String] {
  match inko_env_get(_INKO.state, name) {
    case { @tag = 0, @value = val } -> Option.Some(val as String)
    case _ -> Option.None
  }
}

# Returns all defined environment variables and their values.
#
# # Examples
#
# Obtaining all environment variables and their values:
#
#     import std::env
#
#     env.variables.opt('HOME') # => Option.Some('/home/alice')
fn pub variables -> Map[String, String] {
  let vars = Map.new
  let mut idx = 0
  let len = inko_env_length(_INKO.state) as Int

  while idx < len {
    let key = inko_env_get_key(_INKO.state, idx)

    match inko_env_get(_INKO.state, key) {
      case { @tag = 0, @value = val } -> vars.set(key, val as String)
      case _ -> {}
    }

    idx += 1
  }

  vars
}

# Returns the path to the current user's home directory.
#
# # Examples
#
# Obtaining the home directory of a user:
#
#     import std::env
#
#     env.home_directory # => Option.Some('/home/alice')
fn pub home_directory -> Option[Path] {
  match inko_env_home_directory(_INKO.state) {
    case { @tag = 0, @value = val } -> Option.Some(Path.new(val as String))
    case _ -> Option.None
  }
}

# Returns the path to the temporary directory.
#
# # Examples
#
# Obtaining the temporary directory:
#
#     import std::env
#
#     env.temporary_directory # => '/tmp'
fn pub temporary_directory -> Path {
  inko_env_temp_directory(_INKO.state).into_path
}

# Returns the current working directory.
#
# This method will return an `Error` if we failed to get the directory. Possible
# causes for this could be:
#
# 1. The directory no longer exists.
# 1. You do not have the permissions to access the directory.
#
# # Examples
#
# Obtaining the current working directory:
#
#     import std::env
#
#     env.working_directory # => Result.Ok('/home/alice/example')
fn pub working_directory -> Result[Path, Error] {
  match inko_env_get_working_directory(_INKO.state) {
    case { @tag = 0, @value = val } -> Result.Ok(Path.new(val as String))
    case { @tag = _, @value = err } -> Result.Error(
      Error.from_os_error(err as Int)
    )
  }
}

# Changes the current working directory to the given directory.
#
# # Examples
#
# Changing the current working directory:
#
#     import std::env
#
#     env.working_directory = '..'
fn pub working_directory=(directory: ref ToString) -> Result[Nil, Error] {
  match inko_env_set_working_directory(directory.to_string) {
    case { @tag = 1, @value = _ } -> Result.Ok(nil)
    case { @tag = _, @value = err } -> Result.Error(
      Error.from_os_error(err as Int)
    )
  }
}

# Returns an `Array` containing all the commandline arguments passed to the
# current program.
#
# # Examples
#
#     import std::env
#
#     # Assuming this program is executed using `inko foo.inko first second`:
#     env.arguments # => ['first', 'second']
fn pub arguments -> Array[String] {
  let len = inko_env_arguments_length(_INKO.state) as Int
  let mut idx = 0
  let args = []

  while idx < len {
    args.push(inko_env_argument(_INKO.state, idx))
    idx += 1
  }

  args
}

# Returns the path to the current executable.
#
# If the program is executed through a symbolic link, the returned path may
# point to the symbolic link instead of the executable the link points to.
fn pub executable -> Result[Path, Error] {
  match inko_env_executable(_INKO.state) {
    case { @tag = 0, @value = val } -> Result.Ok(Path.new(val as String))
    case { @tag = _, @value = err } -> Result.Error(
      Error.from_os_error(err as Int)
    )
  }
}
