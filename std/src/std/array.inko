# An ordered, integer-indexed generic collection of values.
import std.alloc
import std.clone (Clone)
import std.cmp (Compare, Contains, Equal, Ordering, max)
import std.drop (Drop, drop as drop_value)
import std.fmt (Format, Formatter)
import std.hash (Hash, Hasher)
import std.iter (Iter, Stream)
import std.option (Option)
import std.ptr
import std.rand (Random)
import std.string (ToString)

# The capacity to use when resizing an array for the first time.
let START_CAPACITY = 4

fn inline stable_sort[T](
  array: mut Array[T],
  compare: mut fn (ref T, ref T) -> Bool,
) {
  let len = array.size

  # The algorithm here is the recursive merge sort algorithm. While faster
  # algorithms exist (e.g. Timsort, at least in certain cases), merge sort is
  # the easiest to implement and still offers good performance.
  if len <= 1 { return }

  # We don't set a size for `tmp` so we don't drop any of the temporary
  # values in it, as that would result in `self` being left with invalid
  # values. This works because merge_sort() doesn't perform any bounds checking.
  let tmp: Array[T] = Array.with_capacity(len)

  len.times(fn (i) { tmp.write_to(i, array.read_from(i)) })

  merge_sort(tmp, array, start: 0, end: len, compare: compare)
}

fn merge_sort[T](
  a: mut Array[T],
  b: mut Array[T],
  start: Int,
  end: Int,
  compare: mut fn (ref T, ref T) -> Bool,
) {
  if end - start <= 1 { return }

  # https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html
  let mid = start.wrapping_add(end) >>> 1

  merge_sort(b, a, start, mid, compare)
  merge_sort(b, a, mid, end, compare)

  let mut i = start
  let mut j = mid
  let mut k = start

  while k < end {
    if
      i < mid
        and (j >= end or compare.call(a.get_unchecked(i), a.get_unchecked(j)))
    {
      b.write_to(k, a.read_from(i))
      i += 1
    } else {
      b.write_to(k, a.read_from(j))
      j += 1
    }

    k += 1
  }
}

fn invalid_capacity(size: Int) -> Never {
  panic('the capacity (${size}) must be greater than or equal to zero')
}

# Checks if `index` is in the range of zero up to (but excluding) `size`.
#
# If the index is within the allowed bounds, a `Nil` is returned, otherwise an
# `OutOfBounds` error is returned.
fn pub inline check_bounds(index: Int, size: Int) -> Result[Nil, OutOfBounds] {
  if index >= 0 and index < size {
    Result.Ok(nil)
  } else {
    Result.Error(OutOfBounds.new(index, size))
  }
}

# An error that signals an index is out of bounds.
type pub copy OutOfBounds {
  # The index that is out of bounds.
  let pub @index: Int

  # The size of the collection.
  let pub @size: Int

  # Returns a new `OutOfBounds` using the given index and collection size.
  fn pub static new(index: Int, size: Int) -> Self {
    Self(index: index, size: size)
  }
}

impl ToString for OutOfBounds {
  fn pub to_string -> String {
    'the index ${@index} is out of bounds (size: ${@size})'
  }
}

impl Format for OutOfBounds {
  fn pub fmt(formatter: mut Formatter) {
    let obj = formatter.object('OutOfBounds')

    obj.field('index', @index)
    obj.field('size', @size)
    obj.finish
  }
}

impl Equal for OutOfBounds {
  fn pub ==(other: Self) -> Bool {
    @index == other.index and @size == other.size
  }
}

# An ordered, integer-indexed generic collection of values.
#
# Accessing values in an `Array` is a constant-time operation.
#
# Arrays are created using the array literal syntax, instead of using a method.
# Here's how you'd create an empty Array:
#
# ```inko
# []
# ```
#
# And here's how you'd create an Array with values:
#
# ```inko
# [10, 20, 30]
# ```
#
# All values in an array must be of the same type, and the array's value type is
# based on the type of the first value.
type builtin Array[T] {
  # The compiler depends on the order of these fields, so don't change it
  # without also updating the compiler.
  let mut @size: Int
  let mut @capacity: Int
  let mut @buffer: Pointer[T]

  # Returns a new `Array` with enough space for at least `size` values.
  #
  # # Panics
  #
  # This method panics of `size` if less than zero.
  fn pub static with_capacity(size: Int) -> Array[T] {
    if size < 0 { invalid_capacity(size) }

    Array(size: 0, capacity: size, buffer: alloc.resize(0 as Pointer[T], size))
  }

  # Returns an array filled with a certain amount of values.
  #
  # The `times` argument specifies how many times the `with` argument must
  # exist in the array.
  #
  # # Examples
  #
  # ```inko
  # Array.filled(with: 0, times: 4) # => [0, 0, 0, 0]
  # ```
  fn pub static filled[V: Clone](with: move V, times: Int) -> Array[move V] {
    if times == 0 { return [] }

    let array = with_capacity(times)
    let temp = ref with

    (times - 1).times(fn (_) { array.push(temp.clone) })
    array.push(with)
    array
  }

  # Reserves space for `size` additional values.
  #
  # The actual space reserved may be greater to prevent frequent reallocations.
  # After calling this method, the capacity will be greater than or equal to
  # `self.size + size`.
  #
  # If the capacity is great enough or the given size is less than zero, this
  # method does nothing.
  fn pub mut reserve(size: Int) {
    if @capacity - @size >= size { return }

    @capacity = max(@capacity * 2, @capacity + size)
    @buffer = alloc.resize(@buffer, @capacity)
  }

  # Reserves space for exactly `size` additional values.
  #
  # Unlike `Array.reserve`, this method won't allocate more than the given
  # amount.
  #
  # If there's already enough space for `size` extra values, this method does
  # nothing.
  fn pub mut reserve_exact(size: Int) {
    if @capacity - @size >= size { return }

    @capacity = @capacity + size
    @buffer = alloc.resize(@buffer, @capacity)
  }

  # Removes all values in the Array.
  #
  # # Examples
  #
  # ```inko
  # let array = [10, 20, 30]
  #
  # array.clear
  # array.empty? # => true
  # ```
  fn pub mut clear {
    let mut index = 0
    let max = @size

    while index < max { read_from(index := index + 1) }

    @size = 0
  }

  # Pushes a value to the back of the Array.
  #
  # # Examples
  #
  # Pushing a value into an Array:
  #
  # ```inko
  # let array = []
  #
  # array.push(10) # => Nil
  # array.get(0)   # => 10
  # ```
  fn pub mut push(value: T) {
    reserve(1)
    write_to(@size, value)
    @size += 1
  }

  # Removes a value from the back of the Array, returning the removed value.
  #
  # If no value was found, a None is returned instead.
  #
  # # Examples
  #
  # Popping an existing value:
  #
  # ```inko
  # let array = [10]
  #
  # array.pop    # => Option.Some(10)
  # array.empty? # => true
  # ```
  #
  # Popping a value when the Array is empty:
  #
  # ```inko
  # let array = []
  #
  # array.pop # => Option.None
  # ```
  fn pub mut pop -> Option[T] {
    if @size == 0 { return Option.None }

    @size -= 1
    Option.Some(read_from(@size))
  }

  # Removes the value at the given index, returning the removed value.
  #
  # Values to the right of the index are shifted to the left.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # Removing an existing value will result in the value being removed from the
  # Array and returned:
  #
  # ```inko
  # let array = [10]
  #
  # array.remove_at(0) # => Result.Ok(10)
  # array.empty?       # => true
  # ```
  fn pub mut remove_at(index: Int) -> Result[T, OutOfBounds] {
    let len = size

    try check_bounds(index, len)

    let addr = address_of(index)
    let val = addr.0

    alloc.copy(from: ptr.add(addr, 1), to: addr, size: len - index - 1)
    @size = len - 1
    Result.Ok(val)
  }

  # Returns an immutable borrow of the value at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # ```inko
  # let numbers = [10, 20]
  #
  # numbers.get(0)  # => Result.Ok(10)
  # numbers.get(10) # => Result.Error(OutOfBounds(...))
  # ```
  fn pub inline get(index: Int) -> Result[ref T, OutOfBounds] {
    try check_bounds(index, @size)
    Result.Ok(get_unchecked(index))
  }

  # Stores a value at the given index.
  #
  # If a value is already present at the given index, it's dropped before the
  # new value overwrites it.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let array = []
  #
  # array.set(0, 10)
  # array # => [10]
  # ```
  fn pub mut set(index: Int, value: T) {
    check_bounds(index, @size).or_panic
    drop_value(read_from(index))
    write_to(index, value)
  }

  # Inserts the value at the given index, returning the old value.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let numbers = [10, 20, 30]
  #
  # numbers.swap(index: 1, with: 40) # => 20
  # numbers                          # => [10, 40, 30]
  # ```
  fn pub mut swap(index: Int, with: T) -> T {
    check_bounds(index, @size).or_panic

    let old = read_from(index)

    write_to(index, with)
    old
  }

  # Swaps the values at the given indexes.
  #
  # # Panics
  #
  # This method panics if `index` or `with` is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let numbers = [10, 20, 30]
  #
  # numbers.swap_indexes(index: 0, with: 2)
  #
  # numbers # => [30, 20, 10]
  # ```
  fn pub mut swap_indexes(index: Int, with: Int) {
    check_bounds(index, @size).or_panic
    check_bounds(with, @size).or_panic

    let a = read_from(index)
    let b = read_from(with)

    write_to(index, b)
    write_to(with, a)
  }

  # Returns an iterator that yields immutable references to the values in
  # `self`.
  fn pub iter -> Stream[ref T] {
    let mut idx = 0

    Stream.new(fn move {
      if idx < @size {
        Option.Some(get_unchecked(idx := idx + 1))
      } else {
        Option.None
      }
    })
  }

  # Returns an iterator that moves the values out of `self`.
  #
  # # Examples
  #
  # ```inko
  # let numbers = [10, 20, 30]
  # let iter = numbers.into_iter
  #
  # iter.next # => Option.Some(10)
  # iter.next # => Option.Some(20)
  # iter.next # => Option.Some(30)
  # iter.next # => Option.None
  # ```
  fn pub move into_iter -> IntoIter[T] {
    IntoIter(array: self, index: 0)
  }

  # Returns an `Iter` that iterates over all values in `self` in reverse
  # order.
  #
  # # Examples
  #
  # Iterating over an `Array` in reverse order:
  #
  # ```inko
  # let numbers = [10, 20, 30]
  # let iter = numbers.reverse_iter
  #
  # iter.next # => Option.Some(30)
  # iter.next # => Option.Some(20)
  # iter.next # => Option.Some(10)
  # iter.next # => Option.None
  # ```
  fn pub reverse_iter -> Stream[ref T] {
    let mut index = size - 1

    Stream.new(fn move {
      if index > -1 { get(index := index - 1).ok } else { Option.None }
    })
  }

  # Appends the values of the given `Array` to `self`.
  #
  # # Examples
  #
  # Appending one `Array` to another:
  #
  # ```inko
  # let numbers = [10, 20, 30]
  #
  # numbers.append([40, 50])
  #
  # numbers.size # => 5
  # ```
  fn pub mut append(other: Array[T]) {
    let len = other.size

    if len == 0 { return }

    reserve_exact(len)

    let tail = ptr.add(@buffer, @size)

    alloc.copy(other.pointer, tail, len)
    @size += len

    # This is necessary such that when `other` is dropped, we don't drop the
    # values that have been moved into `self`.
    other.size = 0
  }

  # Returns the number of values in `self`.
  #
  # # Examples
  #
  # Getting the size of an empty Array:
  #
  # ```inko
  # [].size # => 0
  # ```
  #
  # Getting the size of an Array with values:
  #
  # ```inko
  # [10].size # => 1
  # ```
  fn pub size -> Int {
    @size
  }

  # Returns the number of values that can be stored in `self` before `self`
  # needs to be resized.
  #
  # # Examples
  #
  # ```inko
  # Array.with_capacity(2).capacity # => 2
  # ```
  fn pub capacity -> Int {
    @capacity
  }

  # Returns `true` if `self` is empty.
  #
  # # Examples
  #
  # ```inko
  # [10].empty? # => false
  # [].empty?   # => true
  # ```
  fn pub empty? -> Bool {
    @size == 0
  }

  # Sorts the values in `self` such that they are in a random order.
  #
  # The algorithm used by this method is Sattolo's algorithm. Some more details
  # on this are found here:
  #
  # - <https://en.wikipedia.org/wiki/Fisher–Yates_shuffle#Sattolo's_algorithm>
  # - <https://danluu.com/sattolo/>
  # - <https://rosettacode.org/wiki/Sattolo_cycle>
  #
  # # Examples
  #
  # ```inko
  # import std.rand (Random)
  #
  # let rng = Random.new
  # let nums = [10, 20]
  #
  # nums.shuffle(rng)
  # nums # => [20, 10]
  # ```
  fn pub mut shuffle(rng: mut Random) {
    let mut swap = size - 1

    while swap > 0 {
      swap_indexes(swap, with: rng.int_between(min: 0, max: swap))
      swap -= 1
    }
  }

  # Reverses `self` in-place
  #
  # # Examples
  #
  # ```inko
  # let a = [10, 20, 30]
  #
  # a.reverse
  #
  # a # => [30, 20, 10]
  # ```
  fn pub mut reverse {
    let mut a = 0
    let mut b = @size - 1

    while a < b {
      let a_val = read_from(a)
      let b_val = read_from(b)

      write_to(b, a_val)
      write_to(a, b_val)
      a += 1
      b -= 1
    }
  }

  # Returns an immutable reference to the last value in `self`.
  #
  # # Examples
  #
  # ```inko
  # [].last       # => Option.None
  # [10, 20].last # => Option.Some(20)
  # ```
  fn pub last -> Option[ref T] {
    get(size - 1).ok
  }

  # Inserts the value at the given index, shifting all values after it to the
  # right.
  #
  # # Panics
  #
  # This method panics if `index` is out of bounds.
  #
  # # Examples
  #
  # Inserting a value at the start:
  #
  # ```inko
  # let nums = [10, 20]
  #
  # nums.insert(0, 30)
  # nums # => [30, 10, 20]
  # ```
  #
  # Inserting a value at the end:
  #
  # ```inko
  # let nums = [10, 20]
  #
  # nums.insert(2, 30)
  # nums # => [10, 20, 30]
  # ```
  fn pub mut insert(index: Int, value: T) {
    if index < 0 or index > @size {
      panic(OutOfBounds.new(index, @size).to_string)
    }

    reserve(1)

    # Shift to the right if the insertion isn't at the end of the array. If we
    # have values like this:
    #
    #     [A, B, C, D]
    #
    # And we want to insert at the index of B (index 1), this results in the
    # following values:
    #
    #     [A, B, B, C, D]
    #
    # We can then overwrite index 1 with the value to insert.
    if index < @size {
      let from = address_of(index)
      let to = address_of(index + 1)

      alloc.copy(from, to, size: @size - index)
    }

    write_to(index, value)
    @size += 1
  }

  # Sorts the values in `self` using a custom comparison closure.
  #
  # Like `Array.sort`, this method performs a stable sort.
  #
  # # Examples
  #
  # ```inko
  # let nums = [0, 3, 3, 5, 9, 1]
  #
  # nums.sort_by fn (a, b) { b.cmp(a) }
  # nums # => [9, 5, 3, 3, 1, 0]
  # ```
  fn pub mut sort_by(block: fn (ref T, ref T) -> Ordering) {
    stable_sort(self, fn (a, b) {
      match block.call(a, b) {
        case Less or Equal -> true
        case _ -> false
      }
    })
  }

  # Returns a raw pointer to the buffer of `self`.
  #
  # If `self` is empty, this returns `NULL`.
  fn inline pointer -> Pointer[T] {
    @buffer
  }

  fn inline get_unchecked(index: Int) -> ref T {
    _INKO.ref_move(read_from(index))
  }

  fn inline read_from(index: Int) -> T {
    address_of(index).0
  }

  fn inline mut write_to(index: Int, value: T) {
    address_of(index).0 = value
  }

  fn inline address_of(index: Int) -> Pointer[T] {
    let bytes = index.wrapping_mul(_INKO.size_of_type_name(T))

    (@buffer as Int).wrapping_add(bytes) as Pointer[T]
  }
}

impl Array if T: mut {
  # Returns a mutable borrow of the value at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # ```inko
  # let numbers = [10, 20]
  #
  # numbers.get_mut(0)  # => Result.Ok(10)
  # numbers.get_mut(10) # => Result.Error(OutOfBounds(...))
  # ```
  fn pub inline mut get_mut(index: Int) -> Result[mut T, OutOfBounds] {
    try check_bounds(index, @size)
    Result.Ok(get_unchecked_mut(index))
  }

  # Returns an iterator that yields mutable references to the values in `self`.
  fn pub mut iter_mut -> Stream[mut T] {
    let mut idx = 0

    Stream.new(fn move {
      if idx < @size {
        Option.Some(get_unchecked_mut(idx := idx + 1))
      } else {
        Option.None
      }
    })
  }

  # Returns a mutable reference to the last value in `self`.
  #
  # # Examples
  #
  # ```inko
  # [].last_mut       # => Option.None
  # [10, 20].last_mut # => Option.Some(20)
  # ```
  fn pub mut last_mut -> Option[mut T] {
    get_mut(size - 1).ok
  }

  fn inline mut get_unchecked_mut(index: Int) -> mut T {
    _INKO.mut_move(read_from(index))
  }
}

impl Drop for Array {
  fn mut drop {
    clear
    alloc.free(@buffer)
  }
}

impl Contains[T] for Array if T: Equal {
  # Returns `true` if `self` contains the given value.
  #
  # # Examples
  #
  # Checking if an `Array` contains a value:
  #
  # ```inko
  # [10, 20, 30].contains?(10) # => true
  # ```
  fn pub contains?(value: ref T) -> Bool {
    iter.any?(fn (ours) { ours == value })
  }
}

impl Clone for Array if T: Clone {
  fn pub clone -> Array[move T] {
    let len = @size
    let new = Array.with_capacity(len)
    let mut index = 0

    while index < len { new.push(get_unchecked(index := index + 1).clone) }

    new
  }
}

impl Equal for Array if T: Equal {
  # Returns `true` if `self` and the given `Array` are identical.
  #
  # # Examples
  #
  # Comparing two identical arrays:
  #
  # ```inko
  # [10, 20, 30] == [10, 20, 30] # => true
  # ```
  #
  # Comparing two arrays with a different size:
  #
  # ```inko
  # [10] == [10, 20] # => false
  # ```
  #
  # Comparing two arrays with the same size but with different values:
  #
  # ```inko
  # [10, 20] == [20, 10] # => false
  # ```
  fn pub ==(other: ref Array[T]) -> Bool {
    if @size != other.size { return false }

    let mut index = 0
    let max = @size

    while index < max {
      let ours = get(index)
      let theirs = other.get(index)

      if ours != theirs { return false }

      index += 1
    }

    true
  }
}

impl Hash for Array if T: Hash {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    let mut index = 0
    let len = @size

    while index < len { get_unchecked(index := index + 1).hash(hasher) }
  }
}

impl Format for Array if T: Format {
  fn pub fmt(formatter: mut Formatter) {
    let fmt = formatter.array

    for value in iter { fmt.value(value) }

    fmt.finish
  }
}

impl Array if T: Equal[ref T] {
  # Returns the index of `value` as a `Some` if present, otherwise it returns a
  # `None`.
  #
  # # Examples
  #
  # ```inko
  # [10, 20, 30].index_of(20) # => Option.Some(1)
  # [10, 20, 30].index_of(50) # => Option.None
  # ```
  fn pub index_of(value: ref T) -> Option[Int] {
    let mut idx = 0

    while idx < @size {
      if get_unchecked(idx) == value { return Option.Some(idx) }

      idx += 1
    }

    Option.None
  }
}

impl Array if T: Compare[T] {
  # Sorts the values in `self` in ascending order.
  #
  # This method performs a stable sort, meaning it maintains the relative order
  # of duplicate values.
  #
  # # Examples
  #
  # ```inko
  # let nums = [0, 3, 3, 5, 9, 1]
  #
  # nums.sort
  # nums # => [0, 1, 3, 3, 5, 9]
  # ```
  fn pub mut sort {
    stable_sort(self, fn (a, b) { a <= b })
  }
}

# An iterator that moves values out of an `Array`.
#
# When this iterator is dropped, any values not yet moved out of the `Array` are
# dropped.
type pub IntoIter[T] {
  let @array: Array[T]
  let mut @index: Int

  fn mut take_next -> T {
    @array.read_from(@index := @index + 1)
  }
}

impl Drop for IntoIter {
  fn mut drop {
    while @index < @array.size { take_next }

    # This is needed so we don't try to drop the values a second time when
    # dropping the array itself.
    @array.size = 0
  }
}

impl Iter[T] for IntoIter {
  fn pub mut next -> Option[T] {
    if @index < @array.size { Option.Some(take_next) } else { Option.None }
  }
}
