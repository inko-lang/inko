# Inclusive and exclusive ranges.
#
# There are three range types:
#
# - `Range`: a trait providing common behaviour for range types.
# - `InclusiveRange`: an inclusive range of integers.
# - `ExclusiveRang`: an exclusive range of integers.
#
# Ranges of arbitrary types aren't supported.
#
# # Creating ranges
#
# While you can create ranges using `InclusiveRange.new` and
# `ExclusiveRange.new`, an easier way of doing so is using `Int.to` and
# `Int.until` respectively. For example, to create an exclusive range from 1 to
# 10:
#
# ```inko
# 1.until(10)
# ```
#
# For more information refer to the documentation of `Int.to` and `Int.until`.
import std.clone (Clone)
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.hash (Hash, Hasher)
import std.iter (Stream)

# A range of integers.
trait pub Range: Hash + Format {
  # Returns the first value in the range.
  fn pub start -> Int

  # Returns the last value in the range.
  fn pub end -> Int

  # Returns `true` if the range is an inclusive range.
  fn pub inclusive? -> Bool

  # Returns the number of values in this range.
  fn pub size -> Int

  # Returns an iterator over the values in `self`.
  fn pub iter -> Stream[Int]

  # Returns `true` if the given argument resides in the range of `self`.
  #
  # # Examples
  #
  # ```inko
  # 1.to(10).contains?(5)  # => true
  # 1.to(10).contains?(10) # => true
  # ```
  fn pub contains?(value: Int) -> Bool

  # Moves `self` into an iterator.
  fn pub move into_iter -> Stream[Int] {
    iter
  }
}

# An inclusive range of integers.
type pub copy InclusiveRange {
  let @start: Int
  let @end: Int

  # Returns a new `InclusiveRange` over the given values.
  fn pub inline static new(start: Int, end: Int) -> InclusiveRange {
    InclusiveRange(start: start, end: end)
  }

  fn pub inline contains?(value: Int) -> Bool {
    @start <= value and value <= @end
  }
}

impl Clone for InclusiveRange {
  fn pub inline clone -> InclusiveRange {
    InclusiveRange(start: @start, end: @end)
  }
}

impl Range for InclusiveRange {
  fn pub inline start -> Int {
    @start
  }

  fn pub inline end -> Int {
    @end
  }

  fn pub inline inclusive? -> Bool {
    true
  }

  fn pub inline size -> Int {
    if @end >= @start { @end - @start + 1 } else { 0 }
  }

  fn pub iter -> Stream[Int] {
    let mut current = @start
    let end = @end

    Stream.new(fn move {
      if current <= end {
        Option.Some(current := current + 1)
      } else {
        Option.None
      }
    })
  }
}

impl Equal for InclusiveRange {
  # Returns `true` if `self` and `other` are identical.
  #
  # # Examples
  #
  # Comparing two identical ranges:
  #
  # ```inko
  # 1.to(10) == 1.to(10) # => true
  # ```
  #
  # Comparing two different ranges:
  #
  # ```inko
  # 1.to(10) == 1.to(5) # => false
  # ```
  fn pub inline ==(other: ref InclusiveRange) -> Bool {
    @start == other.start and @end == other.end
  }
}

impl Hash for InclusiveRange {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    @start.hash(hasher)
    @end.hash(hasher)
  }
}

impl Format for InclusiveRange {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('[')
    @start.fmt(formatter)
    formatter.write(' to ')
    @end.fmt(formatter)
    formatter.write(']')
  }
}

# An exclusive range of integers.
type pub copy ExclusiveRange {
  # The start value of the range.
  let @start: Int

  # The end value of the range.
  let @end: Int

  # Returns a new `ExclusiveRange` over the given values.
  fn pub inline static new(start: Int, end: Int) -> ExclusiveRange {
    ExclusiveRange(start: start, end: end)
  }
}

impl Clone for ExclusiveRange {
  fn pub inline clone -> ExclusiveRange {
    ExclusiveRange(start: @start, end: @end)
  }
}

impl Range for ExclusiveRange {
  fn pub inline start -> Int {
    @start
  }

  fn pub inline end -> Int {
    @end
  }

  fn pub inline inclusive? -> Bool {
    false
  }

  fn pub inline size -> Int {
    if @end >= @start { @end - @start } else { 0 }
  }

  fn pub iter -> Stream[Int] {
    let mut current = @start
    let end = @end

    Stream.new(fn move {
      if current < end {
        Option.Some(current := current + 1)
      } else {
        Option.None
      }
    })
  }

  fn pub inline contains?(value: Int) -> Bool {
    @start <= value and value < @end
  }
}

impl Equal for ExclusiveRange {
  # Returns `true` if `self` and `other` are identical.
  #
  # # Examples
  #
  # Comparing two identical ranges:
  #
  # ```inko
  # 1.until(10) == 1.until(10) # => true
  # ```
  #
  # Comparing two different ranges:
  #
  # ```inko
  # 1.until(10) == 1.until(5) # => false
  # ```
  fn pub inline ==(other: ref ExclusiveRange) -> Bool {
    @start == other.start and @end == other.end
  }
}

impl Hash for ExclusiveRange {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    @start.hash(hasher)
    @end.hash(hasher)
  }
}

impl Format for ExclusiveRange {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('[')
    @start.fmt(formatter)
    formatter.write(' until ')
    @end.fmt(formatter)
    formatter.write(']')
  }
}
