# Iterating over collections
#
# Iterators are objects that can be used to traverse collections such as an
# `Array` or a `Map`. Typically iterators are implemented in one of two
# ways:
#
# 1. Internal iterators: these kind of iterators take care of the iteration
#    process and operate using some kind of closure.
# 1. External iterators: these iterators use some kind of cursor stored
#    somewhere and require you to manually advance the iterator.
#
# Both have their benefits and drawbacks. Internal iterators are easy to
# implement and typically faster, as they don't require the allocation of
# additional data structures.
#
# External iterators can be composed together, suspended, and later resumed.
# External iterators can also be turned into internal iterators, while the
# inverse is not possible unless a language supports some form of coroutines or
# generators.
#
# Inko uses external iteration. To make it easier to write such iterators, it
# provides the `Stream` type, which can create iterators from a closure.
import std.option (Option)

# A generic iterator over a sequence of values of type `T`.
trait pub Iter[T] {
  # Returns the next value in the iterator.
  #
  # If a value is produced, it must be wrapped in a Some; otherwise a None is to
  # be returned.
  fn pub mut next -> Option[T]

  # Takes ownership of `self` and returns it.
  #
  # This method exists such that one can use a for loop with an existing
  # iterator, as `for` loops call `into_iter` on the collection to iterate over.
  fn pub move into_iter -> Self {
    self
  }

  # Returns an `Iter` that yields a tuple of the index and the iterator value.
  #
  # # Examples
  #
  # ```inko
  # let iter = [10, 20].into_iter.with_index
  #
  # iter.next # => Option.Some((0, 10))
  # iter.next # => Option.Some((1, 20))
  # ```
  fn pub move with_index -> Stream[(Int, T)] {
    let mut index = 0

    map(fn move (val) { (index := index + 1, val) })
  }

  # Returns an `Iter` that transforms values of type `T` to values of type
  # `R`.
  #
  # # Examples
  #
  # Multiplying the numbers in an `Array`:
  #
  # ```inko
  # let values = [1, 2, 3]
  #
  # values.iter.map fn (n) { n * 2 }.to_array # => [2, 4, 6]
  # ```
  fn pub move map[R](func: fn (T) -> R) -> Stream[R] {
    Stream.new(fn move { self.next.map(fn (v) { func.call(v) }) })
  }

  # Returns the first value for which the supplied `Block` returns `true`.
  #
  # This method will advance the `Iter` until either a value is found or we
  # run out of values.
  #
  # # Examples
  #
  # Finding the first number greated than 50 in an `Array`:
  #
  # ```inko
  # let numbers = [10, 20, 50, 80]
  #
  # numbers.iter.find fn (number) { number > 50 } # => 80
  # ```
  fn pub mut find(func: fn (ref T) -> Bool) -> Option[T] {
    loop {
      match self.next {
        case Some(v) -> if func.call(v) { return Option.Some(v) }
        case _ -> return Option.None
      }
    }
  }

  # Returns an `Iter` that combines `find` with `map`.
  #
  # For each value in `self`, the supplied closure is called. If the closure
  # returns a `Some`, the value is returned an iteration stops.
  #
  # # Examples
  #
  # ```inko
  # let vals = [10, 20, 30]
  # let val = vals.into_iter.find_map fn (v) {
  #   if v == 20 { Option.Some(v.to_string) } else { Option.None }
  # }
  #
  # val # => Option.Some('20')
  # ```
  fn pub mut find_map[R](func: fn (T) -> Option[R]) -> Option[R] {
    loop {
      match self.next {
        case Some(v) -> {
          match func.call(v) {
            case Some(r) -> return Option.Some(r)
            case _ -> {}
          }
        }
        case _ -> return Option.None
      }
    }
  }

  # Returns `true` if `self` contains any value for which the `func` argument
  # returned `true`.
  #
  # This method stops iterating over the values after the first matching value.
  #
  # # Examples
  #
  # Checking if an `Iter` contains a value:
  #
  # ```inko
  # [10, 20, 30].iter.any? fn (value) { value >= 20 } # => true
  # ```
  fn pub mut any?(func: fn (T) -> Bool) -> Bool {
    loop {
      match self.next {
        case Some(v) -> if func.call(v) { return true }
        case _ -> return false
      }
    }
  }

  # Returns an `Iter` that only produces values for which the supplied func
  # returned `true`.
  #
  # # Examples
  #
  # Selecting only certain values in an `Iter`:
  #
  # ```inko
  # [10, 20, 30]
  #   .iter
  #   .select fn (value) { value > 10 }
  #   .to_array # => [20, 30]
  # ```
  fn pub move select(func: fn (ref T) -> Bool) -> Stream[T] {
    Stream.new(fn move {
      loop {
        match self.next {
          case Some(v) -> if func.call(v) { return Option.Some(v) }
          case _ -> return Option.None
        }
      }
    })
  }

  # Returns an `Iter` that both filters and maps at the same time.
  #
  # The new iterator yields the values for which the provided func returned a
  # `Some` value.
  #
  # # Examples
  #
  # ```inko
  # let vals = [Option.Some(10), Option.None, Option.som(30)]
  # let iter = vals.into_iter.select_map fn (opt) { opt }
  #
  # iter.next # => Option.Some(10)
  # iter.next # => Option.Some(30)
  # iter.next # => Option.None
  # ```
  fn pub move select_map[R](func: fn (T) -> Option[R]) -> Stream[R] {
    Stream.new(fn move {
      loop {
        match self.next {
          case Some(v) -> {
            match func.call(v) {
              case Some(r) -> return Option.Some(r)
              case _ -> next
            }
          }
          case _ -> return Option.None
        }
      }
    })
  }

  # Returns an `Iter` that maps every value into a new `Iter` and flattens these
  # iterators.
  #
  # This allows you to take for example an `Iter[Foo]` and for each `Foo`
  # produce and flatten a `Iter[Bar]` such that the final iterator yields all
  # the individual `Bar` values instead of the `Iter[Bar]` iterators.
  #
  # # Examples
  #
  # ```inko
  # ['foo', 'bar']
  #   .into_iter
  #   .flat_map(fn (str) { str.chars })
  #   .to_array # => ['f', 'o', 'o', 'b', 'a', 'r']
  # ```
  fn pub move flat_map[V, I: mut + Iter[V]](func: fn (T) -> I) -> Stream[V] {
    let mut iter_opt: Option[I] = Option.None

    Stream.new(fn move {
      loop {
        match iter_opt.as_mut {
          case Some(v) -> {
            match v.next {
              case Some(v) -> return Option.Some(v)
              case _ -> {}
            }
          }
          case _ -> {}
        }

        match self.next {
          case Some(v) -> iter_opt = Option.Some(func.call(v))
          case _ -> return Option.None
        }
      }
    })
  }

  # Partitions the `Iter` into a tuple of two `Array` objects.
  #
  # The first value of the tuple contains all values for which the supplied
  # func returned `true`. The second value contains all values for which the
  # func returned `false`.
  #
  # # Examples
  #
  # Partitioning an `Iter`:
  #
  # ```inko
  # let values = [10, 20, 30, 40, 50]
  # let pair = values.iter.partition fn (value) { value >= 30 }
  #
  # pair.0 # => [30, 40, 50]
  # pair.1 # => [10, 20]
  # ```
  fn pub move partition(func: fn (ref T) -> Bool) -> (Array[T], Array[T]) {
    reduce(([], []), fn move (acc, val) {
      if func.call(ref val) { acc.0.push(val) } else { acc.1.push(val) }

      acc
    })
  }

  # Returns `true` if the supplied func returns `true` for _all_ values in
  # `self`.
  #
  # This method stops iterating over the values after the first value for which
  # the closure returns `false`.
  #
  # # Examples
  #
  # Checking if all values in an `Iter` match a condition:
  #
  # ```inko
  # [10, 20].iter.all? fn (value) { value.positive? } # => true
  # [-1, 20].iter.all? fn (value) { value.positive? } # => false
  # ```
  fn pub mut all?(func: fn (T) -> Bool) -> Bool {
    loop {
      match self.next {
        case Some(v) -> if !func.call(v) { return false }
        case _ -> return true
      }
    }
  }

  # Join two `Iter` objects together, one after another.
  #
  # # Examples
  #
  # ```inko
  # let a = [10, 20, 30]
  # let b = [40, 50, 60]
  # a.iter.chain(b.iter).to_array == [10, 20, 30, 40, 50, 60] # => true
  # ```
  fn pub move chain[I: mut + Iter[T]](other: I) -> Stream[T] {
    let mut iter_left = true

    Stream.new(fn move {
      if iter_left {
        let item = self.next

        if item.some? { return item } else { iter_left = false }
      }

      other.next
    })
  }

  # Zips two `Iter` objects together, producing a new `Iter` that produces a
  # tuple containing the values of both `Iter` objects.
  #
  # The returned `Iter` stops iterating when one of the two zipped `Iter`
  # objects runs out of values.
  #
  # # Examples
  #
  # Zipping two `Iter` objects together:
  #
  # ```inko
  # let a = [10, 20, 30]
  # let b = [40, 50, 60]
  # let zip = a.iter.zip(b.iter)
  #
  # zip.next # => (10, 40)
  # ```
  #
  # Zipping two `Iter` objects with a different number of values:
  #
  # ```inko
  # let a = [10, 20, 30]
  # let b = [40, 50]
  # let zip = a.iter.zip(b.iter)
  #
  # zip.next # => (10, 40)
  # ```
  fn pub move zip[U, I: mut + Iter[U]](other: I) -> Stream[(T, U)] {
    Stream.new(fn move { self.next.zip(other.next) })
  }

  # Combines all values in the iterator into the specified accumulator.
  #
  # This method takes two arguments:
  #
  # 1. An accumulator to combine all values into.
  # 2. A func that accepts two arguments: the accumulator and the current
  #    value.
  #
  # The func returns the accumulator to return for the next value. The return
  # value of this method is the final accumulator.
  #
  # This method is called `inject` or `fold` in other languages.
  #
  # # Examples
  #
  # Summing all integers in an iterator:
  #
  # ```inko
  # let total = [1, 2, 3].iter.reduce(0) fn (total, current) {
  #   total + current
  # }
  #
  # total # => 6
  # ```
  #
  # At each step of the iteration, the `total` and `current` func arguments are
  # set to the following values:
  #
  # |=
  # | Element
  # | Total
  # | Current
  # | Return value
  # |-
  # | 0
  # | 0
  # | 1
  # | 1
  # |-
  # | 1
  # | 1
  # | 2
  # | 3
  # |-
  # | 2
  # | 3
  # | 3
  # | 6
  #
  # For the last element the return value is `6`, so the return value of the
  # reduce method is also `6`.
  fn pub move reduce[A](accumulator: A, func: fn (A, T) -> A) -> A {
    let mut result = accumulator

    loop {
      match self.next {
        case Some(v) -> result = func.call(result, v)
        case _ -> return result
      }
    }
  }

  # Combines all values in the iterator into the specified accumulator, stopping
  # at the first `Error` that is encountered.
  #
  # This method is similar to `Iter.reduce`, except the given closure is
  # expected to return a `Result` wrapping the accumulator. If the return value
  # is an `Ok`, iteration continues. If the return value is an `Error`,
  # iteration stops and the `Error` is returned.
  #
  # # Examples
  #
  # ```inko
  # let iter = [Result.Ok(1), Result.Error('test'), Result.Ok(2)].into_iter
  # let result = iter.try_reduce(0) fn (acc, val) {
  #   match val {
  #     case Ok(val) -> Result.Ok(acc + val)
  #     case err -> err
  #   }
  # }
  #
  # result # => Result.Error('test')
  # ```
  fn pub mut try_reduce[A, E](
    accumulator: A,
    func: fn (A, T) -> Result[A, E],
  ) -> Result[A, E] {
    let mut result = accumulator

    loop {
      match self.next {
        case Some(v) -> result = try func.call(result, v)
        case _ -> return Result.Ok(result)
      }
    }
  }

  # Returns an `Iter` that produces chunks of values.
  #
  # Each chunk is up to the amount specified by the `size` argument. If the
  # number of values can't be evenly divided, the last chunk may contain fewer
  # than `size` elements.
  fn pub move chunks(size: Int) -> Stream[Array[T]] {
    Stream.new(fn move {
      let chunk = []

      while chunk.size < size {
        match self.next {
          case Some(val) -> chunk.push(val)
          case _ -> break
        }
      }

      if chunk.empty? { Option.None } else { Option.Some(chunk) }
    })
  }

  # Collects all values in the `Iter` in an `Array`.
  #
  # This method will advance the iterator to the end.
  #
  # # Examples
  #
  # Transforming an `Iter` back into an `Array`:
  #
  # ```inko
  # [1, 2, 3].iter.to_array # => [1, 2, 3]
  # ```
  fn pub move to_array -> Array[T] {
    reduce([], fn (values, value) {
      values.push(value)
      values
    })
  }

  # Returns the number of values remaining in this iterator.
  #
  # This method advances the iterator to the end.
  #
  # # Examples
  #
  # ```inko
  # [1, 2, 3].iter.count # => 3
  # ```
  fn pub move count -> Int {
    reduce(0, fn (count, _) { count + 1 })
  }

  # Returns the last value produced by this iterator.
  #
  # # Examples
  #
  # ```inko
  # [1, 2, 3].iter.last # => Option.Some(3)
  # ```
  fn pub move last -> Option[T] {
    reduce(Option.None, fn (_, val) { Option.Some(val) })
  }

  # Returns an iterator that allows looking at the next element of the iterator,
  # without consuming it.
  #
  # # Examples
  #
  # ```inko
  # let vals = [1, 2, 3]
  # let iter = vals.iter.peekable
  #
  # iter.peek # => Option.Some(1)
  # iter.peek # => Option.Some(1)
  # iter.next # => Option.Some(1)
  # iter.next # => Option.Some(2)
  # ```
  fn pub move peekable -> Peekable[T, Self] {
    Peekable(iter: self, peeked: Option.None)
  }

  # Returns a new iterator that skips the first `amount` values yielded, then
  # yields any remaining values.
  #
  # The first time `next` is called on the returned iterator, the iterator is
  # advanced `amount` times. The new iterator yields a `None` if there are fewer
  # than `amount` items in the iterator.
  #
  # # Examples
  #
  # ```inko
  # [1, 2, 3].into_iter.skip(1).to_array # => [2, 3]
  # [1].into_iter.skip(10).to_array      # => []
  # ```
  fn pub move skip(amount: Int) -> Stream[T] {
    let mut pending = amount

    Stream.new(fn move {
      while pending > 0 {
        match self.next {
          case Some(_) -> pending -= 1
          case _ -> break
        }
      }

      self.next
    })
  }

  # Returns a new iterator that yields the first `amount` items, or fewer if
  # `amount` is greater than the number of values in the iterator.
  #
  # # Examples
  #
  # ```inko
  # [1, 2, 3].into_iter.take(2).to_array # => [1, 2]
  # [1].into_iter.take(2).to_array       # => [1]
  # ```
  fn pub move take(amount: Int) -> Stream[T] {
    let mut pending = amount

    Stream.new(fn move {
      if (pending := pending - 1) > 0 { self.next } else { Option.None }
    })
  }

  # Returns a new iterator that skips values for which `func` returns `true`.
  #
  # Once `func` returns `false`, the remaining values in the iterator are
  # yielded, and `func` is no longer called.
  #
  # # Examples
  #
  # ```inko
  # [1, 2, 3].into_iter.skip_while fn (v) { v <= 2 }.to_array # => [3]
  # ```
  fn pub move skip_while(func: fn (ref T) -> Bool) -> Stream[T] {
    let mut skip = true

    Stream.new(fn move {
      while skip {
        match self.next {
          case Some(v) if func.call(v) -> {}
          case Some(v) -> {
            skip = false
            return Option.Some(v)
          }
          case _ -> return Option.None
        }
      }

      self.next
    })
  }

  # Returns a new iterator that yields values for which `func` returns `true`.
  #
  # When `func` returns `false`, any remaining values in the iterator are
  # ignored and the iterator is no longer advanced.
  #
  # # Examples
  #
  # ```inko
  # [1, 2, 3].into_iter.take_while fn (v) { v <= 2 }.to_array # => [1, 2]
  # ```
  fn pub move take_while(func: fn (ref T) -> Bool) -> Stream[T] {
    let mut take = true

    Stream.new(fn move {
      if take {
        match self.next {
          case Some(v) if func.call(v) -> Option.Some(v)
          case Some(_) -> {
            take = false
            Option.None
          }
          case _ -> Option.None
        }
      } else {
        Option.None
      }
    })
  }
}

# A type for easily creating iterators using closures.
#
# A `Stream` wraps a closure that feeds it values, which are then returned by
# the implementation of `Iter.next`. This makes it easy to create custom
# iterators, without unnecessary boilerplate.
#
# # Examples
#
# ```inko
# import std.iter (Stream)
#
# fn example(max: Int) -> Stream[Int] {
#   let mut index = 0
#
#   Stream.new fn move {
#     if index < max {
#       Option.Some(index := index + 1)
#     } else {
#       Option.None
#     }
#   }
# }
#
# fn main {
#   let nums = example(4)
#
#   nums.next # => Option.Some(0)
#   nums.next # => Option.Some(1)
# }
# ```
type pub inline Stream[T] {
  let @func: fn -> Option[T]

  # Returns a new iterator using the closure.
  fn pub inline static new(func: fn -> Option[T]) -> Stream[T] {
    Stream(func)
  }
}

impl Iter[T] for Stream {
  fn pub inline mut next -> Option[T] {
    @func.call
  }
}

# An iterator that allows looking at the next element in an iterator, without
# consuming it.
type pub Peekable[T, I: mut + Iter[T]] {
  let @iter: I
  let mut @peeked: Option[Option[T]]

  # Returns an optional immutable reference to the next item in the iterator,
  # without consuming it.
  #
  # This method advances the iterator if no value is peeked yet.
  fn pub mut peek -> Option[ref T] {
    match @peeked {
      case Some(opt) -> opt.as_ref
      case _ -> {
        let val = @iter.next
        let ret = val.as_ref

        @peeked = Option.Some(val)
        ret
      }
    }
  }
}

impl Peekable if T: mut {
  # Returns an optional mutable reference to the next item in the iterator,
  # without consuming it.
  #
  # This method advances the iterator if no value is peeked yet.
  fn pub mut peek_mut -> Option[mut T] {
    match @peeked {
      case Some(opt) -> opt.as_mut
      case _ -> {
        let val = @iter.next
        let ret = val.as_mut

        @peeked = Option.Some(val)
        ret
      }
    }
  }
}

impl Iter[T] for Peekable {
  fn pub mut next -> Option[T] {
    match @peeked := Option.None {
      case Some(opt) -> opt
      case _ -> @iter.next
    }
  }
}
