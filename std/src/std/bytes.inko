# Types for working with bytes.
import std.alloc
import std.array (OutOfBounds, check_bounds)
import std.bytes.parsers (to_lower, upper?, whitespace?)
import std.clone (Clone)
import std.cmp (Equal, max)
import std.drop (Drop)
import std.fmt (Format, Formatter)
import std.hash (Hash, Hasher)
import std.iter (Iter as IterTrait, Stream)
import std.option (Option)
import std.ptr
import std.string (IntoString, PrimitiveString, ToString)

fn extern inko_string_from_bytes(
  bytes: Pointer[UInt8],
  size: Int,
) -> PrimitiveString

fn invalid_capacity(size: Int) -> Never {
  panic('the capacity (${size}) must be greater than or equal to zero')
}

fn invalid_size(size: Int) -> Never {
  panic('the size (${size}) must be greater than zero')
}

fn invalid_slice_range(start: Int, end: Int, size: Int) -> Never {
  panic(
    'slice range [${start} until ${end}] is not within the allowed range [0 until ${size}]',
  )
}

fn pub inline check_slice_range(start: Int, end: Int, size: Int) {
  if end < start or start < 0 or start > size or end < 0 or end > size {
    invalid_slice_range(start, end, size)
  }
}

fn hash_bytes[T: Bytes, H: mut + Hasher](bytes: ref T, hasher: mut H) {
  let mut len = bytes.size
  let mut start = bytes.pointer
  let mut i = 0

  hasher.write(len)

  while i < len {
    hasher.write(ptr.add(start, i := i.wrapping_add(1)).0 as Int)
  }
}

# A type from which a new `ByteArray` can be created.
trait pub ToByteArray {
  fn pub to_byte_array -> ByteArray
}

# A type which can be moved into a `ByteArray`.
trait pub IntoByteArray {
  fn pub move into_byte_array -> ByteArray
}

# A type that is a contiguous sequence of bytes.
#
# This trait is used for providing various foundational methods for Inko's
# different byte sequence types, such as `String`, `ByteArray` and `Slice`.
trait pub Bytes: ToString + ToByteArray {
  # Returns the number of bytes in `self`.
  fn pub size -> Int

  # Returns the byte at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  fn pub get(index: Int) -> Result[Int, OutOfBounds]

  # Returns a raw pointer to the bytes of `self`
  #
  # This method is meant for FFI purposes, and use of it should be avoided at
  # all costs.
  fn pub pointer -> Pointer[UInt8]

  # Returns an iterator over the bytes in `self`.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30])
  # let iter = bytes.bytes
  #
  # iter.next # => Option.Some(10)
  # ```
  fn pub bytes -> Iter[ref Self] {
    Iter(source: self, index: 0)
  }

  # Returns `true` if `self` starts with the given sequence of bytes.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.starts_with?('h'.to_byte_array) # => true
  # 'hello'.starts_with?('h')               # => true
  # ```
  fn pub starts_with?[T: Bytes](prefix: ref T) -> Bool {
    ptr.starts_with?(pointer, size, prefix.pointer, prefix.size)
  }

  # Returns `true` if `self` ends with the given sequence of bytes.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.ends_with?('o'.to_byte_array) # => true
  # 'hello'.ends_with?('o')               # => true
  # ```
  fn pub ends_with?[T: Bytes](suffix: ref T) -> Bool {
    ptr.ends_with?(pointer, size, suffix.pointer, suffix.size)
  }

  # Returns `true` if `self` and `other` contain identical bytes.
  #
  # This allows comparing of any `Bytes` type with any other `Bytes` type (e.g.
  # comparing a `String` to a `ByteArray`). In contrast, methods such as
  # `String.==` only support comparing against values of the same type.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.equals?('hello')               # => true
  # 'hello'.equals?('hello'.to_byte_array) # => true
  # ```
  fn pub equals?[O: Bytes](other: ref O) -> Bool {
    let len = size

    len == other.size and (len == 0 or ptr.equal(pointer, other.pointer, len))
  }

  # Returns `true` if `self` and `other` contain identical bytes, using an ASCII
  # case-insensitive comparison.
  #
  # This method only performs case-insensitive matching for characters in the
  # ASCII range, meaning that "foo" and "FOO" are considered identical but "á"
  # and "Á" are considered different.
  #
  # # Examples
  #
  # ```inko
  # 'foo'.equals_while_ignoring_case?('foo') # => true
  # 'foo'.equals_while_ignoring_case?('FOO') # => true
  # 'abc'.equals_while_ignoring_case?('def') # => false
  # 'á'.equals_while_ignoring_case?('Á') # => false
  # ```
  fn pub equals_while_ignoring_case?[O: Bytes](other: ref O) -> Bool {
    let len = size

    if len == 0 { return true }

    if len != other.size { return false }

    let lhs = pointer
    let rhs = other.pointer
    let mut idx = 0

    # Since we have to convert ASCII bytes to lowercase (when necessary) we
    # can't use a more efficient comparison and instead have to compare the data
    # byte by byte.
    while idx < len {
      let mut a = ptr.add(lhs, idx).0 as Int
      let mut b = ptr.add(rhs, idx).0 as Int

      if upper?(a) { a = to_lower(a) }

      if upper?(b) { b = to_lower(b) }

      if a != b { return false }

      idx += 1
    }

    true
  }

  # Returns the _byte_ index of the first occurrence of the given sequence of
  # bytes, starting at the given byte index.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.index_of('h', starting_at: 0) # => Option.Some(0)
  # 'hello'.index_of('l', starting_at: 0) # => Option.Some(2)
  # 'hello'.index_of('l', starting_at: 3) # => Option.Some(3)
  # 'hello'.index_of('x', starting_at: 0) # => Option.None
  # ```
  fn pub index_of[B: Bytes](value: ref B, starting_at: Int) -> Option[Int] {
    # This is a naive string searching algorithm (see
    # https://en.wikipedia.org/wiki/String-searching_algorithm) for more details
    # on the various algorithms.
    #
    # We're using the naive algorithm because:
    #
    # 1. It's easy to implement
    # 2. It doesn't require any pre-processing
    # 3. At the time of writing there was no need for something more performant
    let find_size = value.size

    if find_size == 0 or size == 0 or find_size > size { return Option.None }

    let mut a = starting_at
    let max = size - find_size

    while a <= max {
      let mut b = 0

      while b < find_size and get(a + b) == value.get(b) { b += 1 }

      if b == find_size { return Option.Some(a) }

      a += 1
    }

    Option.None
  }

  # Returns `true` if `self` contains the given byte sequence.
  #
  # # Examples
  #
  # ```inko
  # 'hello'.contains_bytes?('hello') # => true
  # ```
  fn pub contains_bytes?[B: Bytes](bytes: ref B) -> Bool {
    index_of(bytes, starting_at: 0).some?
  }
}

# A immutable slice of bytes.
#
# A `Slice` is a "view" into a range of a `Bytes` type (e.g. a `String` or
# `ByteArray`). A `Slice` doesn't own or copy the underlying data, instead it
# merely borrows it. This means creating a `Slice` doesn't require any memory
# allocations.
#
# `Slice` supports slicing over mutable collections such as `ByteArray` and
# correctly handles the underlying collection being made smaller or larger than
# a `Slice` after creating the `Slice`.
type pub inline Slice[T: Bytes] {
  # The collection of bytes the slice applies to.
  let pub @source: ref T

  # The start index (relative to the source) of the slice.
  let pub @start: Int

  # The end index (relative to the source) of the slice.
  let pub @end: Int

  # Returns a `Slice` over the given source, without checking if the slice is
  # within bounds of the underlying collection.
  #
  # This method is useful if you've somehow already asserted the slice range is
  # within bounds, but the compiler isn't able to optimize away the bounds
  # check.
  #
  # Use of the resulting `Slice` is still safe as bounds checking upon
  # access is still performed. In addition, methods such as `Slice.size` take
  # into account the size of the underlying collection, such that it never
  # returns an incorrect value.
  #
  # # Examples
  #
  # ```inko
  # import std.bytes (Slice)
  #
  # let buf = ByteArray.new([10, 20, 30])
  #
  # Slice.new(buf, 0, 10)
  # ```
  #
  # # Panics
  #
  # This method panics if `start` is greater than `end`.
  fn pub inline static new(source: ref T, start: Int, end: Int) -> Self {
    if start > end { invalid_slice_range(start, end, source.size) }

    Self(source: source, start: start, end: end)
  }

  # Returns a `Slice` over the given source, while checking if `start` and `end`
  # are within bounds of the underlying collection.
  #
  # The `start` index is allowed to be equal to the size of `self`, but only if
  # `end` is the same as `start`. Thus given a source with a size of `4`, the
  # range `4 until 4` is valid.
  #
  # Instead of using this method directly, use `ByteArray.slice` and
  # `String.slice` instead. This method is public such that one can still create
  # a `Slice` when all they have is a `Bytes`, as `Bytes` doesn't define a
  # `slice` method as doing so introduces a circular dependency between `Bytes`
  # and `Slice` (as `Slice` also implements `Bytes`).
  #
  # # Panics
  #
  # This method panics if `start` or `end` is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # import std.bytes (Slice)
  #
  # let buf = ByteArray.new([10, 20, 30])
  #
  # Slice.checked(buf, 0, 3)
  # ```
  fn pub inline static checked(source: ref T, start: Int, end: Int) -> Self {
    check_slice_range(start, end, size: source.size)
    Self(source: source, start: start, end: end)
  }

  # Returns a sub slice of `self` starting at `start` until (but excluding)
  # `end`.
  #
  # The `start` index is allowed to be equal to the size of `self`, but only if
  # `end` is the same as `start`. Thus given a `Slice` with a size of `4`, the
  # range `4 until 4` is valid.
  #
  # # Panics
  #
  # This method panics if `start` or `end` is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30])
  # let slice = bytes.slice(start: 0, end: 3) # => Slice[ref ByteArray]
  #
  # slice.slice(start: 1, end: 2).get(1) # => Result.Ok(30)
  # ```
  fn pub inline slice(start: Int, end: Int) -> Self {
    let new_start = @start.wrapping_add(start)
    let new_end = @start.wrapping_add(end)

    check_slice_range(start, end, size: @end.wrapping_sub(@start))
    Self(source: @source, start: new_start, end: new_end)
  }

  # Returns an iterator over the values in `self`, consuming it in the process.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30])
  # let iter = bytes.into_iter
  #
  # iter.next # => Option.Some(10)
  # ```
  fn pub move into_iter -> Iter[Self] {
    Iter(source: self, index: 0)
  }

  # Returns `true` if `self` is an empty slice.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30])
  # let slice = bytes.slic(start: 0, end: 3)
  #
  # slice.empty? # => false
  # bytes.clear
  # slice.empty? # => true
  # ```
  fn pub empty? -> Bool {
    size == 0
  }

  # Splits `self` into an iterator that yields slices, each separated by the
  # given separator.
  #
  # If the separator isn't present in `self`, the returned iterator yields
  # `self` exactly once.
  #
  # # Examples
  #
  # ```inko
  # 'foo/bar/baz'
  #   .slice(0, 7)                  # Slice the String to 'foo/bar'
  #   .split('/')                   # Split it on '/'
  #   .map(fn (v) { v.to_string })  # Convert each Slice[String] to a String
  #   .to_array                     # Collect the results in an Array
  # # => ['foo', 'bar']
  # ```
  fn pub split[B: Bytes](separator: ref B) -> Stream[Slice[T]] {
    let mut off = 0
    let sep_len = separator.size
    let len = size

    Stream.new(fn move {
      match index_of(separator, starting_at: off) {
        case Some(i) -> Option.Some(slice(off := i + sep_len, i))
        case _ if off < len -> Option.Some(slice(off := len, len))
        case _ -> Option.None
      }
    })
  }

  # Splits `self` on the first occurrence of `separator`.
  #
  # If the separator is found, the return value is a tuple of two slices: one
  # containing the data before the separator and one containing the data after
  # the separator. If the separator isn't found, the return value is an
  # `Option.None`.
  #
  # # Examples
  #
  # ```inko
  # let left_right = 'key=value'.slice(0, 9).split_once('=').get
  #
  # left_right.0.to_string # => 'key'
  # left_right.1.to_string # => 'value'
  # ```
  fn pub split_once[B: Bytes](separator: ref B) -> Option[(Self, Self)] {
    match index_of(separator, starting_at: 0) {
      case Some(i) -> Option.Some((slice(0, i), slice(i + 1, size)))
      case _ -> Option.None
    }
  }

  # Returns a `Slice` without any leading whitespace.
  #
  # # Examples
  #
  # ```inko
  # let str = ' hello '
  #
  # str.slice(0, str.size).trim_start.to_string # => 'hello '
  # ```
  fn pub trim_start -> Self {
    let mut index = 0
    let max = size

    while index < max {
      if whitespace?(get(index).or_panic) { index += 1 } else { break }
    }

    if index == size { Slice.new(@source, 0, 0) } else { slice(index, size) }
  }

  # Returns a `Slice` without any trailing whitespace.
  #
  # # Examples
  #
  # ```inko
  # let str = ' hello '
  #
  # str.slice(0, str.size).trim_end.to_string # => ' hello'
  # ```
  fn pub trim_end -> Self {
    let mut index = size - 1

    while index >= 0 {
      if whitespace?(get(index).or_panic) { index -= 1 } else { break }
    }

    if index == -1 { Slice.new(@source, 0, 0) } else { slice(0, index + 1) }
  }

  # Returns a `Slice` with both leading and trailing whitespace removed.
  #
  # # Examples
  #
  # ```inko
  # let str = ' hello '
  #
  # str.slice(0, str.size).trim.to_string # => 'hello'
  # ```
  fn pub trim -> Self {
    let max = size
    let mut start = 0
    let mut end = max - 1

    while start < max {
      if whitespace?(get(start).or_panic) { start += 1 } else { break }
    }

    while end >= 0 {
      if whitespace?(get(end).or_panic) { end -= 1 } else { break }
    }

    if start == max { Slice.new(@source, 0, 0) } else { slice(start, end + 1) }
  }
}

impl Clone for Slice {
  fn pub inline clone -> Self {
    Slice(source: @source, start: @start, end: @end)
  }
}

impl Bytes for Slice {
  # Returns the number of bytes covered by `self`.
  #
  # The returned size is correctly adjusted according to the size of the
  # underlying collection. For example, if a slice starts at index 0 and covers
  # four values but the underlying collection only contains two values, this
  # method returns two instead of four.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30, 40])
  # let slice = bytes.slice(start: 0, end: 4)
  #
  # slice.size # => 4
  # bytes.pop
  # slice.size # => 3
  # ```
  fn pub inline size -> Int {
    let len = @source.size
    let start = @start
    let end = @end

    if end <= len { end - start } else if start < len { len - start } else { 0 }
  }

  # Returns the byte at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30])
  # let slice = bytes.slice(start: 1, end: 3)
  #
  # slice.get(0)  # => Result.Ok(20)
  # slice.get(10) # => Result.Error(OutOfBounds(...))
  # ```
  fn pub inline get(index: Int) -> Result[Int, OutOfBounds] {
    let off = @start.wrapping_add(index)

    if index >= 0 and index < size and off >= 0 and off < @source.size {
      Result.Ok(ptr.add(@source.pointer, off).0 as Int)
    } else {
      Result.Error(OutOfBounds.new(index, size))
    }
  }

  # Returns a pointer to the start of the slice.
  #
  # This method doesn't perform any bounds checking, meaning callers should do
  # so manually (e.g. using `Slice.size`).
  fn pub pointer -> Pointer[UInt8] {
    ptr.add(@source.pointer, @start)
  }
}

impl Format for Slice {
  fn pub fmt(formatter: mut Formatter) {
    let fmt = formatter.array

    for v in bytes { fmt.value(v) }

    fmt.finish
  }
}

impl Equal for Slice {
  fn pub ==(other: ref Self) -> Bool {
    equals?(other)
  }
}

impl ToByteArray for Slice {
  fn pub to_byte_array -> ByteArray {
    ByteArray.from_pointer(pointer, size)
  }
}

impl ToString for Slice {
  fn pub to_string -> String {
    String.from_borrowed_primitive(PrimitiveString(bytes: pointer, size: size))
  }
}

# An iterator over the bytes in a `Bytes` type.
type pub Iter[T: Bytes] {
  let @source: T
  let mut @index: Int
}

impl IterTrait[Int] for Iter {
  fn pub inline mut next -> Option[Int] {
    @source.get(@index := @index.wrapping_add(1)).ok
  }
}

# An array of bytes.
#
# Byte arrays are arrays specialised for storing individual bytes in the most
# efficient way possible. Unlike a regular `Array` of `Int` values, each value
# only requires a single byte of space, instead of requiring 8 bytes of space.
#
# Byte arrays are primarily meant for reading and writing data from/to a stream,
# such as a file or a socket. If you simply want to store a list of numbers,
# you're better off using the `Array` type.
type pub ByteArray {
  # The number of bytes stored in this `ByteArray`
  let mut @size: Int

  # The number of bytes that can be stored before a resize is necessary.
  let mut @capacity: Int

  # The buffer containing the raw bytes.
  let mut @buffer: Pointer[UInt8]

  # Returns a new empty `ByteArray`.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.size     # => 0
  # bytes.capacity # => 0
  # ```
  fn pub static new -> ByteArray {
    Self(size: 0, capacity: 0, buffer: 0 as Pointer[UInt8])
  }

  # Returns a `ByteArray` with enough space for at least `size` bytes.
  #
  # # Panics
  #
  # This method panics of `size` if less than zero.
  #
  # # Examples
  #
  # ```inko
  # ByteArray.with_capacity(32).capacity # => 32
  # ```
  fn pub static with_capacity(size: Int) -> ByteArray {
    if size < 0 { invalid_capacity(size) }

    Self(
      size: 0,
      capacity: size,
      buffer: alloc.resize(0 as Pointer[UInt8], size),
    )
  }

  # Returns a new `ByteArray` created from the given `Array`.
  fn pub static from_array(array: ref Array[Int]) -> ByteArray {
    let bytes = ByteArray.with_capacity(array.size)

    for v in array.iter { bytes.push(v) }

    bytes
  }

  # Returns a `ByteArray` created from a raw pointer.
  #
  # The `size` argument specifies the number of bytes to read starting at the
  # given pointer.
  #
  # If `size` is greater than zero but `pointer` is NULL, the returned value is
  # an empty `ByteArray`.
  #
  # # Safety
  #
  # If `size` is greater than zero and `pointer` points to invalid memory (but
  # isn't NULL), the behavior is undefined and will likely result in a crash.
  #
  # The purpose of this method is to allow creating a `ByteArray` from a pointer
  # returned by C code. Avoid using this method for anything else.
  #
  # # Panics
  #
  # This method panics of `size` if less than zero.
  fn pub static from_pointer(pointer: Pointer[UInt8], size: Int) -> ByteArray {
    if size < 0 { invalid_size(size) }

    # While it's unlikely for `pointer` to be NULL while `size` is e.g. 4, it
    # doesn't hurt to check as the alternative is a hard crash.
    if pointer as Int == 0 { return new }

    let bytes = with_capacity(size)

    alloc.copy(pointer, bytes.buffer, size)
    bytes.size = size
    bytes
  }

  # Returns a `ByteArray` filled with the given byte.
  #
  # The `times` argument specifies how many times the `with` argument must
  # exist in the byte array.
  #
  # # Panics
  #
  # This method panics of `times` if less than zero.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.filled(with: 0, times: 2)
  #
  # bytes.get(0) # => 0
  # bytes.get(1) # => 0
  # ```
  fn pub static filled(with: Int, times: Int) -> ByteArray {
    let bytes = with_capacity(times)

    alloc.write(byte: with, to: bytes.buffer, size: times)
    bytes.size = times
    bytes
  }

  # Returns the number of bytes that can be stored in `self` before `self` needs
  # to be resized.
  #
  # # Examples
  #
  # ```inko
  # ByteArray.new.capacity               # => 0
  # ByteArray.with_capacity(32).capacity # => 32
  # ```
  fn pub inline capacity -> Int {
    @capacity
  }

  # Removes all values from this `ByteArray`.
  #
  # This method has no effect on the amount of memory reserved by `self`,
  # instead it merely sets the size of `self` to zero.
  #
  # # Examples
  #
  # Removing all values:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20, 30])
  #
  # bytes.clear
  # bytes.size # => 0
  # ```
  fn pub mut clear {
    @size = 0
  }

  # Copies the bytes from `bytes` to the end of `self`.
  #
  # The `bytes` argument can be any type that implements the `Bytes` trait, such
  # as `String`, `ByteArray`, or `Slice`.
  #
  # # Examples
  #
  # ```inko
  # let a = ByteArray.from_array([1, 2, 3, 4])
  # let b = ByteArray.new
  # let c = ByteArray.new
  #
  # b.append(a)
  # c.append(a.slice(start: 0, end: 2))
  #
  # b # => ByteArray.from_array([1, 2, 3, 4])
  # c # => ByteArray.from_array([1, 2])
  # ```
  fn pub mut append[T: Bytes](bytes: ref T) {
    let len = bytes.size

    if len == 0 { return }

    reserve_exact(len)
    alloc.copy(from: bytes.pointer, to: tail, size: len)
    @size += len
  }

  # Pushes a value to the back of the `ByteArray`, returning the pushed value.
  #
  # # Examples
  #
  # Pushing a value into a `ByteArray`:
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.push(10) # => 10
  # bytes.size     # => 1
  # ```
  fn pub mut push(value: Int) {
    reserve(1)
    write_to(@size, value)
    @size += 1
  }

  # Removes a value from the back of the `ByteArray`, returning the removed
  # value.
  #
  # If no value was found, a None is returned instead.
  #
  # # Examples
  #
  # Popping an existing value:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10])
  #
  # bytes.pop  # => Option.Some(10)
  # bytes.size # => 0
  # ```
  #
  # Popping a value when the `ByteArray` is empty:
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.pop # => Option.None
  # ```
  fn pub mut pop -> Option[Int] {
    if @size == 0 { return Option.None }

    @size -= 1
    Option.Some(get_unchecked(@size))
  }

  # Removes the value at the given index, returning the removed value.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # Removing an existing value:
  #
  # ```inko
  # let bytes = ByteArray.from_array([10])
  #
  # bytes.remove_at(0) # => 10
  # bytes.size         # => 0
  # ```
  fn pub mut remove_at(index: Int) -> Result[Int, OutOfBounds] {
    try check_bounds(index, @size)

    let addr = address_of(index)
    let val = addr.0 as Int

    alloc.copy(from: ptr.add(addr, 1), to: addr, size: @size - index - 1)
    @size -= 1
    Result.Ok(val)
  }

  # Returns a new `String` using the bytes in this `ByteArray`, draining it in
  # the process.
  #
  # After this method is finished, `self` is empty.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([105, 110, 107, 111])
  #
  # bytes.drain_to_string # => 'inko'
  # bytes.empty?          # => true
  # ```
  fn pub mut drain_to_string -> String {
    if empty? { return '' }

    let str = String.from_primitive(inko_string_from_bytes(@buffer, @size))

    clear
    str
  }

  # Writes the byte `value` to the position `index`.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.set(0, 30)
  # bytes.get(0) # => 30
  # ```
  fn pub mut set(index: Int, value: Int) {
    check_bounds(index, @size).or_panic
    write_to(index, value)
  }

  # Returns `true` if `self` is empty.
  #
  # # Examples
  #
  # ```inko
  # ByteArray.new.empty? => true
  # ```
  fn pub inline empty? -> Bool {
    @size == 0
  }

  # Converts the `ByteArray` to an `Array!(Int)`.
  #
  # # Examples
  #
  # Converting a `ByteArray`:
  #
  # ```inko
  # let bytes = ByteArray.from_array([105, 110, 107, 111])
  #
  # bytes.to_array # => [105, 110, 107, 111]
  # ```
  fn pub to_array -> Array[Int] {
    iter.to_array
  }

  # Returns an iterator over the bytes in `self`.
  fn pub iter -> Iter[ref Self] {
    bytes
  }

  # Reverses `self` in-place
  #
  # # Examples
  #
  # ```inko
  # let a = ByteArray.from_array([10, 20, 30])
  #
  # a.reverse
  #
  # a # => ByteArray.from_array([30, 20, 10])
  # ```
  fn pub mut reverse {
    reverse_at(0)
  }

  # Reverses `self` in-place starting at the given index.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  # ```inko
  # let a = ByteArray.from_array([10, 20, 30, 40])
  #
  # a.reverse_at(2)
  # a # => ByteArray.from_array([10, 20, 40, 30])
  # ```
  fn pub mut reverse_at(index: Int) {
    check_bounds(index, size).or_panic

    let mut a = index
    let mut b = size - 1

    while a < b {
      let a_val = get_unchecked(a)
      let b_val = get_unchecked(b)

      write_to(b, a_val)
      write_to(a, b_val)
      a += 1
      b -= 1
    }
  }

  # Resizes `self` to the new size.
  #
  # If the given size is greater than the current size, the `value` argument is
  # used to fill in the additional slots. If the given size is less than the
  # current size, `self` is simply truncated.
  #
  # # Panics
  #
  # This method panics if the given size is less than zero.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.resize(size: 2, value: 1)
  # bytes # => ByteArray.from_array([1, 1])
  #
  # bytes.resize(size: 0, value: 0)
  # bytes # => ByteArray.new
  # ```
  fn pub mut resize(size: Int, value: Int) {
    if size < 0 {
      invalid_size(size)
    } else if size == @size {
      return
    } else if size < @size {
      @size = size
      return
    }

    let add = size - @capacity

    if add > 0 { reserve_exact(add) }

    alloc.write(byte: value, to: tail, size: size - @size)
    @size = size
  }

  # Reserves space for `size` additional values.
  #
  # The actual space reserved may be greater to prevent frequent reallocations.
  # After calling this method, the capacity will be greater than or equal to
  # `self.size + size`.
  #
  # If the capacity is great enough or the given size is less than zero, this
  # method does nothing.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([1, 2, 3, 4])
  #
  # bytes.reserve(2)
  # bytes.capacity # => 8
  # ```
  fn pub mut reserve(size: Int) {
    if @capacity - @size >= size { return }

    @capacity = max(@capacity * 2, @capacity + size)
    @buffer = alloc.resize(@buffer, @capacity)
  }

  # Reserves space for exactly `size` additional values.
  #
  # Unlike `ByteArray.reserve`, this method won't allocate more than the given
  # amount.
  #
  # If there's already enough space for `size` extra values, this method does
  # nothing.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.new
  #
  # bytes.reserve_exact(4)
  # bytes.capacity # => 6
  # ```
  fn pub mut reserve_exact(size: Int) {
    if @capacity - @size >= size { return }

    @capacity = @capacity + size
    @buffer = alloc.resize(@buffer, @capacity)
  }

  # Returns the last byte in `self`
  #
  # # Examples
  #
  # ```inko
  # ByteArray.new.last                  # => Option.None
  # ByteArray.from_array([10, 20]).last # => Option.Some(20)
  # ```
  fn pub last -> Option[Int] {
    get(size - 1).ok
  }

  # Overwrites all bytes in `self` with zero bytes.
  #
  # Note that until [this issue](https://github.com/inko-lang/inko/issues/833)
  # is resolved, the compiler _might_ optimize code such that the writing of the
  # zero bytes is optimized away.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([1, 2, 3])
  #
  # bytes.zero
  # bytes # => ByteArray.from_array([0, 0, 0])
  # ```
  fn pub mut zero {
    alloc.zero(pointer, size)
  }

  # Returns a `Slice` over `self` from `start` until (but excluding) `end`.
  #
  # Because a `ByteArray` is a mutable type it's possible for the values covered
  # by a `Slice` to change. While the `Slice` type handles such cases (e.g. if
  # the `ByteArray` is cleared, a `Slice` doesn't produce any values), it's best
  # not to modify `self` when slices to it exist as this may result in
  # confusing/unexpected behavior.
  #
  # The `start` index is allowed to be equal to the size of `self`, but only if
  # `end` is the same as `start`. Thus given a `ByteArray` with a size of `4`,
  # the range `4 until 4` is valid.
  #
  # # Panics
  #
  # This method panics if `start` or `end` is out of bounds.
  #
  # # Examples
  #
  # Slicing a `ByteArray`:
  #
  # ```inko
  # let bytes = ByteArray.from_array([1, 2, 3, 4])
  # let slice = bytes.slice(start: 1, end: 3)
  #
  # slice.get(0) # => 2
  # slice.get(1) # => 3
  # ```
  #
  # Slicing a `ByteArray` and updating the underlying values:
  #
  # ```inko
  # let bytes = ByteArray.from_array([1, 2, 3, 4])
  # let slice = bytes.slice(start: 1, end: 3)
  #
  # slice.get(0) # => 1
  # bytes.set(0, 10)
  # slice.get(0) # => 10
  # ```
  fn pub slice(start: Int, end: Int) -> Slice[Self] {
    Slice.checked(self, start, end)
  }

  # Returns `true` if the given byte is contained in `self`.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.contains?(10) # => true
  # ```
  fn pub contains?(value: Int) -> Bool {
    iter.any?(fn (ours) { ours == value })
  }

  fn inline tail -> Pointer[UInt8] {
    ptr.add(@buffer, @size)
  }

  fn inline get_unchecked(index: Int) -> Int {
    address_of(index).0 as Int
  }

  fn inline mut write_to(index: Int, value: Int) {
    address_of(index).0 = value as UInt8
  }

  fn inline address_of(index: Int) -> Pointer[UInt8] {
    (@buffer as Int).wrapping_add(index) as Pointer[UInt8]
  }
}

impl Bytes for ByteArray {
  # Returns the number of bytes in `self`.
  #
  # # Examples
  #
  # ```inko
  # ByteArray.new.size              # => 0
  # ByteArray.from_array([10]).size # => 1
  # ```
  fn pub inline size -> Int {
    @size
  }

  # Returns the byte at the given index.
  #
  # If the index is out of bounds, a `std.bounds.OutOfBounds` error is returned.
  #
  # # Examples
  #
  # ```inko
  # let bytes = ByteArray.from_array([10, 20])
  #
  # bytes.get(0) # => Result.Ok(10)
  # bytes.get(5) # => Result.Error(OutOfBounds(...))
  # ```
  fn pub inline get(index: Int) -> Result[Int, OutOfBounds] {
    try check_bounds(index, size)
    Result.Ok(get_unchecked(index))
  }

  fn pub pointer -> Pointer[UInt8] {
    @buffer
  }
}

impl Drop for ByteArray {
  fn mut drop {
    if @buffer as Int != 0 { alloc.free(@buffer) }
  }
}

impl ToByteArray for ByteArray {
  fn pub to_byte_array -> ByteArray {
    clone
  }
}

impl IntoByteArray for ByteArray {
  fn pub move into_byte_array -> ByteArray {
    self
  }
}

impl ToString for ByteArray {
  # Returns a new `String` using the bytes in this `ByteArray`.
  #
  # Any invalid UTF-8 sequences will be replaced with `U+FFFD REPLACEMENT
  # CHARACTER`, which looks like this: �
  #
  # # Examples
  #
  # Converting a `ByteArray` into a `String`:
  #
  # ```inko
  # let bytes = ByteArray.from_array([105, 110, 107, 111])
  #
  # bytes.to_string # => 'inko'
  # ```
  fn pub to_string -> String {
    if empty? { return '' }

    String.from_primitive(inko_string_from_bytes(@buffer, @size))
  }
}

impl IntoString for ByteArray {
  fn pub move into_string -> String {
    drain_to_string
  }
}

impl Equal for ByteArray {
  # Returns `true` if two `ByteArray` objects are equal to each other.
  #
  # Two `ByteArray` objects are considered equal if they have the exact same
  # values in the exact same order.
  #
  # # Examples
  #
  # Comparing two `ByteArray` objects:
  #
  # ```inko
  # ByteArray.from_array([10]) == ByteArray.from_array([10]) # => true
  # ByteArray.from_array([10]) == ByteArray.from_array([20]) # => false
  # ```
  fn pub ==(other: ref ByteArray) -> Bool {
    let size = self.size

    if size == other.size {
      ptr.equal(pointer, other.pointer, size: size)
    } else {
      false
    }
  }
}

impl Clone for ByteArray {
  fn pub clone -> ByteArray {
    let new = ByteArray.new
    let _ = new.append(self)

    new
  }
}

impl Hash for ByteArray {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    hash_bytes(self, hasher)
  }
}

impl Format for ByteArray {
  fn pub fmt(formatter: mut Formatter) {
    let fmt = formatter.array

    for byte in iter { fmt.value(byte) }

    fmt.finish
  }
}
