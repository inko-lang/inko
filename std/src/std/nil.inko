# A type to signal the absence of a more meaningful value.
import std::clone::Clone
import std::cmp::Equal
import std::fmt::(Format, Formatter)

# `Nil` is used as a placeholder when no more meaningful type is present.
#
# `Nil` is a regular type like any other. This means you can't just replace a
# `Nil` with another type (i.e. it's _not_ a nullable type). Instead, `Nil` is
# used as a default/placeholder in a few places, such as method return types
# when no type is specified explicitly.
#
# Don't use `Nil` directly, instead use the `Option` type whenever you have
# optional values.
class builtin Nil {
  # Returns a new `Nil`.
  fn pub static new -> Nil {
    nil
  }
}

impl Equal[Nil] for Nil {
  fn pub ==(other: ref Nil) -> Bool {
    true
  }
}

impl Clone[Nil] for Nil {
  fn pub clone -> Nil {
    nil
  }
}

impl Format for Nil {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('nil')
  }
}
