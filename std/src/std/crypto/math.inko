# Mathematical operations for cryptographic algorithms.

# Rotates a 32-bits unsigned integer to the left.
#
# # Panics
#
# This method panics if `amount` is greater than 32 or less than zero.
fn pub rotate_left_u32(value: Int, amount: Int) -> Int {
  to_u32((value << amount) | (value >>> (32 - amount)))
}

# Rotates a 64-bits unsigned integer to the left.
#
# # Panics
#
# This method panics if `amount` is greater than 64 or less than zero.
fn pub rotate_left_u64(value: Int, amount: Int) -> Int {
  (value << amount) | (value >>> (64 - amount))
}

# Rotates a 32-bits unsigned integer to the right.
#
# # Panics
#
# This method panics if `amount` is greater than 32 or less than zero.
fn pub rotate_right_u32(value: Int, amount: Int) -> Int {
  to_u32((value >> amount) | (value << (32 - amount)))
}

# Shifts a 32-bits unsigned integer to the right.
#
# # Panics
#
# This method panics if `amount` is greater than 32 or less than zero.
fn pub shift_right_u32(value: Int, amount: Int) -> Int {
  to_u32(value >>> amount)
}

# Converts an `Int` to an unsigned 32-bits `Int`.
fn pub to_u32(value: Int) -> Int {
  value & 0xFFFFFFFF
}
