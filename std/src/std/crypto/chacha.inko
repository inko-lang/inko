# The ChaCha family of stream ciphers.
#
# This module provides the ChaCha and XChaCha20 stream ciphers, and the
# HChaCha20 hash function. The implementations are based on the following RFCs:
#
# - <https://datatracker.ietf.org/doc/html/rfc8439>
# - <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha>
import std.crypto.cipher (Cipher)
import std.crypto.math (rotate_left_u32, to_u32)
import std.endian.little
import std.int (MAX as INT_MAX)

# The ChaCha key size in bytes.
let KEY_SIZE = 256 / 8

# The nonce size in bytes.
let CHACHA_NONCE_SIZE = 96 / 8

# The nonce size for HChaCha20
let HCHACHA_NONCE_SIZE = 128 / 8

# The nonce size for XChaCha
let XCHACHA_NONCE_SIZE = 192 / 8

# The size in bytes of a ChaCha block.
let BLOCK_SIZE = 64

# The number of values in a matrix.
let MATRIX_SIZE = 16

# The default counter value of a ChaCha cipher.
let DEFAULT_COUNTER = 0

let CHACHA20_ITERS = 10
let CHACHA12_ITERS = 6
let CHACHA8_ITERS = 4

fn key_size_error(size: Int) -> Never {
  panic('the key must be exactly ${KEY_SIZE} bytes long, not ${size} bytes')
}

fn nonce_size_error(expected: Int, size: Int) -> Never {
  panic('the nonce must be exactly ${expected} bytes long, not ${size} bytes')
}

fn counter_size_error(value: Int) -> Never {
  panic('the block counter (${value}) must be between 0 and ${INT_MAX}')
}

# Derives a sub-key from a secret key and nonce, using the HChaCha20 algorithm.
#
# HChaCha20 is a hasher used as part of XChaCha, and may be used for other
# similar purposes such as X25519 key derivation. It's not a general-purpose
# cryptographic hasher, and direct use is best avoided unless you're certain you
# must use the HChaCha20 hasher.
#
# The API is different from traditional cryptographic hashers, as HChaCha20
# isn't meant to hash arbitrary input.
#
# The return value is a ByteArray containing the 256-bit derived sub-key.
#
# # Panics
#
# This method panics if `key` isn't exactly 32 bytes, or if `nonce` isn't
# exactly 16 bytes.
fn pub hchacha20(key: ref ByteArray, nonce: ref ByteArray) -> ByteArray {
  if key.size != KEY_SIZE { key_size_error(key.size) }

  if nonce.size != HCHACHA_NONCE_SIZE {
    nonce_size_error(HCHACHA_NONCE_SIZE, nonce.size)
  }

  let out = ByteArray.filled(with: 0, times: 32)
  let matrix = Matrix(
    words: [
      0x61707865,
      0x3320646E,
      0x79622D32,
      0x6B206574,
      little.read_i32(from: key, at: 0),
      little.read_i32(from: key, at: 4),
      little.read_i32(from: key, at: 8),
      little.read_i32(from: key, at: 12),
      little.read_i32(from: key, at: 16),
      little.read_i32(from: key, at: 20),
      little.read_i32(from: key, at: 24),
      little.read_i32(from: key, at: 28),
      little.read_i32(from: nonce, at: 0),
      little.read_i32(from: nonce, at: 4),
      little.read_i32(from: nonce, at: 8),
      little.read_i32(from: nonce, at: 12),
    ],
    iters: CHACHA20_ITERS,
  )

  matrix.perform_rounds
  little.write_i32(matrix.words.get(0).or_panic, into: out, at: 0)
  little.write_i32(matrix.words.get(1).or_panic, into: out, at: 4)
  little.write_i32(matrix.words.get(2).or_panic, into: out, at: 8)
  little.write_i32(matrix.words.get(3).or_panic, into: out, at: 12)
  little.write_i32(matrix.words.get(12).or_panic, into: out, at: 16)
  little.write_i32(matrix.words.get(13).or_panic, into: out, at: 20)
  little.write_i32(matrix.words.get(14).or_panic, into: out, at: 24)
  little.write_i32(matrix.words.get(15).or_panic, into: out, at: 28)
  out
}

type inline Matrix {
  let @words: Array[Int]
  let @iters: Int

  fn inline static empty(iters: Int) -> Matrix {
    Matrix(words: Array.filled(with: 0, times: MATRIX_SIZE), iters: iters)
  }

  fn inline mut quarter_round(a: Int, b: Int, c: Int, d: Int) {
    set(a, to_u32(get(a).wrapping_add(get(b))))
    set(d, rotate_left_u32(get(d) ^ get(a), 16))

    set(c, to_u32(get(c).wrapping_add(get(d))))
    set(b, rotate_left_u32(get(b) ^ get(c), 12))

    set(a, to_u32(get(a).wrapping_add(get(b))))
    set(d, rotate_left_u32(get(d) ^ get(a), 8))

    set(c, to_u32(get(c).wrapping_add(get(d))))
    set(b, rotate_left_u32(get(b) ^ get(c), 7))
  }

  fn inline mut perform_rounds {
    let mut i = 0

    while i < @iters {
      quarter_round(0, 4, 8, 12)
      quarter_round(1, 5, 9, 13)
      quarter_round(2, 6, 10, 14)
      quarter_round(3, 7, 11, 15)

      quarter_round(0, 5, 10, 15)
      quarter_round(1, 6, 11, 12)
      quarter_round(2, 7, 8, 13)
      quarter_round(3, 4, 9, 14)
      i += 1
    }
  }

  fn inline size -> Int {
    @words.size
  }

  fn inline get(index: Int) -> Int {
    @words.get_unchecked(index)
  }

  fn inline mut set(index: Int, value: Int) {
    @words.write_to(index, value)
  }
}

# The ChaCha stream cipher.
#
# ChaCha is a stream cipher similar to Salsa20. Our implementation is based on
# RFC 8439.
#
# This type provides only a stream cipher, no integrity/authenticity validation
# is performed.
#
# For more information about ChaCha, consider reading/watching the following
# resources:
#
# - <https://datatracker.ietf.org/doc/html/rfc8439>
# - <https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant>
# - <https://www.youtube.com/watch?v=UeIpq-C-GSA>
#
# # Limitations
#
# The implementation deviates from the RFC by using a 64-bits counter instead of
# a 32-bits counter. If the counter overflows, the `ChaCha.encrypt` and
# `ChaCha.decrypt` methods will panic.
#
# # Examples
#
# Encrypting and decrypting using the same cipher:
#
# ```inko
# import std.crypto.chacha (ChaCha)
# import std.rand (Random)
#
# let rand = Random.new
# let key = rand.bytes(size: 32)
# let nonce = rand.bytes(size: 12)
# let cipher = ChaCha.new(key, nonce)
# let secret = 'I like turtles'.to_byte_array
#
# cipher.encrypt(secret)
#
# # If we want to decrypt reusing the same cipher, we must first reset the
# # block counter to its initial value:
# cipher.counter = 0
# cipher.decrypt(secret)
#
# secret.to_string # => 'I like turtles'
# ```
#
# You can also decrypt using a new cipher, as long as the key, nonce and
# starting block counter are the same:
#
# ```inko
# import std.crypto.chacha (ChaCha)
# import std.rand (Random)
#
# let rand = Random.new
# let key = rand.bytes(size: 32)
# let nonce = rand.bytes(size: 12)
# let secret = 'I like turtles'
#
# ChaCha.new(key, nonce).encrypt(secret)
# ChaCha.new(key, nonce).decrypt(secret)
#
# secret.to_string # => 'I like turtles'
# ```
type pub inline ChaCha {
  let @matrix: Matrix
  let @buffer: ByteArray
  let @tmp: Matrix

  fn pub static with_iterations(
    iterations: Int,
    key: ref ByteArray,
    nonce: ref ByteArray,
  ) -> ChaCha {
    if key.size != KEY_SIZE { key_size_error(key.size) }

    if nonce.size != CHACHA_NONCE_SIZE {
      nonce_size_error(CHACHA_NONCE_SIZE, nonce.size)
    }

    ChaCha(
      matrix: Matrix(
        words: [
          0x61707865,
          0x3320646E,
          0x79622D32,
          0x6B206574,
          little.read_i32(from: key, at: 0),
          little.read_i32(from: key, at: 4),
          little.read_i32(from: key, at: 8),
          little.read_i32(from: key, at: 12),
          little.read_i32(from: key, at: 16),
          little.read_i32(from: key, at: 20),
          little.read_i32(from: key, at: 24),
          little.read_i32(from: key, at: 28),
          DEFAULT_COUNTER,
          little.read_i32(from: nonce, at: 0),
          little.read_i32(from: nonce, at: 4),
          little.read_i32(from: nonce, at: 8),
        ],
        iters: iterations,
      ),
      buffer: ByteArray.filled(with: 0, times: BLOCK_SIZE),
      tmp: Matrix.empty(iterations),
    )
  }

  # Returns a new ChaCha cipher from the given key and nonce, performing 20
  # rounds.
  #
  # The key _must_ be something generated randomly and securely, not something
  # predictable.
  #
  # The nonce _must_ be unique for every message encrypted using this cipher.
  # Using the same nonce for different messages weakens the encryption.
  #
  # The block counter defaults to zero.
  #
  # # Panics
  #
  # This method panics if `key` isn't exactly 32 bytes, or if `nonce` isn't
  # exactly 8 bytes.
  #
  # # Examples
  #
  # ```inko
  # import std.crypto.chacha (ChaCha)
  # import std.rand (Random)
  #
  # let rand = Random.new
  # let key = rand.bytes(size: 32)
  # let nonce = rand.bytes(size: 12)
  #
  # ChaCha.new(key, nonce)
  # ```
  #
  # In this example we use a randomly generated key and nonce. In production
  # environments you must ensure that the nonce is never reused for the same
  # key. Simply generating a random nonce isn't enough, as given enough time and
  # bad luck the same nonce may be produced.
  fn pub static new(key: ref ByteArray, nonce: ref ByteArray) -> ChaCha {
    with_iterations(CHACHA20_ITERS, key, nonce)
  }

  # Returns a new ChaCha cipher that performs 12 rounds.
  #
  # If you're unsure as to what number of rounds to use, favour the use of
  # `ChaCha.new` which uses 20 rounds, until you have a way of determining that
  # fewer rounds are acceptable.
  #
  # Refer to the documentation of `ChaCha.new` for more details.
  #
  # # Examples
  #
  # ```inko
  # import std.crypto.chacha (ChaCha)
  # import std.rand (Random)
  #
  # let rand = Random.new
  # let key = rand.bytes(size: 32)
  # let nonce = rand.bytes(size: 12)
  #
  # ChaCha.twelve_rounds(key, nonce)
  # ```
  fn pub static twelve_rounds(
    key: ref ByteArray,
    nonce: ref ByteArray,
  ) -> ChaCha {
    with_iterations(CHACHA12_ITERS, key, nonce)
  }

  # Returns a new ChaCha cipher that performs 8 rounds.
  #
  # If you're unsure as to what number of rounds to use, favour the use of
  # `ChaCha.new` which uses 20 rounds, until you have a way of determining that
  # fewer rounds are acceptable.
  #
  # Refer to the documentation of `ChaCha.new` for more details.
  #
  # # Examples
  #
  # ```inko
  # import std.crypto.chacha (ChaCha)
  # import std.rand (Random)
  #
  # let rand = Random.new
  # let key = rand.bytes(size: 32)
  # let nonce = rand.bytes(size: 12)
  #
  # ChaCha.eight_rounds(key, nonce)
  # ```
  fn pub static eight_rounds(
    key: ref ByteArray,
    nonce: ref ByteArray,
  ) -> ChaCha {
    with_iterations(CHACHA8_ITERS, key, nonce)
  }

  # Sets the block counter to the given value.
  #
  # # Panics
  #
  # This method panics if `value` is less than zero.
  fn pub mut counter=(value: Int) {
    if value < 0 { counter_size_error(value) } else { @matrix.set(12, value) }
  }

  fn mut apply(bytes: mut ByteArray) {
    let mut len = bytes.size
    let mut offset = 0

    loop {
      let mut i = 0

      while i < MATRIX_SIZE {
        @tmp.set(i, @matrix.get(i))
        i += 1
      }

      @tmp.perform_rounds

      let mut i = 0

      while i < MATRIX_SIZE {
        @tmp.set(i, to_u32(@tmp.get(i).wrapping_add(@matrix.get(i))))
        little.write_i32(@tmp.get(i), into: @buffer, at: i.wrapping_mul(4))
        i = i.wrapping_add(1)
      }

      # The chance of this overflowing is practically zero, but we use checked
      # arithmetic just in case so the counter doesn't silently overflow and
      # potentially mess things up.
      @matrix.set(
        12,
        @matrix.get(12).checked_add(1).or_panic_with(
          'the block counter overflowed',
        ),
      )

      if len <= BLOCK_SIZE {
        let mut i = 0

        while i < len {
          let idx = offset.wrapping_add(i)

          bytes.set(idx, bytes.get(idx).or_panic ^ @buffer.get(i).or_panic)
          i = i.wrapping_add(1)
        }

        return
      }

      let mut i = 0

      while i < BLOCK_SIZE {
        let idx = offset.wrapping_add(i)

        bytes.set(idx, bytes.get(idx).or_panic ^ @buffer.get(i).or_panic)
        i = i.wrapping_add(1)
      }

      len = len.wrapping_sub(BLOCK_SIZE)
      offset = offset.wrapping_add(BLOCK_SIZE)
    }
  }
}

impl Cipher for ChaCha {
  fn pub mut encrypt(bytes: mut ByteArray) {
    apply(bytes)
  }

  fn pub mut decrypt(bytes: mut ByteArray) {
    apply(bytes)
  }
}

# The XChaCha20 stream cipher.
#
# XChaCha20 combines a regular ChaCha20 stream cipher with the HChaCha20 hasher.
# It uses a 192-bits nonce, which is large enough that one can generate it
# randomly.
#
# For more information about XChaCha20 and the differences between it and
# ChaCha20, consider reading the RFC that describes XChaCha20 at
# <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha>.
type pub inline XChaCha {
  let @chacha: ChaCha

  # Returns a new XChaCha20 cipher from the given key and nonce.
  #
  # The key _must_ be something generated randomly and securely, not something
  # predictable.
  #
  # The nonce _must_ be unique for every message encrypted using this cipher.
  # Using the same nonce for different messages weakens the encryption.
  #
  # Compared to regular ChaCha20 it's fine for randomly generate the nonce, as
  # it's large enough that reuse of the same nonce is unlikely to occur.
  #
  # # Panics
  #
  # This method panics if `key` isn't exactly 32 bytes, or if `nonce` isn't
  # exactly 24 bytes.
  #
  # # Examples
  #
  # ```inko
  # import std.crypto.chacha (XChaCha)
  # import std.rand (Random)
  #
  # let rand = Random.new
  # let key = rand.bytes(size: 32)
  # let nonce = rand.bytes(size: 24)
  #
  # XChaCha.new(key, nonce)
  # ```
  fn pub static new(key: ref ByteArray, nonce: ref ByteArray) -> XChaCha {
    if key.size != KEY_SIZE { key_size_error(key.size) }

    if nonce.size != XCHACHA_NONCE_SIZE {
      nonce_size_error(XCHACHA_NONCE_SIZE, nonce.size)
    }

    let sub_key = hchacha20(key, nonce.slice(start: 0, end: 16).to_byte_array)

    XChaCha(
      ChaCha(
        matrix: Matrix(
          words: [
            0x61707865,
            0x3320646E,
            0x79622D32,
            0x6B206574,
            little.read_i32(from: sub_key, at: 0),
            little.read_i32(from: sub_key, at: 4),
            little.read_i32(from: sub_key, at: 8),
            little.read_i32(from: sub_key, at: 12),
            little.read_i32(from: sub_key, at: 16),
            little.read_i32(from: sub_key, at: 20),
            little.read_i32(from: sub_key, at: 24),
            little.read_i32(from: sub_key, at: 28),
            DEFAULT_COUNTER,
            0,
            little.read_i32(from: nonce, at: 16),
            little.read_i32(from: nonce, at: 20),
          ],
          iters: CHACHA20_ITERS,
        ),
        buffer: ByteArray.filled(with: 0, times: BLOCK_SIZE),
        tmp: Matrix.empty(CHACHA20_ITERS),
      ),
    )
  }

  # Sets the block counter to the given value.
  #
  # # Panics
  #
  # This method panics if `value` is less than zero.
  fn pub mut counter=(value: Int) {
    @chacha.counter = value
  }
}

impl Cipher for XChaCha {
  fn pub mut encrypt(bytes: mut ByteArray) {
    @chacha.encrypt(bytes)
  }

  fn pub mut decrypt(bytes: mut ByteArray) {
    @chacha.encrypt(bytes)
  }
}
