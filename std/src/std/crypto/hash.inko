# Types for cryptographic hash functions.
import std.bytes (Bytes)
import std.cmp (Equal)
import std.endian.big
import std.endian.little
import std.fmt (Format, Formatter)
import std.string (ToString)

# The digits to use when converting a digest to a hexadecimal string.
let HEX_DIGITS = '0123456789abcdef'

# A fixed-size block of bytes.
type pub Block {
  let @bytes: ByteArray

  # The index to write the next byte to.
  let mut @index: Int

  # Returns a new `Block` with the given size in bytes.
  fn pub static new(size: Int) -> Block {
    Block(bytes: ByteArray.filled(with: 0, times: size), index: 0)
  }

  # Reads an unsigned 32-bits little-endian integer from the given index.
  fn pub read_i32_le(at: Int) -> Int {
    little.read_i32(@bytes, at)
  }

  # Reads an unsigned 32-bits big-endian integer from the given index.
  fn pub read_i32_be(at: Int) -> Int {
    big.read_i32(@bytes, at)
  }

  # Reads a signed 64-bits big-endian integer from the given index.
  fn pub read_i64_be(at: Int) -> Int {
    big.read_i64(@bytes, at)
  }

  # Writes `bytes` into the block, calling `transform` if hashing is necessary.
  fn pub mut write_bytes[B: Bytes](bytes: ref B, transform: fn) {
    let mut size = bytes.size
    let mut index = 0

    while size > 0 {
      @bytes.set(@index := @index + 1, bytes.get(index).or_panic)

      if @index == @bytes.size {
        transform.call
        @index = 0
      }

      index += 1
      size -= 1
    }
  }

  # Pads the block, calling the supplied closure if the block is full and
  # hashing is necessary.
  #
  # This method expects the size to be written using a 64-bits integer.
  fn pub mut add_padding(size: Int, transform: fn) {
    let pad_to = @bytes.size - size

    if @index >= pad_to {
      @bytes.set(@index := @index + 1, 0x80)

      while @index < @bytes.size { @bytes.set(@index := @index + 1, 0) }

      transform.call
      @index = 0

      while @index < pad_to { @bytes.set(@index := @index + 1, 0) }
    } else {
      @bytes.set(@index := @index + 1, 0x80)

      while @index < pad_to { @bytes.set(@index := @index + 1, 0) }
    }
  }

  # Writes a 64-bits little-endian message size into the block.
  fn pub mut write_size_le(size: Int, at: Int) {
    little.write_i64(size, into: @bytes, at: at)
  }

  # Writes a 64-bits big-endian message size into the block.
  fn pub mut write_size_be(size: Int, at: Int) {
    big.write_i64(size, into: @bytes, at: at)
  }

  # Returns the current index to write data to.
  fn pub block_index -> Int {
    @index
  }

  # Returns the byte at the given index.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  fn pub get(index: Int) -> Int {
    @bytes.get(index).or_panic
  }

  # Sets the byte at the given index.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  fn pub mut set(index: Int, value: Int) {
    @bytes.set(index, value)
  }
}

# The output of a cryptographic or (cryptography related) universal hash
# function.
#
# Unlike `std.hash.Hash`, this type is _produced_ by hashers rather than a
# trait to implement. In addition it's aimed at hasher related to cryptography,
# such as SHA256 and Poly1305. This type isn't suitable for hashing arbitrary
# Inko types.
type pub inline Hash {
  # The bytes that make up this Hash.
  let pub @bytes: ByteArray

  # Returns a new empty `Digest`.
  fn pub static new(bytes: ByteArray) -> Hash {
    Hash(bytes)
  }
}

impl ToString for Hash {
  # Returns a hexadecimal `String` of this digest.
  fn pub to_string -> String {
    # We don't use Int.format here because we need extra padding, and to avoid
    # allocating a String for every byte.
    let hex = ByteArray.filled(with: 0, times: @bytes.size * 2)

    for (index, byte) in @bytes.iter.with_index {
      let hex_index = index * 2

      hex.set(hex_index, HEX_DIGITS.get(byte >> 4).or_panic)
      hex.set(hex_index + 1, HEX_DIGITS.get(byte & 0x0F).or_panic)
    }

    hex.into_string
  }
}

impl Equal for Hash {
  fn pub ==(other: ref Hash) -> Bool {
    @bytes == other.bytes
  }
}

impl Format for Hash {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write(to_string)
  }
}

# A cryptographic hasher.
trait pub Hasher {
  # Writes the bytes into the hasher.
  fn pub mut write[B: Bytes](bytes: ref B)

  # Generate a hash based on the current state.
  fn pub move finish -> Hash
}
