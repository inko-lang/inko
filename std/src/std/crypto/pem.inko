# Parsing of Privacy-Enhanced Main (PEM) files.
#
# This module provides types and methods for parsing PEM files as defined in
# [RFC 7468](https://www.rfc-editor.org/rfc/rfc7468).
#
# Parsing is done using the `PemFile` type, which implements `std.iter.Iter` and
# supports parsing multiple PEM sections:
#
# ```inko
# import std.crypto.pem (PemFile)
# import std.io (Buffer)
#
# let input = '
# -----BEGIN PRIVATE KEY-----
# aGVsbG8=
# -----END PRIVATE KEY-----
#
# -----BEGIN CERTIFICATE-----
# aGVsbG8=
# -----END CERTIFICATE-----
# '
#
# let parser = PemFile.new(Buffer.new(input))
#
# parser.next # => Option.Some(Result.Ok(Item.PrivateKey(...)))
# parser.next # => Option.Some(Result.Ok(Item.Certificate(...)))
# parser.next # => Option.None
# ```
#
# For more information, refer to the documentation of the `PemFile` type.
#
# # Constant-time parsing
#
# The current implementation does _not_ make use of constant-time operations (in
# the context of cryptography) for parsing, including the base64 encoded data
# found in PEM files. It's not clear if this matters either, as through timing
# attacks one should (in the worst case) only be able to derive the size of the
# base64 encoded data, not the actual data itself.
import std.base64 (Decoder)
import std.cmp (Equal)
import std.crypto.x509 (Certificate, PrivateKey)
import std.fmt (Format, Formatter)
import std.io (BufferedReader, Read)
import std.iter (Iter)

let LF = 0xA
let DASH = 0x2D

# A table indexed using bytes, with a value of `true` indicating the byte is a
# whitespace byte.
let WHITESPACE = [
  false, false, false, false, false, false, false, false, false, true, true,
  true, true, true, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, true,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false,
]

# A value/section parsed from a PEM file.
type pub inline enum Item {
  # An X.509 certificate.
  case Certificate(Certificate)

  # An X.509 private key.
  case PrivateKey(PrivateKey)
}

impl Format for Item {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Certificate(v) -> formatter.tuple('Certificate').field(v).finish
      case PrivateKey(v) -> formatter.tuple('PrivateKey').field(v).finish
    }
  }
}

impl Equal for Item {
  fn pub ==(other: ref Item) -> Bool {
    match (self, other) {
      case (Certificate(a), Certificate(b)) -> a == b
      case (PrivateKey(a), PrivateKey(b)) -> a == b
      case _ -> false
    }
  }
}

# An error produced while parsing a PEM file.
type pub inline enum ParseError[E] {
  # An IO error occurred while reading data to parse.
  case Read(E)

  # The input stream ran out of input, but more input is required.
  case EndOfInput

  # The start of a PEM section is invalid, e.g. it's missing the closing
  # `-----`.
  case InvalidSectionStart(Int)

  # The end of a PEM section is invalid, e.g. its name doesn't match the name of
  # the opening section.
  case InvalidSectionEnd(Int)

  # The base64 encoded data inside a PEM section is invalid.
  case InvalidBase64(Int)
}

impl Format for ParseError if E: Format {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Read(e) -> formatter.tuple('Read').field(e).finish
      case EndOfInput -> formatter.tuple('EndOfInput').finish
      case InvalidSectionStart(v) -> {
        formatter.tuple('InvalidSectionStart').field(v).finish
      }
      case InvalidSectionEnd(v) -> {
        formatter.tuple('InvalidSectionEnd').field(v).finish
      }
      case InvalidBase64(a) -> formatter.tuple('InvalidBase64').field(a).finish
    }
  }
}

impl Equal for ParseError if E: Equal {
  fn pub ==(other: ref ParseError[E]) -> Bool {
    match (self, other) {
      case (Read(a), Read(b)) -> a == b
      case (EndOfInput, EndOfInput) -> true
      case (InvalidSectionStart(a), InvalidSectionStart(b)) -> a == b
      case (InvalidSectionEnd(a), InvalidSectionEnd(b)) -> a == b
      case (InvalidBase64(a), InvalidBase64(b)) -> a == b
      case _ -> false
    }
  }
}

# A parser/iterator over the sections in a PEM file.
#
# Parsing is done using one of the following methods:
#
# - `PemFile.next`: parses and returns the next section found, wrapped in an
#   `Item` enum
# - `PemFile.next_certificate`: returns the next certificate
# - `PemFile.next_private_key`: returns the next private key
#
# # Examples
#
# Parsing the next item in a PEM file:
#
# ```inko
# import std.crypto.pem (PemFile)
# import std.io (Buffer)
#
# let input = '
# -----BEGIN PRIVATE KEY-----
# aGVsbG8=
# -----END PRIVATE KEY-----
# '
# let parser = PemFile.new(Buffer.new(input))
#
# parser.next # => Option.Some(Result.Ok(Item.PrivateKey(...)))
# ```
#
# Parsing the next certificate, skipping anything that comes before it:
#
# ```inko
# import std.crypto.pem (PemFile)
# import std.io (Buffer)
#
# let input = '
# -----BEGIN PRIVATE KEY-----
# aGVsbG8=
# -----END PRIVATE KEY-----
#
# -----BEGIN CERTIFICATE-----
# aGVsbG8=
# -----END CERTIFICATE-----
# '
# let parser = PemFile.new(Buffer.new(input))
#
# parser.next_certificate # => Result.Ok(Option.Some(Certificate(...)))
# ```
type pub PemFile[I: mut + Read[E], E] {
  let @input: BufferedReader[I, E]
  let mut @line: Int
  let @buffer: ByteArray
  let @decoder: Decoder

  # Returns a new parser that parses data from `input`.
  fn pub static new(input: I) -> PemFile[I, E] {
    PemFile(
      input: BufferedReader.new(input),
      line: 1,
      buffer: ByteArray.new,
      decoder: Decoder.new,
    )
  }

  # Returns the next certificate found in the PEM file.
  #
  # # Examples
  #
  # ```inko
  # import std.crypto.pem (PemFile)
  # import std.io (Buffer)
  #
  # let input = '
  # -----BEGIN CERTIFICATE-----
  # aGVsbG8=
  # -----END CERTIFICATE-----
  # '
  #
  # let pem = PemFile.new(Buffer.new(input))
  #
  # pem.next_certificate # => Result.Ok(Option.Some(Certificate(...)))
  # ```
  fn pub mut next_certificate -> Result[Option[Certificate], ParseError[E]] {
    loop {
      match parse {
        case Ok(Some(Certificate(v))) -> return Result.Ok(Option.Some(v))
        case Ok(Some(_)) -> {}
        case Error(e) -> throw e
        case _ -> return Result.Ok(Option.None)
      }
    }
  }

  # Returns the next private key found in the PEM file.
  #
  # # Examples
  #
  # ```inko
  # import std.crypto.pem (PemFile)
  # import std.io (Buffer)
  #
  # let input = '
  # -----BEGIN PRIVATE KEY-----
  # aGVsbG8=
  # -----END PRIVATE KEY-----
  # '
  #
  # let pem = PemFile.new(Buffer.new(input))
  #
  # pem.next_private_key # => Result.Ok(Option.Some(PrivateKey(...)))
  # ```
  fn pub mut next_private_key -> Result[Option[PrivateKey], ParseError[E]] {
    loop {
      match parse {
        case Ok(Some(PrivateKey(v))) -> return Result.Ok(Option.Some(v))
        case Ok(Some(_)) -> {}
        case Error(e) -> throw e
        case _ -> return Result.Ok(Option.None)
      }
    }
  }

  fn mut parse -> Result[Option[Item], ParseError[E]] {
    let mut start = true

    loop {
      match @input.read_byte {
        case Ok(Some(LF)) -> {
          @line += 1
          start = true
        }
        case Ok(Some(v)) if WHITESPACE.get(v).or_panic -> start = false
        case Ok(Some(DASH)) if start -> break
        case Ok(Some(_)) -> throw ParseError.InvalidSectionStart(@line)
        case Ok(_) -> return Result.Ok(Option.None)
        case Error(e) -> throw ParseError.Read(e)
      }
    }

    match @input.read_exact(into: @buffer, size: 10) {
      case Ok(_) -> {}
      case Error(EndOfInput) -> throw ParseError.EndOfInput
      case Error(Read(e)) -> throw ParseError.Read(e)
    }

    if !@buffer.equals?('----BEGIN ') {
      throw ParseError.InvalidSectionStart(@line)
    }

    @buffer.clear

    match @input.read_until(byte: DASH, into: @buffer, inclusive: false) {
      case Ok(0) -> throw ParseError.EndOfInput
      case Ok(_) -> {}
      case Error(e) -> throw ParseError.Read(e)
    }

    if @buffer.empty? { throw ParseError.InvalidSectionStart(@line) }

    let name = @buffer.drain_to_string

    match @input.read_line(into: @buffer, inclusive: false) {
      case Ok(0) -> throw ParseError.EndOfInput
      case Ok(_) -> {}
      case Error(e) -> throw ParseError.Read(e)
    }

    if !@buffer.equals?('----') { throw ParseError.InvalidSectionStart(@line) }

    @buffer.clear

    let res = match name {
      case 'CERTIFICATE' -> {
        Item.Certificate(Certificate.new(try read_base64(name)))
      }
      case 'PRIVATE KEY' or 'RSA PRIVATE KEY' or 'DSA PRIVATE KEY' -> {
        Item.PrivateKey(PrivateKey.new(try read_base64(name)))
      }
      case _ -> throw ParseError.InvalidSectionStart(@line)
    }

    Result.Ok(Option.Some(res))
  }

  fn mut read_base64(name: String) -> Result[ByteArray, ParseError[E]] {
    let decoded = ByteArray.new

    loop {
      loop {
        # Per the RFC, parsers should ignore leading whitespace and newlines on
        # each base64 line.
        match @input.read_byte {
          case Ok(Some(LF)) -> @line += 1
          case Ok(Some(v)) if WHITESPACE.get(v).or_panic -> {}
          case Ok(Some(v)) -> {
            @buffer.push(v)
            break
          }
          case Ok(_) -> throw ParseError.EndOfInput
          case Error(e) -> throw ParseError.Read(e)
        }
      }

      match @input.read_line(into: @buffer, inclusive: false) {
        case Ok(0) -> throw ParseError.EndOfInput
        case Ok(_) -> @line += 1
        case Error(e) -> throw ParseError.Read(e)
      }

      if @buffer.get(0).or_panic == DASH {
        if
          !(@buffer.starts_with?('-----END ') and @buffer.ends_with?('-----'))
        {
          throw ParseError.InvalidSectionEnd(@line)
        }

        # Chop off the trailing dashes, such that we can compare the remaining
        # tail with the expected section name.
        @buffer.resize(@buffer.size - 5, value: 0)

        if @buffer.size != (name.size + 9) or !@buffer.ends_with?(name) {
          throw ParseError.InvalidSectionEnd(@line)
        }

        @buffer.clear
        break
      }

      # The decoder ensures the size is a multiple of 4. In case the line is
      # wrapper per RFC 2045, the maximum size is 76 which is still a multiple
      # of 4. This means we can decode in chunks without having to worry about
      # padding being expected in the middle.
      try @decoder.decode(@buffer, into: decoded).map_error(fn (_) {
        ParseError.InvalidBase64(@line)
      })

      @buffer.clear
    }

    Result.Ok(decoded)
  }
}

impl Iter[Result[Item, ParseError[E]]] for PemFile {
  # Returns the next item (a certificate, private key, etc) found in the input
  # stream.
  #
  # # Errors
  #
  # If parsing fails, the return value is an `Option` wrapping a `ParseError`
  # error. In this case one should stop the parsing process, as the parser's
  # internal state isn't reset upon encountering an error and continuing to use
  # it may yield unexpected results.
  fn pub mut next -> Option[Result[Item, ParseError[E]]] {
    match parse {
      case Ok(Some(v)) -> Option.Some(Result.Ok(v))
      case Ok(_) -> Option.None
      case Error(e) -> Option.Some(Result.Error(e))
    }
  }
}
