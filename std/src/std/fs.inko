# General types for filesystem operations.
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.fs.path (Path)
import std.time (DateTime)

# A type describing the type of file, such as a file or directory.
type pub copy enum FileType {
  # The file is a file.
  case File

  # The file is a directory.
  case Directory

  # The file is a symbolic link.
  case SymbolicLink

  # The file is something else that isn't explicitly covered by this type.
  case Other

  # Returns `true` if `self` is a file.
  fn pub file? -> Bool {
    match self {
      case File -> true
      case _ -> false
    }
  }

  # Returns `true` if `self` is a directory.
  fn pub directory? -> Bool {
    match self {
      case Directory -> true
      case _ -> false
    }
  }

  # Returns `true` if `self` is a symbolic link.
  fn pub symbolic_link? -> Bool {
    match self {
      case SymbolicLink -> true
      case _ -> false
    }
  }
}

impl Equal for FileType {
  fn pub ==(other: FileType) -> Bool {
    match (self, other) {
      case (File, File) -> true
      case (Directory, Directory) -> true
      case (SymbolicLink, SymbolicLink) -> true
      case (Other, Other) -> true
      case _ -> false
    }
  }
}

impl Format for FileType {
  fn pub fmt(formatter: mut Formatter) {
    let name = match self {
      case File -> 'File'
      case Directory -> 'Directory'
      case SymbolicLink -> 'SymbolicLink'
      case Other -> 'Other'
    }

    formatter.tuple(name).finish
  }
}

# An entry in a directory.
#
# Instances of this type are typically produced by `std.fs.path.Path.list`,
# so see that method's documentation for additional details.
type pub inline DirectoryEntry {
  # The path to the entry.
  let pub @path: Path

  # The type of this entry.
  let pub @type: FileType
}

impl Equal for DirectoryEntry {
  fn pub ==(other: ref DirectoryEntry) -> Bool {
    @path == other.path and @type == other.type
  }
}

impl Format for DirectoryEntry {
  fn pub fmt(formatter: mut Formatter) {
    formatter
      .object('DirectoryEntry')
      .field('path', @path)
      .field('type', @type)
      .finish
  }
}

# A file timestamp expressed as a number of seconds and nanoseconds.
#
# The seconds and nanoseconds are stored separately to ensure no loss of
# precision, something that might happen when storing the time as a `Float`.
type pub copy Time {
  # The seconds of the timestamp.
  let pub @secs: Int

  # The nanoseconds after the second of the timestamp.
  let pub @nanos: Int

  # Returns the timestamp as the seconds and sub seconds since the epoch.
  fn pub to_secs -> Float {
    @secs.to_float + (@nanos.to_float / 1_000_000_000.0)
  }

  # Returns the timestamp as the nanoseconds since the epoch.
  #
  # # Panics
  #
  # If the time is more than 292 years in the future or in the past relative to
  # the epoch, this method may panic.
  fn pub to_nanos -> Int {
    @secs * 1_000_000_000 + @nanos
  }

  # Converts `self` into a `DateTime`.
  #
  # The returned `DateTime` uses UTC as its offset.
  #
  # # Panics
  #
  # This method may panic if the time can't be expressed in a `DateTime`. This
  # can only happen if the system clock is returning nonsensical values (e.g. a
  # year outside of the 32-bits signed integer range).
  fn pub to_date_time -> DateTime {
    DateTime.from_timestamp(to_secs, utc_offset: 0).get
  }
}

# A type containing metadata of a file or directory, such as its type and
# creation time.
type pub inline Metadata {
  # The type of the file.
  let pub @type: FileType

  # The ownership/mode of the file.
  let @mode: Int

  # The size of the file in bytes.
  let pub @size: Int

  # The Unix epoch at which the file was created.
  #
  # This corresponds to the `btime` field of `statx()` on Linux, and the
  # `birthtime` field on other Unix platforms.
  #
  # Support for creationg times is a bit inconsistent: FreeBSD and macOS have
  # supported it for a long time, but Linux only supports it since 4.11. Even
  # then, depending on the file system the creation time might not be available
  # (e.g. `/proc/stat` on Linux doesn't have one), or the system call might not
  # be available for other reasons (e.g. it's blocked).
  let pub @created_at: Option[Time]

  # The Unix epoch at which the file was last modified.
  #
  # This corresponds to the "mtime" field of `stat()` on Unix systems.
  let pub @modified_at: Time

  # The Unix epoch at which the file was last accessed.
  #
  # This corresponds to the `atime` field of `stat()` on Unix systems.
  let pub @accessed_at: Time
}
