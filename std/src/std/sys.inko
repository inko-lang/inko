# Types and methods for interacting with the underlying system.
import std.bytes (Bytes)
import std.drop (Drop, drop)
import std.env
import std.fs.path (Path)
import std.int (ToInt)
import std.io (Error, Read, Write, WriteInternal)
import std.string (ToString)
import std.sys.unix.sys if unix

# Returns the number of available CPU cores of the current system.
#
# This returns the number of _logical_ cores, with a minimum value of 1.
fn pub cpu_cores -> Int {
  (_INKO.state as Int + 24 as Pointer[Int64]).0 as Int
}

# Terminates the program with the given exit status.
#
# The exit status can be a number between -2147483648 and 2147483647.
#
# When called, the current process terminates immediately, but other processes
# _may_ continue to run for a short while. In addition, processes terminate
# _without_ dropping any values that are still live.
#
# If multiple processes call this method concurrently, the exit status is set to
# the value of the last call. Due to the order in which processes run, this may
# not be deterministic. It's recommended to only call this method from a single
# process (i.e. the main process).
#
# # Examples
#
# ```inko
# import std.sys
#
# sys.exit(1)
# ```
fn pub exit(status: Int) -> Never {
  sys.exit(status)
}

# A type that describes what to do with an input/output stream of a command.
type pub copy enum Stream {
  # A stream that should be redirected to the null device.
  case Null

  # The stream inherits from the parent process.
  case Inherit

  # The stream is piped to a separate buffer.
  case Piped
}

impl ToInt for Stream {
  # Converts `self` into it's numerical equivalent.
  fn pub to_int -> Int {
    match self {
      case Null -> 0
      case Inherit -> 1
      case Piped -> 2
    }
  }
}

# A builder type for a `ChildProcess`.
#
# This type is used to define arguments, environment variables, what to do with
# the standard input/output streams, etc.
#
# Once a command is prepared, you can spawn it using `Command.spawn`, returning
# a `ChildProcess`.
#
# # Redirecting standard input/output streams
#
# By default STDIN, STDOUT, and STDERR are inherited. These streams can be
# changed to being redirected to the null device, or to be piped to a buffer.
# For example, to pipe STDOUT:
#
# ```inko
# import std.sys (Command, Stream)
#
# let cmd = Command.new('ls')
#
# cmd.stdout = Stream.Piped
# cmd.spawn.get
# ```
#
# We can also ignore a stream:
#
# ```inko
# import std.sys (Command, Stream)
#
# let cmd = Command.new('ls')
#
# cmd.stderr = Stream.Null
# cmd.spawn.get
# ```
#
# # Waiting for the child process
#
# The method `Command.spawn` returns a `ChildProcess`. This object is used for
# reading/writing the standard input/output streams, and to wait for the process
# to terminate. Waiting for a process is done using `ChildProcess.wait`:
#
# ```inko
# import std.sys (Command)
#
# let child = Command.new('ls').spawn
# let status = child.wait.get
# ```
#
# There's also `ChildProcess.try_wait`, which returns immediately if the process
# is still running, instead of waiting for it to finish.
#
# The input and output streams are accessed using `ChildProcess.stdin`,
# `ChildProcess.stdout`, and `ChildProcess.stderr`. For example, to read from
# STDOUT:
#
# ```inko
# import std.sys (Command, Stream)
#
# let cmd = Command.new('ls')
#
# cmd.stdout = Stream.Piped
#
# let child = cmd.spawn.get
# let status = child.wait.get
# let bytes = ByteArray.new
#
# match child.stdout {
#   case Some(v) -> v.read_all(bytes).get
#   case _ -> {}
# }
# ```
type pub Command {
  # The path to the program to spawn.
  let pub mut @program: String

  # What to do with the STDIN stream.
  let pub mut @stdin: Stream

  # What to do with the STDOUT stream.
  let pub mut @stdout: Stream

  # What to do with the STDERR stream.
  let pub mut @stderr: Stream

  # The arguments to pass to the command.
  let pub mut @arguments: Array[String]

  # The environment variables to pass to the command.
  #
  # This `Map` defaults to all the environment variables available at the time
  # the program started.
  let pub mut @variables: Map[String, String]

  # The working directory to use for the command.
  let pub mut @directory: Option[Path]

  # Creates a new `Command` that will run the given program.
  #
  # The program can either be the name (e.g. `ls`), or a path to the command
  # (e.g. `/usr/bin/ls`). If just a name is given, the `PATH` variable is
  # searched to find the path to the command.
  #
  # The input and output streams default to inheriting from their parent (= the
  # current OS process).
  #
  # # Examples
  #
  # Using a command name:
  #
  # ```inko
  # import std.sys (Command)
  #
  # Command.new('ls')
  # ```
  #
  # Using a command path:
  #
  # ```inko
  # import std.sys (Command)
  #
  # Command.new('/usr/bin/ls')
  # ```
  fn pub static new[T: ToString](program: ref T) -> Command {
    Command(
      program: program.to_string,
      stdin: Stream.Inherit,
      stdout: Stream.Inherit,
      stderr: Stream.Inherit,
      arguments: [],
      variables: env.variables,
      directory: Option.None,
    )
  }

  # Returns the working directory to use for the child process, if any.
  fn pub mut directory -> Option[Path] {
    @directory.clone
  }

  # Sets the working directory to use for the child process.
  #
  # # Examples
  #
  # ```inko
  # import std.sys (Command)
  #
  # let cmd = Command.new('ls')
  #
  # cmd.directory = '/'.to_path
  # ```
  fn pub mut directory=(path: Path) {
    @directory = Option.Some(path)
  }

  # Spawns a child process that runs the command.
  #
  # # Examples
  #
  # ```inko
  # import std.sys (Command)
  #
  # let child = Command.new('ls').spawn.get
  #
  # child.wait.get
  # ```
  fn pub spawn -> Result[ChildProcess, Error] {
    sys
      .spawn(
        @program,
        @arguments,
        @variables,
        @directory.as_ref.map(fn (v) { v.to_string }),
        @stdin,
        @stdout,
        @stderr,
      )
      .map(fn (v) { ChildProcess.new(v) })
  }
}

# The status of a process after it terminated.
type pub copy ExitStatus {
  # The raw exit code.
  let @code: Int

  fn pub static new(code: Int) -> ExitStatus {
    ExitStatus(code)
  }

  # Returns `true` if the status signals success.
  #
  # # Examples
  #
  # ```inko
  # import std.sys (ExitStatus)
  #
  # ExitStatus.new(0).success? # => true
  # ExitStatus.new(1).success? # => false
  # ```
  fn pub success? -> Bool {
    @code == 0
  }
}

impl ToInt for ExitStatus {
  fn pub to_int -> Int {
    @code
  }
}

# The standard input stream of a child process.
type pub inline Stdin {
  let @fd: Int32
}

impl Drop for Stdin {
  fn mut drop {
    sys.close(@fd)
  }
}

impl WriteInternal for Stdin {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    sys.write(@fd, data, size)
  }
}

impl Write[Error] for Stdin {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, Error] {
    write_all_internal(bytes.pointer, bytes.size)
  }

  fn pub mut flush -> Result[Nil, Error] {
    Result.Ok(nil)
  }
}

# The standard output stream of a child process.
type pub inline Stdout {
  let @fd: Int32
}

impl Drop for Stdout {
  fn mut drop {
    sys.close(@fd)
  }
}

impl Read[Error] for Stdout {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    sys.read(@fd, into, size)
  }
}

# The standard error stream of a child process.
type pub inline Stderr {
  let @fd: Int32
}

impl Drop for Stderr {
  fn mut drop {
    sys.close(@fd)
  }
}

impl Read[Error] for Stderr {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    sys.read(@fd, into, size)
  }
}

# A running or exited child OS process.
type pub ChildProcess {
  # The ID of the child process.
  let @id: Int32

  # A handle to the captured input stream of the child process.
  let pub mut @stdin: Option[Stdin]

  # A handle to the captured output stream of the child process.
  let pub mut @stdout: Option[Stdout]

  # A handle to the captured error stream of the child process.
  let pub mut @stderr: Option[Stderr]

  fn static new(inner: sys.ChildProcess) -> ChildProcess {
    let stdin = match inner.stdin {
      case Some(v) -> Option.Some(Stdin(v))
      case _ -> Option.None
    }
    let stdout = match inner.stdout {
      case Some(v) -> Option.Some(Stdout(v))
      case _ -> Option.None
    }
    let stderr = match inner.stderr {
      case Some(v) -> Option.Some(Stderr(v))
      case _ -> Option.None
    }

    ChildProcess(id: inner.id, stdin: stdin, stdout: stdout, stderr: stderr)
  }

  # Waits for the child process to finish running, and returns an `ExitStatus`
  # containing the exit status.
  #
  # The child's STDIN stream (if any) is closed before waiting, avoiding
  # deadlocks caused by child processes waiting for input from the parent while
  # the parent waits for the child to exit.
  #
  # Note that if you try to read from STDOUT or STDERR before calling
  # `ChildProcess.wait` _without_ closing STDIN first, the parent process may
  # still deadlock as the read might not return and thus prevent
  # `ChildProcess.wait` from first closing STDIN.
  #
  # To prevent this from happening, always make sure STDIN is closed _before_
  # reading from STDOUT or STDERR _if_ the read happens _before_ a call to
  # `ChildProcess.wait`.
  fn pub mut wait -> Result[ExitStatus, Error] {
    drop(@stdin := Option.None)
    sys.wait(@id).map(fn (v) { ExitStatus(v) })
  }

  # Returns the exit status of the child process without blocking the calling
  # process.
  #
  # If the process is still running, an `Option.None` is returned. If the
  # process exited, an `Option.Some(ExitStatus)` is returned.
  #
  # This method doesn't close STDIN before waiting.
  fn pub try_wait -> Result[Option[ExitStatus], Error] {
    match sys.try_wait(@id) {
      case Ok(None) -> Result.Ok(Option.None)
      case Ok(Some(n)) -> Result.Ok(Option.Some(ExitStatus(n)))
      case Error(e) -> Result.Error(e)
    }
  }
}
