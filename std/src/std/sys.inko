# Types and methods for interacting with the underlying system.
import std.drop.Drop
import std.fs.path.Path
import std.int.ToInt
import std.io.(Error, Read, Write)
import std.string.IntoString

class extern AnyResult {
  let @tag: Int
  let @value: UInt64
}

class extern IntResult {
  let @tag: Int
  let @value: Int
}

fn extern inko_child_process_spawn(
  process: Pointer[UInt8],
  program: String,
  args: Pointer[String],
  args_size: Int,
  env: Pointer[String],
  env_size: Int,
  stdin: Int,
  stdout: Int,
  stderr: Int,
  directory: String
) -> AnyResult

fn extern inko_child_process_drop(child: Pointer[UInt8])
fn extern inko_child_process_stdout_close(child: Pointer[UInt8])
fn extern inko_child_process_stderr_close(child: Pointer[UInt8])
fn extern inko_child_process_stdin_close(child: Pointer[UInt8])
fn extern inko_child_process_stderr_read(
  process: Pointer[UInt8],
  child: Pointer[UInt8],
  buffer: mut ByteArray,
  size: Int
) -> IntResult

fn extern inko_child_process_stdout_read(
  process: Pointer[UInt8],
  child: Pointer[UInt8],
  buffer: mut ByteArray,
  size: Int
) -> IntResult

fn extern inko_child_process_stdin_flush(
  process: Pointer[UInt8],
  child: Pointer[UInt8],
) -> AnyResult

fn extern inko_child_process_stdin_write_bytes(
  process: Pointer[UInt8],
  child: Pointer[UInt8],
  input: ref ByteArray,
) -> IntResult

fn extern inko_child_process_stdin_write_string(
  process: Pointer[UInt8],
  child: Pointer[UInt8],
  input: String,
) -> IntResult

fn extern inko_child_process_try_wait(child: Pointer[UInt8]) -> IntResult
fn extern inko_child_process_wait(
  process: Pointer[UInt8],
  child: Pointer[UInt8],
) -> IntResult

fn extern inko_cpu_cores -> Int
fn extern inko_exit(status: Int) -> Never

# Returns the number of available CPU cores of the current system.
#
# This returns the number of _logical_ cores, with a minimum value of 1.
fn pub cpu_cores -> Int {
  inko_cpu_cores
}

# Terminates the program with the given exit status.
#
# The exit status can be a number between -2147483648 and 2147483647.
#
# When called, the current process terminates immediately, but other processes
# _may_ continue to run for a short while. In addition, processes terminate
# _without_ dropping any values that are still live.
#
# If multiple processes call this method concurrently, the exit status is set to
# the value of the last call. Due to the order in which processes run, this may
# not be deterministic. It's recommended to only call this method from a single
# process (i.e. the main process).
#
# # Examples
#
#     import std.sys
#
#     sys.exit(1)
fn pub exit(status: Int) -> Never {
  inko_exit(status)
}

# A type that describes what to do with an input/output stream of a command.
class pub enum Stream {
  # A stream that should be redirected to the null device.
  case Null

  # The stream inherits from the parent process.
  case Inherit

  # The stream is piped to a separate buffer.
  case Piped
}

impl ToInt for Stream {
  # Converts `self` into it's numerical equivalent.
  fn pub to_int -> Int {
    match self {
      case Null -> 0
      case Inherit -> 1
      case Piped -> 2
    }
  }
}

# A builder type for a `ChildProcess`.
#
# This type is used to define arguments, environment variables, what to do with
# the standard input/output streams, etc.
#
# Once a command is prepared, you can spawn it using `Command.spawn`, returning
# a `ChildProcess`.
#
# # Redirecting standard input/output streams
#
# By default STDIN, STDOUT, and STDERR are inherited. These streams can be
# changed to being redirected to the null device, or to be piped to a buffer.
# For example, to pipe STDOUT:
#
#     import std.sys.(Command, Stream)
#
#     Command.new('ls').stdout(Stream.Piped).spawn.unwrap
#
# We can also ignore a stream:
#
#     import std.sys.(Command, Stream)
#
#     Command.new('ls').stderr(Stream.Null).spawn.unwrap
#
# # Waiting for the child process
#
# The method `Command.spawn` returns a `ChildProcess`. This object is used for
# reading/writing the standard input/output streams, and to wait for the process
# to terminate. Waiting for a process is done using `ChildProcess.wait`:
#
#     import std.sys.Command
#
#     let child = Command.new('ls').unwrap
#
#     child.wait.unwrap
#
# There's also `ChildProcess.try_wait`, which returns immediately if the process
# is still running; instead of waiting for it to finish.
#
# The input and output streams are accessed using `ChildProcess.stdin`,
# `ChildProcess.stdout`, and `ChildProcess.stderr`. For example, to read from
# STDOUT:
#
#     import std.sys.Command
#
#     let child = Command.new('ls').unwrap
#     let bytes = ByteArray.new
#
#     child.wait.unwrap
#     child.stdout.read_all(bytes).unwrap
class pub Command {
  # The path to the program to spawn.
  let @program: String

  # What to do with the STDIN stream.
  let @stdin: Stream

  # What to do with the STDOUT stream.
  let @stdout: Stream

  # What to do with the STDERR stream.
  let @stderr: Stream

  # The arguments to pass to the command.
  let @arguments: Array[String]

  # The environment variables to pass to the command.
  #
  # The order in which variables are passed isn't guaranteed.
  let @variables: Map[String, String]

  # The working directory to use for the command.
  let @directory: Option[String]

  # Creates a new `Command` that will run the given program.
  #
  # The program can either be the name (e.g. `ls`), or a path to the command
  # (e.g. `/usr/bin/ls`). If just a name is given, the `PATH` variable is
  # searched to find the path to the command.
  #
  # The input and output streams default to inheriting from their parent (= the
  # current OS process).
  #
  # # Examples
  #
  # Using a command name:
  #
  #     import std.sys.Command
  #
  #     Command.new('ls')
  #
  # Using a command path:
  #
  #     import std.sys.Command
  #
  #     Command.new('/usr/bin/ls')
  fn pub static new[T: IntoString](program: T) -> Command {
    Command {
      @program = program.into_string,
      @stdin = Stream.Inherit,
      @stdout = Stream.Inherit,
      @stderr = Stream.Inherit,
      @arguments = [],
      @variables = Map.new,
      @directory = Option.None
    }
  }

  # Returns the program to start.
  fn pub program -> String {
    @program
  }

  # Sets the working directory of the command.
  #
  # # Examples
  #
  #     import std.sys.Command
  #
  #     Command.new('ls').directory('/tmp')
  fn pub mut directory[T: IntoString](path: T) {
    @directory = Option.Some(path.into_string)
  }

  # Returns the current working directory, if any was set.
  fn pub current_directory -> ref Option[String] {
    @directory
  }

  # Adds a single argument to the command.
  #
  # # Examples
  #
  #     import std.sys.Command
  #
  #     Command.new('ls').argument('/tmp')
  fn pub mut argument(value: String) {
    @arguments.push(value)
  }

  # Adds multiple arguments to the command.
  #
  # # Examples
  #
  #     import std.sys.Command
  #
  #     Command.new('ls').arguments(['/tmp', '/usr'])
  fn pub mut arguments(values: Array[String]) {
    @arguments.append(values)
  }

  # Returns the arguments added so far.
  fn pub current_arguments -> ref Array[String] {
    @arguments
  }

  # Adds or updates an environment variable to the command.
  #
  # # Examples
  #
  #     import std.sys.Command
  #
  #     Command.new('env').variable(name: 'FOO', value: 'bar')
  fn pub mut variable(name: String, value: String) {
    @variables.set(name, value)
  }

  # Adds or updates multiple environment variables to the command.
  #
  # # Examples
  #
  #     import std.sys.Command
  #
  #     let vars = Map.new
  #
  #     vars['FOO'] = 'bar'
  #
  #     Command.new('env').variables(vars)
  fn pub mut variables(values: Map[String, String]) {
    @variables.merge(values)
  }

  # Returns the variables added so far.
  fn pub current_variables -> ref Map[String, String] {
    @variables
  }

  # Configures the STDIN stream.
  fn pub mut stdin(stream: Stream) {
    @stdin = stream
  }

  # Configures the STDOUT stream.
  fn pub mut stdout(stream: Stream) {
    @stdout = stream
  }

  # Configures the STDERR stream.
  fn pub mut stderr(stream: Stream) {
    @stderr = stream
  }

  # Spawns a child process that runs the command.
  #
  # # Examples
  #
  #     let child = Command.new('ls').spawn.unwrap
  #
  #     child.wait.unwrap
  fn pub spawn -> Result[ChildProcess, Error] {
    let vars = []

    @variables.iter.each fn (entry) {
      vars.push(entry.key)
      vars.push(entry.value)
    }

    match inko_child_process_spawn(
      _INKO.process,
      @program.to_string,
      @arguments.to_pointer,
      @arguments.size,
      vars.to_pointer,
      vars.size,
      @stdin.to_int,
      @stdout.to_int,
      @stderr.to_int,
      @directory.as_ref.unwrap_or(ref ''),
    ) {
      case { @tag = 0, @value = v } -> Result.Ok(
        ChildProcess { @raw = v as Pointer[UInt8] }
      )
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }
}

# The status of a process after it terminated.
class pub ExitStatus {
  # The raw exit code.
  let @code: Int

  fn pub static new(code: Int) -> ExitStatus {
    ExitStatus { @code = code }
  }

  # Returns `true` if the status signals success.
  #
  # # Examples
  #
  #     import std.sys.ExitStatus
  #
  #     ExitStatus.new(0).success? # => true
  #     ExitStatus.new(1).success? # => false
  fn pub success? -> Bool {
    @code == 0
  }
}

impl ToInt for ExitStatus {
  fn pub to_int -> Int {
    @code
  }
}

# The standard input stream.
class pub Stdin {
  # The child process the stream is connected to.
  let @process: ref ChildProcess

  fn pub static new(process: ref ChildProcess) -> Stdin {
    Stdin { @process = process }
  }
}

impl Drop for Stdin {
  fn mut drop {
    inko_child_process_stdin_close(@process.raw)
  }
}

impl Write for Stdin {
  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Int, Error] {
    match inko_child_process_stdin_write_bytes(
      _INKO.process, @process.raw, bytes
    ) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }

  fn pub mut write_string(string: String) -> Result[Int, Error] {
    match inko_child_process_stdin_write_string(
      _INKO.process, @process.raw, string.to_string
    ) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }

  fn pub mut flush -> Result[Nil, Error] {
    match inko_child_process_stdin_flush(_INKO.process, @process.raw) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }
}

# The standard output stream.
class pub Stdout {
  # The child process the stream is connected to.
  let @process: ref ChildProcess

  fn pub static new(process: ref ChildProcess) -> Stdout {
    Stdout { @process = process }
  }
}

impl Drop for Stdout {
  fn mut drop {
    inko_child_process_stdout_close(@process.raw)
  }
}

impl Read for Stdout {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    match inko_child_process_stdout_read(
      _INKO.process, @process.raw, into, size
    ) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

# The standard error output stream.
class pub Stderr {
  # The child process the stream is connected to.
  let @process: ref ChildProcess

  fn pub static new(process: ref ChildProcess) -> Stderr {
    Stderr { @process = process }
  }
}

impl Drop for Stderr {
  fn mut drop {
    inko_child_process_stderr_close(@process.raw)
  }
}

impl Read for Stderr {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    match inko_child_process_stderr_read(
      _INKO.process, @process.raw, into, size
    ) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

# A running or exited child OS process.
class pub ChildProcess {
  # A raw pointer to the OS process.
  let @raw: Pointer[UInt8]

  # Returns a handle to the standard output stream.
  fn pub stdout -> Stdout {
    Stdout.new(self)
  }

  # Returns a handle to the standard error stream.
  fn pub stderr -> Stderr {
    Stderr.new(self)
  }

  # Returns a handle to the standard input stream.
  fn pub stdin -> Stdin {
    Stdin.new(self)
  }

  # Waits for the process to terminate.
  #
  # The STDIN stream is closed before waiting.
  fn pub wait -> Result[ExitStatus, Error] {
    match inko_child_process_wait(_INKO.process, @raw) {
      case { @tag = 0, @value = v } -> Result.Ok(ExitStatus.new(v))
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }

  # Returns the exit status without blocking.
  #
  # If the process is still running, a None is returned.
  #
  # This method doesn't close the STDIN stream before waiting.
  fn pub try_wait -> Result[Option[ExitStatus], Error] {
    match inko_child_process_try_wait(@raw) {
      case { @tag = 0, @value = -1 } -> Result.Ok(Option.None)
      case { @tag = 0, @value = v } -> Result.Ok(Option.Some(ExitStatus.new(v)))
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Drop for ChildProcess {
  fn mut drop {
    inko_child_process_drop(@raw)
  }
}
