# IPv4 and IPv6 address types.
import std.bytes (Bytes, Slice)
import std.bytes.parsers (digit?)
import std.clone (Clone)
import std.cmp (Equal)
import std.fmt (Format as FormatTrait, Formatter)
import std.hash (Hash, Hasher)
import std.int (Format)
import std.string (IntoString, StringBuffer, ToString)

let PLUS = 43
let MINUS = 45
let DOT = 46
let ZERO = 48
let COLON = 58

# The number of octets in an IPv4 address.
let IPV4_OCTETS = 4

# The number of hextets in an IPv6 address.
let IPV6_HEXTETS = 8

# The minimum value of an IPv4 octet or IPv6 hextet.
let IP_MINIMUM_VALUE = 0

# The maximum value of an IPv4 octet.
let IPV4_OCTET_MAXIMUM = 0xff

# The maximum value of an IPv6 hextet.
let IPV6_HEXTET_MAXIMUM = 0xffff

# The maximum number of characters that can appear in an IPv6 address stored as
# a `String`.
let IPV6_STRING_MAXIMUM_LENGTH = 45

# The number of bits to shift for the first and third octets in an IPv4 address
# when converting them to IPv6 addresses.
let IPV4_TOIPV6_SHIFT = 8

# Converts a pair of IPv4 octets into a single IPv6 hextet.
fn octets_to_hextet(first: Int, second: Int) -> Int {
  first << IPV4_TOIPV6_SHIFT | second
}

# An IPv4 or IPv6 address.
type pub copy enum IpAddress {
  # An IPv4 address.
  case V4(Ipv4Address)

  # An IPv6 address.
  case V6(Ipv6Address)

  # Returns a new IPv4 address.
  #
  # This is a shortcut for `IpAddress.V4(Ipv4Address.new(...))`.
  #
  # # Examples
  #
  # ```inko
  # import std.net.ip (IpAddress)
  #
  # IpAdress.v4(127, 0, 0, 1)
  # ```
  fn pub static v4(a: Int, b: Int, c: Int, d: Int) -> IpAddress {
    V4(Ipv4Address.new(a, b, c, d))
  }

  # Returns a new IPv6 address.
  #
  # This is a shortcut for `IpAddress.V6(Ipv6Address.new(...))`.
  #
  # # Examples
  #
  # ```inko
  # import std.net.ip (IpAddress)
  #
  # IpAdress.v6(0, 0, 0, 0, 0, 0, 0, 1)
  # ```
  fn pub static v6(
    a: Int,
    b: Int,
    c: Int,
    d: Int,
    e: Int,
    f: Int,
    g: Int,
    h: Int,
  ) -> IpAddress {
    V6(Ipv6Address.new(a, b, c, d, e, f, g, h))
  }

  # Parses an IPv4 or IPv6 address.
  #
  # This method _only_ supports IPv4 or IPv6 _addresses_. Port numbers, IPv6
  # zones, and CIDR masks are not supported.
  #
  # # Examples
  #
  # Parsing an IPv4 address:
  #
  # ```inko
  # import std.net.ip (IpAddress)
  #
  # IpAddress.parse('1.2.3.4') # => Option.Some(IpAddress.V4(Ipv4Address.new(1, 2, 3, 4)))
  # ```
  #
  # Parsing an IPv6 address:
  #
  # ```inko
  # import std.net.ip (IpAddress)
  #
  # IpAddress.parse('::1') # => Option.Some(IpAddress.V6(Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 1)))
  # ```
  fn pub static parse[B: Bytes](address: ref B) -> Option[IpAddress] {
    if address.contains_bytes?(':') {
      Ipv6Address.parse(address).map(fn (v) { V6(v) })
    } else {
      Ipv4Address.parse(address).map(fn (v) { V4(v) })
    }
  }

  # Returns `true` if `self` is an IPv4 address.
  fn pub v4? -> Bool {
    match self {
      case V4(_) -> true
      case _ -> false
    }
  }

  # Returns `true` if `self` is an IPv6 address.
  fn pub v6? -> Bool {
    match self {
      case V6(_) -> true
      case _ -> false
    }
  }

  # Returns `true` if `self` is in the range designated for documentation.
  fn pub documentation? -> Bool {
    match self {
      case V4(ip) -> ip.documentation?
      case V6(ip) -> ip.documentation?
    }
  }

  # Returns `true` if `self` is a loopback address.
  fn pub loopback? -> Bool {
    match self {
      case V4(ip) -> ip.loopback?
      case V6(ip) -> ip.loopback?
    }
  }

  # Returns `true` if `self` is a multicast address.
  fn pub multicast? -> Bool {
    match self {
      case V4(ip) -> ip.multicast?
      case V6(ip) -> ip.multicast?
    }
  }

  # Returns `true` if `self` is the special "unspecified" address.
  fn pub unspecified? -> Bool {
    match self {
      case V4(ip) -> ip.unspecified?
      case V6(ip) -> ip.unspecified?
    }
  }
}

impl Equal for IpAddress {
  fn pub inline ==(other: ref IpAddress) -> Bool {
    match self {
      case V4(a) -> {
        match other {
          case V4(b) -> a == b
          case _ -> false
        }
      }
      case V6(a) -> {
        match other {
          case V6(b) -> a == b
          case _ -> false
        }
      }
    }
  }
}

impl IntoString for IpAddress {
  fn pub move into_string -> String {
    match self {
      case V4(ip) -> ip.into_string
      case V6(ip) -> ip.into_string
    }
  }
}

impl ToString for IpAddress {
  fn pub to_string -> String {
    match self {
      case V4(ip) -> ip.to_string
      case V6(ip) -> ip.to_string
    }
  }
}

impl Clone for IpAddress {
  fn pub inline clone -> IpAddress {
    match self {
      case V4(ip) -> IpAddress.V4(ip.clone)
      case V6(ip) -> IpAddress.V6(ip.clone)
    }
  }
}

impl FormatTrait for IpAddress {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write(to_string)
  }
}

impl Hash for IpAddress {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    match self {
      case V4(v) -> v.hash(hasher)
      case V6(v) -> v.hash(hasher)
    }
  }
}

# An IPv6 address.
type pub copy Ipv6Address {
  let @a: Int
  let @b: Int
  let @c: Int
  let @d: Int
  let @e: Int
  let @f: Int
  let @g: Int
  let @h: Int

  # Parses an IPv6 address literal.
  #
  # This method _only_ supports IPv6 _addresses_. Port numbers, zones, and CIDR
  # masks are not supported.
  #
  # # Examples
  #
  # Parsing an IPv6 address:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.parse('::1').get.v6? # => true
  # ```
  fn pub static parse[B: Bytes](bytes: ref B) -> Option[Ipv6Address] {
    let mut idx = 0
    let max = bytes.size
    let segments = []
    let ipv4_segments = []
    let mut compressed = false
    let mut ipv4_mode = false
    let mut max_hextet_value = IPV6_HEXTET_MAXIMUM
    let mut format = Format.Hex

    # No point in parsing the input if we're certain it's not a valid address.
    if max > IPV6_STRING_MAXIMUM_LENGTH { return Option.None }

    while idx < max {
      let start = idx

      # IPv6 addresses can embed IPv4 addresses, so instead of reading until we
      # encounter a ":" we will also stop reading when running into a ".".
      while idx < max {
        match bytes.get(idx).or_panic {
          case COLON or DOT -> break
          # These symbols are allowed by Int.parse but aren't valid inside an
          # IPv6 address.
          case PLUS or MINUS -> return Option.None
          case _ -> idx += 1
        }
      }

      # The moment we encounter a dot we'll enter IPv4 mode, and remain in this
      # mode until we reach the end of the input, as embedded IPv4 addresses
      # must be at the end of an IPv6 address.
      if !ipv4_mode and idx < max and bytes.get(idx).or_panic == DOT {
        ipv4_mode = true
        format = Format.Decimal
        max_hextet_value = IPV4_OCTET_MAXIMUM
      }

      # When the IP starts with a "::" we won't be able to read input, so the
      # byte buffer is empty.
      if idx - start > 0 {
        let int = try Int.parse(Slice.new(bytes, start, idx), format)

        if int < IP_MINIMUM_VALUE or int > max_hextet_value {
          return Option.None
        }

        if ipv4_mode { ipv4_segments.push(int) } else { segments.push(int) }
      }

      idx += 1

      # We have reached another ":", which is used to compress one or more empty
      # groups together.
      if idx < max and bytes.get(idx).or_panic == COLON {
        # Zero compression can only be applied once.
        if compressed { return Option.None }

        compressed = true

        let mut pad = IPV6_HEXTETS - segments.size
        let mut pad_idx = idx
        let mut ipv4_padded = false
        let look_ahead = idx + 1 < max

        # Scan ahead in the input to determine how many empty hextets we need to
        # add, based on the remaining number of hextets.
        #
        # When the compression is at the end of the input (e.g. "1::") there is
        # no point in looking ahead, so we don't.
        while pad_idx < max and look_ahead {
          let byte = bytes.get(pad_idx).or_panic

          if byte == COLON { pad -= 1 }

          # Two IPv4 octets can be stored in a single IPv6 hextet, meaning we'd
          # have to reduce padding by two. Since we already skip padding for the
          # ":" that preceeds the IPv4 address, we only reduce the padding by
          # one.
          if !ipv4_padded and byte == DOT {
            ipv4_padded = true
            pad -= 1
          }

          pad_idx += 1
        }

        while pad > 0 {
          segments.push(0)
          pad -= 1
        }

        idx += 1
      }
    }

    if ipv4_segments.size == IPV4_OCTETS {
      segments.push(
        octets_to_hextet(
          ipv4_segments.get(0).or_panic,
          ipv4_segments.get(1).or_panic,
        ),
      )
      segments.push(
        octets_to_hextet(
          ipv4_segments.get(2).or_panic,
          ipv4_segments.get(3).or_panic,
        ),
      )
    }

    if segments.size != IPV6_HEXTETS { return Option.None }

    Option.Some(
      Ipv6Address.new(
        segments.get(0).or_panic,
        segments.get(1).or_panic,
        segments.get(2).or_panic,
        segments.get(3).or_panic,
        segments.get(4).or_panic,
        segments.get(5).or_panic,
        segments.get(6).or_panic,
        segments.get(7).or_panic,
      ),
    )
  }

  # Returns a new IPv6 address using the given hextets.
  fn pub static new(
    a: Int,
    b: Int,
    c: Int,
    d: Int,
    e: Int,
    f: Int,
    g: Int,
    h: Int,
  ) -> Ipv6Address {
    Ipv6Address(a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h)
  }

  # Returns `true` if `self` is an IPv4-compatible IPv6 address.
  #
  # # Examples
  #
  # Checking if an IPv6 address is an IPv4-compatible IPv6 address:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.new(0, 0, 0, 0, 0, 0, 1, 1).ipv4_compatible? # => true
  # ```
  fn pub ipv4_compatible? -> Bool {
    @a == 0 and @b == 0 and @c == 0 and @d == 0 and @e == 0 and @f == 0
  }

  # Returns `true` if `self` is an IPv4-mapped IPv6 address.
  #
  # # Examples
  #
  # Checking if an IPv6 address is an IPv4-mapped IPv6 address:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.new(0, 0, 0, 0, 0, 0xffff, 1, 1).ipv4_compatible? # => true
  # ```
  fn pub ipv4_mapped? -> Bool {
    @a == 0
      and @b == 0
      and @c == 0
      and @d == 0
      and @e == 0
      and @f == IPV6_HEXTET_MAXIMUM
  }

  # Returns `true` if `self` is in a range designated for documentation.
  #
  # All addresses in the range 2001:db8::/32 are designated for documentation.
  #
  # # Examples
  #
  # Checking if an IPv6 address is a documentation address:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).documentation # => true
  # ```
  fn pub documentation? -> Bool {
    @a == 0x2001 and @b == 0xdb8
  }

  # Returns `true` if `self` is a loopback address (::1).
  #
  # # Examples
  #
  # Checking if an address is a loopback address:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 1).loopback? # => true
  # Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 2).loopback? # => false
  # ```
  fn pub loopback? -> Bool {
    @a == 0
      and @b == 0
      and @c == 0
      and @d == 0
      and @e == 0
      and @f == 0
      and @g == 0
      and @h == 1
  }

  # Returns `true` if `self` is a multicast address (ff00::/8).
  #
  # # Examples
  #
  # Checking if an address is a multicast address:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.new(0xff00, 0, 0, 0, 0, 0, 0, 0).multicast? # => true
  # Ipv6Address.new(0xff01, 0, 0, 0, 0, 0, 0, 0).multicast? # => true
  # Ipv6Address.new(0, 1, 0, 0, 0, 0, 0, 0).multicast?      # => false
  # ```
  fn pub multicast? -> Bool {
    @a & 0xff00 == 0xff00
  }

  # Returns `true` if `self` is the special "unspecified" address (::).
  #
  # # Examples
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 0).unspecified? # => true
  # Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 1).unspecified? # => false
  # ```
  fn pub unspecified? -> Bool {
    @a == 0
      and @b == 0
      and @c == 0
      and @d == 0
      and @e == 0
      and @f == 0
      and @g == 0
      and @h == 0
  }
}

impl FormatTrait for Ipv6Address {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write(to_string)
  }
}

impl Equal for Ipv6Address {
  # Returns `true` if `self` and the given IP address are the same.
  #
  # # Examples
  #
  # Comparing two IPv6 addresses:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # let addr1 = Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 1)
  # let addr2 = Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 1)
  # let addr3 = Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 2)
  #
  # addr1 == addr2 # => true
  # addr1 == addr3 # => false
  # ```
  fn pub inline ==(other: ref Ipv6Address) -> Bool {
    @a == other.a
      and @b == other.b
      and @c == other.c
      and @d == other.d
      and @e == other.e
      and @f == other.f
      and @g == other.g
      and @h == other.h
  }
}

impl ToString for Ipv6Address {
  # Converts `self` to a `String`.
  #
  # Zero compression is applied to the longest sequence of empty hextets, if
  # there are any.
  #
  # # Examples
  #
  # Converting an IPv6 address to a `String`:
  #
  # ```inko
  # import std.net.ip (Ipv6Address)
  #
  # Ipv6Address.new.to_string # => '::'
  # Ipv6Address.new(0, 0, 0, 0, 0, 0, 0, 1) # => '::1'
  # ```
  fn pub to_string -> String {
    if unspecified? { return '::' }

    if loopback? { return '::1' }

    let ipv4_compatible = ipv4_compatible?
    let ipv4_mapped = ipv4_mapped?

    if ipv4_compatible or ipv4_mapped {
      # This value (256) is used to convert a hextet to the second and fourth
      # octet in an IPv4 address. For example, for a hextet 0x2ff this produces
      # an octet of 255.
      let hextet_to_octet_modulo = IPV4_OCTET_MAXIMUM + 1
      let prefix = if ipv4_compatible { '::' } else { '::ffff:' }
      let a = @g >> IPV4_TOIPV6_SHIFT
      let b = @g % hextet_to_octet_modulo
      let c = @h >> IPV4_TOIPV6_SHIFT
      let d = @h % hextet_to_octet_modulo

      return '${prefix}${a}.${b}.${c}.${d}'
    }

    let mut compression_start = 0
    let mut compression_len = 0
    let mut current_at = 0
    let mut current_len = 0
    let mut index = 0
    let segments = [@a, @b, @c, @d, @e, @f, @g, @h]

    # Find the longest sequence of empty hextets, which we will compress
    # together.
    while index < segments.size {
      let hextet = segments.get(index).or_panic

      if hextet == 0 {
        if current_len == 0 { current_at = index }

        current_len += 1

        if current_len > compression_len {
          compression_len = current_len
          compression_start = current_at
        }
      } else {
        current_at = 0
        current_len = 0
      }

      index += 1
    }

    let format = Format.Hex

    if compression_len > 0 {
      let buffer = StringBuffer.new
      let compression_end = compression_start + compression_len

      for (index, hextet) in segments.iter.with_index {
        if index < compression_start {
          if index > 0 { buffer.push(':') }

          buffer.push(hextet.format(format))
        } else if index == compression_start {
          buffer.push('::')
        } else if index >= compression_end {
          if index > compression_end { buffer.push(':') }

          buffer.push(hextet.format(format))
        }
      }

      return buffer.into_string
    }

    let a = @a.format(format)
    let b = @b.format(format)
    let c = @c.format(format)
    let d = @d.format(format)
    let e = @e.format(format)
    let f = @f.format(format)
    let g = @g.format(format)
    let h = @h.format(format)

    '${a}:${b}:${c}:${d}:${e}:${f}:${g}:${h}'
  }
}

impl IntoString for Ipv6Address {
  fn pub move into_string -> String {
    to_string
  }
}

impl Clone for Ipv6Address {
  fn pub inline clone -> Ipv6Address {
    Ipv6Address(a: @a, b: @b, c: @c, d: @d, e: @e, f: @f, g: @g, h: @h)
  }
}

impl Hash for Ipv6Address {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    @a.hash(hasher)
    @b.hash(hasher)
    @c.hash(hasher)
    @d.hash(hasher)
    @e.hash(hasher)
    @f.hash(hasher)
    @g.hash(hasher)
    @h.hash(hasher)
  }
}

# An IPv4 address.
type pub copy Ipv4Address {
  let @a: Int
  let @b: Int
  let @c: Int
  let @d: Int

  # Parses an IPv4 address literal (e.g. "1.2.3.4").
  #
  # # Examples
  #
  # Parsing an IPv4 address:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # let addr = Ipv4Address.parse('1.2.3.4').get
  #
  # addr.v4? # => true
  # ```
  fn pub static parse[B: Bytes](bytes: ref B) -> Option[Ipv4Address] {
    let len = bytes.size

    # No IPv4 address can be longer than 15 characters (255.255.255.255).
    if len > 15 { return Option.None }

    let mut a = 0
    let mut b = 0
    let mut c = 0
    let mut octet = 0
    let mut num = 0
    let mut idx = 0
    let mut digits = 0
    let mut zero = false

    while idx < len {
      match bytes.get(idx).or_panic {
        case ZERO if digits == 0 -> {
          digits += 1
          zero = true
        }
        case v if digit?(v) -> {
          # IPv4 octets consist of at most 3 digits (255).
          if digits == 3 { return Option.None }

          # We don't support octal formats, as it was never part of the spec.
          # Ignoring them can lead to security issues, as described in
          # https://www.bleepingcomputer.com/news/security/go-rust-net-library-affected-by-critical-ip-address-validation-vulnerability/.
          if zero { return Option.None }

          num = num * 10 + (v - ZERO)
          digits += 1
        }
        case DOT -> {
          if num > IPV4_OCTET_MAXIMUM or digits == 0 or octet == 3 {
            return Option.None
          }

          match octet {
            case 0 -> a = num
            case 1 -> b = num
            case _ -> c = num
          }

          zero = false
          digits = 0
          num = 0
          octet += 1
        }
        case _ -> return Option.None
      }

      idx += 1
    }

    if num > IPV4_OCTET_MAXIMUM or digits == 0 or octet < 3 {
      return Option.None
    }

    Option.Some(Ipv4Address(a: a, b: b, c: c, d: num))
  }

  # Returns a new IPv4 address using the given octets.
  fn pub static new(a: Int, b: Int, c: Int, d: Int) -> Ipv4Address {
    Ipv4Address(a: a, b: b, c: c, d: d)
  }

  # Returns `true` if `self` is a broadcast address (255.255.255.255).
  #
  # # Examples
  #
  # Checking if an IPv4 address is a broadcast address:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new(127, 0, 0, 1).broadcast? # => false
  # Ipv4Address.new(255, 255, 255, 255).broadcast? # => true
  # ```
  fn pub broadcast? -> Bool {
    @a == IPV4_OCTET_MAXIMUM
      and @b == IPV4_OCTET_MAXIMUM
      and @c == IPV4_OCTET_MAXIMUM
      and @d == IPV4_OCTET_MAXIMUM
  }

  # Returns `true` if `self` is link-local (169.254.0.0/16).
  #
  # # Examples
  #
  # Checking if an address is link-local:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new(169, 254, 0, 0).link_local? # => true
  # Ipv4Address.new(169, 254, 1, 0).link_local? # => true
  # Ipv4Address.new(169, 255, 1, 0).link_local? # => false
  # ```
  fn pub link_local? -> Bool {
    @a == 169 and @b == 254
  }

  # Returns `true` if `self` is a private address.
  #
  # The following ranges are private IPv4 ranges:
  #
  # - 10.0.0.0/8
  # - 172.16.0.0/12
  # - 192.168.0.0/16
  #
  # # Examples
  #
  # Checking if an address is in a private range:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new(10, 0, 0, 1).private? # => true
  # Ipv4Address.new(127, 0, 0, 1).private? # => false
  # ```
  fn pub private? -> Bool {
    if @a == 10 { return true }

    if @a == 172 and @b >= 16 and @b <= 31 { return true }

    @a == 192 and @b == 168
  }

  # Converts this IP address to an IPv4-compatible IPv6 address.
  #
  # # Examples
  #
  # Converting an IPv4 address:
  #
  # ```inko
  # import std.net.ip (Ipv4Address, Ipv6Address)
  #
  # let ipv4 = Ipv4Address.new(192, 0, 2, 255)
  # let ipv6 = ipv4.to_ipv6_compatible
  #
  # ipv6.segments # => [0, 0, 0, 0, 0, 0, 0xc000, 0x2ff]
  # ```
  fn pub to_ipv6_compatible -> Ipv6Address {
    Ipv6Address.new(
      0,
      0,
      0,
      0,
      0,
      0,
      octets_to_hextet(@a, @b),
      octets_to_hextet(@c, @d),
    )
  }

  # Converts this IP address to an IPv4-mapped IPv6 address.
  fn pub to_ipv6_mapped -> Ipv6Address {
    Ipv6Address.new(
      0,
      0,
      0,
      0,
      0,
      IPV6_HEXTET_MAXIMUM,
      octets_to_hextet(@a, @b),
      octets_to_hextet(@c, @d),
    )
  }

  # Returns `true` if `self` is in a range designated for documentation.
  #
  # The following IPv4 ranges are designated for documentation:
  #
  # - 192.0.2.0/24 (TEST-NET-1)
  # - 198.51.100.0/24 (TEST-NET-2)
  # - 203.0.113.0/24 (TEST-NET-3)
  #
  # # Examples
  #
  # Checking if an IPv4 address is a documentation address:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new(192, 0, 2, 0).documentation? # => true
  # Ipv4Address.new(192, 1, 2, 0).documentation? # => false
  # ```
  fn pub documentation? -> Bool {
    if @a == 192 and @b == 0 and @c == 2 { return true }

    if @a == 198 and @b == 51 and @c == 100 { return true }

    @a == 203 and @b == 0 and @c == 113
  }

  # Returns `true` if `self` is a loopback address (127.0.0.0/8).
  #
  # # Examples
  #
  # Checking if an address is a loopback address:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new(127, 0, 0, 1).loopback? # => true
  # Ipv4Address.new(127, 0, 1, 1).loopback? # => true
  # Ipv4Address.new(255, 0, 0, 0).loopback? # => false
  # ```
  fn pub loopback? -> Bool {
    @a == 127
  }

  # Returns `true` if `self` is a multicast address (244.0.0.0/4).
  #
  # # Examples
  #
  # Checking if an address is a multicast address:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new(224, 254, 0, 0).multicast? # => true
  # Ipv4Address.new(127, 0, 0, 1).multicast? # => false
  # ```
  fn pub multicast? -> Bool {
    let first = @a

    first >= 224 and first <= 239
  }

  # Returns `true` if `self` is the special "unspecified" address (0.0.0.0).
  #
  # # Examples
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new(0, 0, 0, 0).unspecified? # => true
  # Ipv4Address.new(0, 0, 0, 1).unspecified? # => false
  # ```
  fn pub unspecified? -> Bool {
    @a == 0 and @b == 0 and @c == 0 and @d == 0
  }
}

impl FormatTrait for Ipv4Address {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write(to_string)
  }
}

impl Equal for Ipv4Address {
  # Returns `true` if `self` and the given IP address are the same.
  #
  # # Examples
  #
  # Comparing two IPv4 addresses:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # let addr1 = Ipv4Address.new(127, 0, 0, 1)
  # let addr2 = Ipv4Address.new(127, 0, 0, 1)
  # let addr3 = Ipv4Address.new(127, 0, 0, 2)
  #
  # addr1 == addr2 # => true
  # addr1 == addr3 # => false
  # ```
  fn pub inline ==(other: ref Ipv4Address) -> Bool {
    @a == other.a and @b == other.b and @c == other.c and @d == other.d
  }
}

impl ToString for Ipv4Address {
  # Converts `self` to a `String`.
  #
  # # Examples
  #
  # Converting an IPv4 address to a `String`:
  #
  # ```inko
  # import std.net.ip (Ipv4Address)
  #
  # Ipv4Address.new.to_string # => '0.0.0.0'
  # Ipv4Address.new(127, 0, 0, 1) # => '127.0.0.1'
  # ```
  fn pub to_string -> String {
    '${@a}.${@b}.${@c}.${@d}'
  }
}

impl IntoString for Ipv4Address {
  fn pub move into_string -> String {
    to_string
  }
}

impl Clone for Ipv4Address {
  fn pub inline clone -> Ipv4Address {
    Ipv4Address(a: @a, b: @b, c: @c, d: @d)
  }
}

impl Hash for Ipv4Address {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    @a.hash(hasher)
    @b.hash(hasher)
    @c.hash(hasher)
    @d.hash(hasher)
  }
}
