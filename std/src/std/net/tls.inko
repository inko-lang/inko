# TLS support for sockets.
#
# This module provides socket support for TLS 1.2 and TLS 1.3.
#
# The two main socket types are `Client` and `Server`, both acting as wrappers
# around existing socket types (e.g. `std.net.socket.TcpClient`) that
# transparently handle TLS encryption and decryption.
#
# For more details on how to set up a client and/or server socket, refer to the
# documentation of `Client.new` and `Server.new`.
#
# # Handling closing of connections
#
# The TLS specification states that clients _should_ send the `close_notify`
# message when they disconnect, but not every TLS implementation/user sends it.
# The `Client` and `Server` types provided by this module automatically send the
# `close_notify` message when they're dropped.
#
# When performing an IO operation on a socket closed without an explicit
# `close_notify` message being sent first, an `Error.EndOfInput` error is
# produced.
#
# When receiving a `close_notify` message during or after an IO operation (e.g.
# a write), a `Error.InvalidData` or `Error.BrokenPipe` error may be produced.
import std.bytes (Bytes)
import std.clone (Clone)
import std.cmp (Equal)
import std.crypto.x509 (Certificate, PrivateKey)
import std.drop (Drop)
import std.fmt (Format, Formatter)
import std.io (Error, Read, Write, WriteInternal)
import std.net.socket (RawSocketOperations)
import std.ptr
import std.string (PrimitiveString, ToString)
import std.sys.net
import std.sys.unix.net (self as sys)

# The error code produced when a TLS certificate is invalid.
let INVALID_CERT = -1

fn extern inko_tls_client_config_new -> Pointer[UInt8]

fn extern inko_tls_client_config_clone(config: Pointer[UInt8]) -> Pointer[UInt8]

fn extern inko_tls_client_config_drop(config: Pointer[UInt8])

fn extern inko_tls_client_config_with_certificate(
  certificate: Pointer[UInt8],
  size: Int,
) -> AnyResult

fn extern inko_tls_client_connection_new(
  config: Pointer[UInt8],
  name: PrimitiveString,
) -> AnyResult

fn extern inko_tls_client_connection_drop(connection: Pointer[UInt8])

fn extern inko_tls_server_config_new(
  certificate: Pointer[UInt8],
  certificate_size: Int,
  key: Pointer[UInt8],
  key_size: Int,
) -> AnyResult

fn extern inko_tls_server_config_clone(config: Pointer[UInt8]) -> Pointer[UInt8]

fn extern inko_tls_server_config_drop(config: Pointer[UInt8])

fn extern inko_tls_server_connection_new(
  config: Pointer[UInt8],
) -> Pointer[UInt8]

fn extern inko_tls_server_connection_drop(connection: Pointer[UInt8])

fn extern inko_tls_client_read(
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
  buffer: Pointer[UInt8],
  size: Int,
  deadline: Int,
  reader: Pointer[UInt8],
  writer: Pointer[UInt8],
) -> IntResult

fn extern inko_tls_client_write(
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
  buffer: Pointer[UInt8],
  size: Int,
  deadline: Int,
  reader: Pointer[UInt8],
  writer: Pointer[UInt8],
) -> IntResult

fn extern inko_tls_client_flush(
  state: Pointer[UInt8],
  process: Pointer[UInt8],
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
) -> IntResult

fn extern inko_tls_client_close(
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
  deadline: Int,
  reader: Pointer[UInt8],
  writer: Pointer[UInt8],
) -> IntResult

fn extern inko_tls_server_read(
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
  buffer: Pointer[UInt8],
  size: Int,
  deadline: Int,
  reader: Pointer[UInt8],
  writer: Pointer[UInt8],
) -> IntResult

fn extern inko_tls_server_write(
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
  buffer: Pointer[UInt8],
  size: Int,
  deadline: Int,
  reader: Pointer[UInt8],
  writer: Pointer[UInt8],
) -> IntResult

fn extern inko_tls_server_flush(
  state: Pointer[UInt8],
  process: Pointer[UInt8],
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
) -> IntResult

fn extern inko_tls_server_close(
  socket: Pointer[net.RawSocket],
  connection: Pointer[UInt8],
  deadline: Int,
  reader: Pointer[UInt8],
  writer: Pointer[UInt8],
) -> IntResult

let OK = 0
let ERROR = 2

type extern AnyResult {
  let @tag: Int
  let @value: UInt64
}

type extern IntResult {
  let @tag: Int
  let @value: Int
}

fn extern read_callback(
  socket: Pointer[net.RawSocket],
  buffer: Pointer[UInt8],
  size: Int,
  deadline: Int,
) -> IntResult {
  match sys.read_raw(socket, buffer, size, deadline) {
    case Ok(v) -> IntResult(tag: OK, value: v)
    case Error(e) -> IntResult(tag: ERROR, value: e)
  }
}

fn extern write_callback(
  socket: Pointer[net.RawSocket],
  buffer: Pointer[UInt8],
  size: Int,
  deadline: Int,
) -> IntResult {
  match sys.write_raw(socket, buffer, size, deadline) {
    case Ok(v) -> IntResult(tag: OK, value: v)
    case Error(e) -> IntResult(tag: ERROR, value: e)
  }
}

# An error produced when creating a `ServerConfig`.
type pub copy enum ServerConfigError {
  # The certificate exists but is invalid, such as when it's revoked or not
  # encoded correctly.
  case InvalidCertificate

  # The private key exists but is invalid.
  case InvalidPrivateKey
}

impl Equal for ServerConfigError {
  fn pub ==(other: ref ServerConfigError) -> Bool {
    match (self, other) {
      case (InvalidCertificate, InvalidCertificate) -> true
      case (InvalidPrivateKey, InvalidPrivateKey) -> true
      case _ -> false
    }
  }
}

impl ToString for ServerConfigError {
  fn pub to_string -> String {
    match self {
      case InvalidCertificate -> 'the certificate is invalid'
      case InvalidPrivateKey -> 'the private key is invalid'
    }
  }
}

impl Format for ServerConfigError {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case InvalidCertificate -> formatter.tuple('InvalidCertificate').finish
      case InvalidPrivateKey -> formatter.tuple('InvalidPrivateKey').finish
    }
  }
}

# A type storing the configuration details for TLS clients.
#
# To configure a `Server`, use `ServerConfig` instead.
#
# Creating a `ClientConfig` is potentially expensive, depending on the amount of
# certificates that need to be processed. As such, it's recommended to only
# create a `ClientConfig` once and use `ClientConfig.clone` to clone it whenever
# necessary (e.g. when sharing a `ClientConfig` between processes), as cloning a
# `ClientConfig` is cheap.
type pub ClientConfig {
  let @raw: Pointer[UInt8]

  # Returns a new `ClientConfig` that uses the system's certificate store.
  #
  # # Examples
  #
  # ```inko
  # import std.net.tls (ClientConfig)
  #
  # ClientConfig.new
  # ```
  fn pub static new -> ClientConfig {
    ClientConfig(inko_tls_client_config_new)
  }

  # Returns a new `ClientConfig` using the specified PEM encoded X.509
  # certificate.
  #
  # # Errors
  #
  # If the certificate isn't valid, a `None` is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.net.tls (ClientConfig)
  # import std.crypto.x509 (Certificate)
  #
  # # In a real program you'd load the certificate from a file or a database.
  # let cert = Certificate.new(ByteArray.from_array[1, 2, 3, 4])
  #
  # ClientConfig
  #   .with_certificate(cert)
  #   .or_panic_with('the client configuration is invalid')
  # ```
  fn pub static with_certificate(
    certificate: ref Certificate,
  ) -> Option[ClientConfig] {
    match
      inko_tls_client_config_with_certificate(
        certificate.bytes.pointer,
        certificate.bytes.size,
      )
    {
      case { @tag = 0, @value = v } -> {
        Option.Some(ClientConfig(v as Pointer[UInt8]))
      }
      case _ -> Option.None
    }
  }
}

impl Drop for ClientConfig {
  fn mut drop {
    inko_tls_client_config_drop(@raw)
  }
}

impl Clone for ClientConfig {
  fn pub clone -> ClientConfig {
    ClientConfig(inko_tls_client_config_clone(@raw))
  }
}

# A type that acts as the client in a TLS session.
#
# `Client` values wrap existing sockets such as `std.net.socket.TcpClient` and
# apply TLS encryption/decryption to IO operations.
#
# # Closing TLS connections
#
# When a `Client` is dropped, the TLS connection is closed by sending the TLS
# `close_notify` message.
#
# # Examples
#
# ```inko
# import std.net.ip (IpAddress)
# import std.net.socket (TcpClient)
# import std.net.tls (Client, ClientConfig)
#
# let conf = ClientConfig.new
# let sock = TcpClient
#   .new(ips: [IpAddress.v4(127, 0, 0, 1)], port: 9000)
#   .or_panic_with('failed to connect to the server')
# let client = Client
#   .new(sock, conf, name: 'localhost')
#   .or_panic_with('the server name is invalid')
#
# client.write('ping').or_panic_with('failed to write the message')
#
# let response = ByteArray.new
#
# client.read_all(response).or_panic_with('failed to read the response')
# ```
type pub Client[T: mut + RawSocketOperations] {
  # The socket wrapped by this `Client`.
  let pub @socket: T

  # The TLS connection state.
  let @state: Pointer[UInt8]

  # Returns a `Client` acting as the client in a TLS session.
  #
  # The `socket` argument is the socket (e.g. `std.net.socket.TcpClient`) to
  # wrap. This can be either an owned socket or a mutable borrow of a socket.
  #
  # The `name` argument is the DNS name to use for Server Name Indication (SNI).
  # Setting this to an IP address disables the use of SNI. In most cases you'll
  # want to set this to the DNS name of the server the socket is connecting to.
  #
  # The `config` argument is a `ClientConfig` instance to use for configuring
  # the TLS connection.
  #
  # # Errors
  #
  # This method returns an `Option.None` if the `name` argument contains an
  # invalid value.
  #
  # # Examples
  #
  # ```inko
  # import std.net.ip (IpAddress)
  # import std.net.socket (TcpClient)
  # import std.net.tls (Client, ClientConfig)
  #
  # let conf = ClientConfig.new
  # let sock = TcpClient
  #   .new(ips: [IpAddress.v4(127, 0, 0, 1)], port: 9000)
  #   .or_panic_with('failed to connect to the server')
  #
  # Client
  #   .new(sock, conf, name: 'localhost')
  #   .or_panic_with('the server name is invalid')
  # ```
  fn pub static new(
    socket: T,
    config: ref ClientConfig,
    name: String,
  ) -> Option[Client[T]] {
    let state = match
      inko_tls_client_connection_new(config.raw, name.to_primitive)
    {
      case { @tag = 0, @value = v } -> v as Pointer[UInt8]
      case _ -> return Option.None
    }

    Option.Some(Client(socket, state))
  }

  # Sends the TLS `close_notify` message to the socket, informing the peer that
  # the connection is being closed.
  fn mut close -> Result[Nil, Error] {
    match
      inko_tls_client_close(
        @socket.raw_socket,
        @state,
        @socket.raw_deadline,
        mut read_callback,
        mut write_callback,
      )
    {
      case { @tag = 1 } -> Result.Ok(nil)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Drop for Client {
  fn mut drop {
    # Per the TLS specification, the connection _should_ be closed explicitly
    # when discarding the socket.
    let _ = close

    inko_tls_client_connection_drop(@state)
  }
}

impl Read for Client {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    into.reserve_exact(size)

    let len = into.size
    let ptr = ptr.add(into.pointer, len)

    match
      inko_tls_client_read(
        @socket.raw_socket,
        @state,
        ptr,
        size,
        @socket.raw_deadline,
        mut read_callback,
        mut write_callback,
      )
    {
      case { @tag = 0, @value = v } -> {
        into.size = len + v
        Result.Ok(v)
      }
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl WriteInternal for Client {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    match
      inko_tls_client_write(
        @socket.raw_socket,
        @state,
        data,
        size,
        @socket.raw_deadline,
        mut read_callback,
        mut write_callback,
      )
    {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Write for Client {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, Error] {
    write_all_internal(bytes.pointer, bytes.size)
  }

  fn pub mut flush -> Result[Nil, Error] {
    Result.Ok(nil)
  }
}

# A type storing the configuration details for TLS servers.
#
# To configure a `Client`, use `ClientConfig` instead.
#
# Creating a `ServerConfig` is potentially expensive, depending on the
# certificate and private key that are used. As such, it's recommended to only
# create a `ServerConfig` once and use `ServerConfig.clone` to clone it whenever
# necessary, as cloning a `ServerConfig` is cheap.
type pub ServerConfig {
  let @raw: Pointer[UInt8]

  # Returns a new `ClientConfig` using the specified PEM encoded X.509
  # certificate and private key.
  #
  # # Errors
  #
  # A `ServerConfigError` is returned if any of the following is true:
  #
  # - The certificate is invalid
  # - The private key is invalid
  #
  # # Examples
  #
  # ```inko
  # import std.net.tls (ServerConfig)
  # import std.crypto.x509 (Certificate, PrivateKey)
  #
  # let cert = Certificate.new(ByteArray.from_array([1, 2, 3]))
  # let key = PrivateKey.new(ByteArray.from_array([4, 5, 6]))
  #
  # ServerConfig
  #   .new(cert, key)
  #   .or_panic_with('failed to create the configuration')
  # ```
  fn pub static new(
    certificate: ref Certificate,
    key: ref PrivateKey,
  ) -> Result[ServerConfig, ServerConfigError] {
    match
      inko_tls_server_config_new(
        certificate: certificate.bytes.pointer,
        certificate_size: certificate.bytes.size,
        key: key.bytes.pointer,
        key_size: key.bytes.size,
      )
    {
      case { @tag = 0, @value = v } -> {
        Result.Ok(ServerConfig(v as Pointer[UInt8]))
      }
      case { @value = e } if e as Int == INVALID_CERT -> {
        Result.Error(ServerConfigError.InvalidCertificate)
      }
      case _ -> Result.Error(ServerConfigError.InvalidPrivateKey)
    }
  }
}

impl Drop for ServerConfig {
  fn mut drop {
    inko_tls_server_config_drop(@raw)
  }
}

impl Clone for ServerConfig {
  fn pub clone -> ServerConfig {
    ServerConfig(inko_tls_server_config_clone(@raw))
  }
}

# A type that acts as the server in a TLS session.
#
# `Server` values wrap existing sockets such as `std.net.socket.TcpClient` and
# apply TLS encryption/decryption to IO operations.
#
# # Closing TLS connections
#
# When a `Client` is dropped the TLS connection is closed by sending the TLS
# `close_notify` message.
#
# # Examples
#
# ```inko
# import std.crypto.x509 (Certificate, PrivateKey)
# import std.net.ip (IpAddress)
# import std.net.socket (TcpServer)
# import std.net.tls (Server, ServerConfig)
#
# let cert = Certificate.new(ByteArray.from_array([1, 2, 3]))
# let key = PrivateKey.new(ByteArray.from_array([4, 5, 6]))
#
# let conf = ServerConfig
#   .new(cert, key)
#   .or_panic_with('failed to create the server configuration')
#
# let server = TcpServer
#   .new(ip: IpAddress.v4(0, 0, 0, 0), port: 9000)
#   .or_panic_with('failed to start the server')
#
# let con = server
#   .accept
#   .map(fn (sock) { Server.new(sock, conf) })
#   .or_panic_with('failed to accept the new connection')
#
# let bytes = ByteArray.new
#
# con.read(into: bytes, size: 32).or_panic_with('failed to read the data')
# ```
type pub Server[T: mut + RawSocketOperations] {
  # The socket wrapped by this `Server`.
  let pub @socket: T

  # The TLS connection state.
  let @state: Pointer[UInt8]

  # Returns a `Server` acting as the server in a TLS session.
  #
  # The `socket` argument is the socket (e.g. `std.net.socket.TcpClient`) to
  # wrap. This can be either an owned socket or a mutable borrow of a socket.
  #
  # The `config` argument is a `ServerConfig` instance to use for configuring
  # the TLS connection.
  #
  # # Examples
  #
  # ```inko
  # import std.crypto.x509 (Certificate, PrivateKey)
  # import std.net.ip (IpAddress)
  # import std.net.socket (TcpServer)
  # import std.net.tls (Server, ServerConfig)
  #
  # let cert = Certificate.new(ByteArray.from_array([1, 2, 3]))
  # let key = PrivateKey.new(ByteArray.from_array([4, 5, 6]))
  #
  # let conf = ServerConfig
  #   .new(cert, key)
  #   .or_panic_with('failed to create the server configuration')
  #
  # let server = TcpServer
  #   .new(ip: IpAddress.v4(0, 0, 0, 0), port: 9000)
  #   .or_panic_with('failed to start the server')
  #
  # server
  #   .accept
  #   .map(fn (sock) { Server.new(sock, conf) })
  #   .or_panic_with('failed to accept the new connection')
  # ```
  fn pub static new(socket: T, config: ref ServerConfig) -> Server[T] {
    Server(socket, inko_tls_server_connection_new(config.raw))
  }

  # Sends the TLS `close_notify` message to the socket, informing the peer that
  # the connection is being closed.
  fn mut close -> Result[Nil, Error] {
    match
      inko_tls_server_close(
        @socket.raw_socket,
        @state,
        @socket.raw_deadline,
        mut read_callback,
        mut write_callback,
      )
    {
      case { @tag = 1 } -> Result.Ok(nil)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Drop for Server {
  fn mut drop {
    # Per the TLS specification, the connection _should_ be closed explicitly
    # when discarding the socket.
    let _ = close

    inko_tls_server_connection_drop(@state)
  }
}

impl Read for Server {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    into.reserve_exact(size)

    let len = into.size
    let ptr = ptr.add(into.pointer, len)

    match
      inko_tls_server_read(
        @socket.raw_socket,
        @state,
        ptr,
        size,
        @socket.raw_deadline,
        mut read_callback,
        mut write_callback,
      )
    {
      case { @tag = 0, @value = v } -> {
        into.size = len + v
        Result.Ok(v)
      }
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl WriteInternal for Server {
  fn mut write_internal(data: Pointer[UInt8], size: Int) -> Result[Int, Error] {
    match
      inko_tls_server_write(
        @socket.raw_socket,
        @state,
        data,
        size,
        @socket.raw_deadline,
        mut read_callback,
        mut write_callback,
      )
    {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Write for Server {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, Error] {
    write_all_internal(bytes.pointer, bytes.size)
  }

  fn pub mut flush -> Result[Nil, Error] {
    Result.Ok(nil)
  }
}
