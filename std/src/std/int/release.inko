import std.int (MIN, overflow_error)

let BITS = 63

fn extern inko_int_wrapping_pow(left: Int, right: Int) -> Int

fn inline add(a: Int, b: Int) -> Int {
  _INKO.int_wrapping_add(a, b)
}

fn inline sub(a: Int, b: Int) -> Int {
  _INKO.int_wrapping_sub(a, b)
}

fn inline mul(a: Int, b: Int) -> Int {
  _INKO.int_wrapping_mul(a, b)
}

fn inline mod(a: Int, b: Int) -> Int {
  if b == 0 or (a == MIN and b == -1) { overflow_error }

  let sum = _INKO.int_wrapping_add(_INKO.int_rem(a, b), b)

  _INKO.int_rem(sum, b)
}

fn inline shl(a: Int, b: Int) -> Int {
  _INKO.int_shl(a, _INKO.int_bit_and(b, BITS))
}

fn inline shr(a: Int, b: Int) -> Int {
  _INKO.int_shr(a, _INKO.int_bit_and(b, BITS))
}

fn inline ushr(a: Int, b: Int) -> Int {
  _INKO.int_unsigned_shr(a, _INKO.int_bit_and(b, BITS))
}

fn inline pow(a: Int, b: Int) -> Int {
  inko_int_wrapping_pow(a, b)
}
