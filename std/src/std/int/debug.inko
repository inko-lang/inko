import std.int (CheckedIntResult, MIN, overflow_error)

let BITS = 63

fn extern inko_int_checked_pow(left: Int, right: Int) -> CheckedIntResult

fn add(a: Int, b: Int) -> Int {
  let res = _INKO.int_checked_add(a, b)

  if res.tag as Int == 0 { res.value as Int } else { overflow_error }
}

fn sub(a: Int, b: Int) -> Int {
  let res = _INKO.int_checked_sub(a, b)

  if res.tag as Int == 0 { res.value as Int } else { overflow_error }
}

fn mul(a: Int, b: Int) -> Int {
  let res = _INKO.int_checked_mul(a, b)

  if res.tag as Int == 0 { res.value as Int } else { overflow_error }
}

fn mod(a: Int, b: Int) -> Int {
  if b == 0 or (a == MIN and b == -1) { overflow_error }

  let sum = _INKO.int_checked_add(_INKO.int_rem(a, b), b)

  if sum.tag as Int == 0 {
    _INKO.int_rem(sum.value as Int, b)
  } else {
    overflow_error
  }
}

fn shl(a: Int, b: Int) -> Int {
  if b > BITS { overflow_error }

  _INKO.int_shl(a, b)
}

fn shr(a: Int, b: Int) -> Int {
  if b > BITS { overflow_error }

  _INKO.int_shr(a, b)
}

fn ushr(a: Int, b: Int) -> Int {
  if b > BITS { overflow_error }

  _INKO.int_unsigned_shr(a, b)
}

fn pow(a: Int, b: Int) -> Int {
  let res = inko_int_checked_pow(a, b)

  if res.tag as Int == 0 { res.value as Int } else { overflow_error }
}
