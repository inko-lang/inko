# Manipulating directories on a filesystem.
import std::fs::path::Path
import std::io::Error
import std::string::ToString

class extern AnyResult {
  let @tag: Int
  let @value: Any
}

fn extern inko_directory_create(
  process: Pointer[Int8],
  path: String,
) -> AnyResult

fn extern inko_directory_create_recursive(
  process: Pointer[Int8],
  path: String,
) -> AnyResult

fn extern inko_directory_list(
  state: Pointer[Int8],
  process: Pointer[Int8],
  path: String,
) -> AnyResult

fn extern inko_directory_remove(
  process: Pointer[Int8],
  path: String,
) -> AnyResult

fn extern inko_directory_remove_recursive(
  process: Pointer[Int8],
  path: String,
) -> AnyResult

# Creates a new empty directory at the given path.
#
# # Errors
#
# This method returns an `Error` if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to create the directory.
# 2. The directory already exists.
#
# # Examples
#
# Creating a directory:
#
#     import std::fs::dir
#
#     dir.create('/tmp/test').unwrap
fn pub create(path: ref ToString) -> Result[Nil, Error] {
  match inko_directory_create(_INKO.process, path.to_string) {
    case { @tag = 1, @value = _ } -> Result.Ok(nil)
    case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e as Int))
  }
}

# Creates a new empty directory at the given path, while also creating any
# intermediate directories.
#
# # Errors
#
# This method returns an `Error` if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to create the directory.
#
# # Examples
#
# Creating a directory:
#
#     import std::fs::dir
#
#     dir.create_all('/tmp/foo/bar/test').unwrap
fn pub create_all(path: ref ToString) -> Result[Nil, Error] {
  match inko_directory_create_recursive(_INKO.process, path.to_string) {
    case { @tag = 1, @value = _ } -> Result.Ok(nil)
    case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e as Int))
  }
}

# Removes the directory at the given path.
#
# # Errors
#
# This method returns an `Error` if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to remove the directory.
# 2. The directory is not empty.
# 3. The directory does not exist.
#
# # Examples
#
# Removing a directory:
#
#     import std::fs::dir
#
#     dir.create('/tmp/test').unwrap
#     dir.remove('/tmp/test').unwrap
fn pub remove(path: ref ToString) -> Result[Nil, Error] {
  match inko_directory_remove(_INKO.process, path.to_string) {
    case { @tag = 1, @value = _ } -> Result.Ok(nil)
    case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e as Int))
  }
}

# Removes the directory and its contents at the given path.
#
# # Errors
#
# This method returns an `Error` if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to remove the directory.
# 2. The directory does not exist.
#
# # Examples
#
# Removing a directory:
#
#     import std::fs::dir
#
#     dir.create_all('/tmp/foo/bar').unwrap
#     dir.remove_all('/tmp/foo').unwrap
fn pub remove_all(path: ref ToString) -> Result[Nil, Error] {
  match inko_directory_remove_recursive(_INKO.process, path.to_string) {
    case { @tag = 1, @value = _ } -> Result.Ok(nil)
    case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e as Int))
  }
}

# Returns an `Array` containing the paths to the contents of the directory.
#
# # Errors
#
# This method returns an `Error` if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to read the contents of the
#    directory.
# 2. The path does not point to a valid directory.
#
# # Examples
#
# Listing the contents of a directory:
#
#     import std::fs::dir
#
#     let paths = dir.list('.').unwrap
#
#     paths[0].to_string # => 'README.md'
fn pub list(path: ref ToString) -> Result[Array[Path], Error] {
  match inko_directory_list(_INKO.state, _INKO.process, path.to_string) {
    case { @tag = 0, @value = v } -> Result.Ok(
      (v as Array[String]).into_iter.map fn (path) { Path.new(path) }.to_array
    )
    case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e as Int))
  }
}
