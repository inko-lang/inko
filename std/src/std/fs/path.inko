# Cross-platform path manipulation.
import std.clone (Clone)
import std.cmp (Equal)
import std.env (home_directory)
import std.fmt (Format, Formatter)
import std.fs (DirectoryEntry, Metadata)
import std.hash (Hash, Hasher)
import std.io (Error)
import std.iter (Iter, Stream)
import std.string (IntoString, StringBuffer, ToString)
import std.sys.unix.fs (self as sys) if unix

type extern AnyResult {
  let @tag: Int
  let @value: UInt64
}

# The byte used to represent a single dot/period.
let DOT_BYTE = 46

# The character used to separate components in a file path.
let pub SEPARATOR = '/'

# The byte used to represent the path separator.
let SEPARATOR_BYTE = 47

# The character used to signal the user's home directory.
let HOME = '~'

# The prefix of a path that indicates a path relative to the user's home
# directory.
let HOME_WITH_SEPARATOR = HOME + SEPARATOR

# Returns the number of bytes leading up to the last path separator.
#
# If no separator could be found, `-1` is returned.
fn bytes_before_last_separator(path: String) -> Int {
  if path.empty? { return -1 }

  let mut index = path.size - 1

  # Trailing separators should be ignored, so we'll skip over them until the
  # first non-separator byte.
  while index > 0 and path.get(index).or_panic == SEPARATOR_BYTE { index -= 1 }

  let mut in_separator = false

  while index > -1 {
    let byte = path.get(index).or_panic

    if byte == SEPARATOR_BYTE {
      in_separator = true
    } else if in_separator {
      return index + 1
    }

    index -= 1
  }

  if in_separator { 1 } else { -1 }
}

# Returns `true` if the given file path is an absolute path.
fn absolute_path?(path: String) -> Bool {
  path.get(0).or_panic == SEPARATOR_BYTE
}

fn join_strings(base: ref String, with: ref String) -> String {
  if base.empty? { return with.clone }

  if with.empty? { return base.clone }

  if absolute_path?(with) {
    with
  } else if base.get(base.size - 1).or_panic == SEPARATOR_BYTE {
    '${base}${with}'
  } else {
    '${base}${SEPARATOR}${with}'
  }
}

# An iterator over the entries in a directory.
#
# See the documentation of `std.fs.path.Path.list` for more details.
type pub ReadDirectory {
  let @path: String
  let @inner: sys.ReadDirectory
}

impl Iter[Result[DirectoryEntry, Error]] for ReadDirectory {
  fn pub mut next -> Option[Result[DirectoryEntry, Error]] {
    let ret = match try { @inner.next } {
      case Ok((path, typ)) -> {
        Result.Ok(
          DirectoryEntry(
            path: Path.new(join_strings(@path, with: path)),
            type: typ,
          ),
        )
      }
      case Error(e) -> Result.Error(e)
    }

    Option.Some(ret)
  }
}

# An iterator over the components in a `Path`.
type pub Components {
  let @path: ref Path
  let mut @index: Int
  let @size: Int
  let @root: Bool

  fn static new(path: ref Path) -> Components {
    let size = path.path.size
    let root = size > 0 and path.path.get(0).or_panic == SEPARATOR_BYTE
    let comp = Components(path: path, index: 0, size: size, root: root)

    # If we start with a sequence such as `.//././.`, we skip over those. We
    # only need to do this once, so we take care of that here instead of
    # performing this check every time `next` is called.
    comp.skip_relative_start
    comp
  }

  fn byte(index: Int) -> Int {
    @path.path.get(index).or_panic
  }

  fn separator?(index: Int) -> Bool {
    byte(index) == SEPARATOR_BYTE
  }

  fn mut skip_relative_start {
    if
      @size > 0
        and byte(@index) == DOT_BYTE
        and @index + 1 < @size
        and separator?(@index + 1)
    {
      @index += 1
      advance_separator
    }
  }

  fn mut advance_separator {
    while @index < @size and separator?(@index) {
      @index += 1

      # This turns sequences such as `a/./././b` into `a/b`, while leaving
      # `a/../b` alone.
      while
        @index < @size
          and byte(@index) == DOT_BYTE
          and (
            @index + 1 < @size and separator?(@index + 1) or @index + 1 == @size
          )
      {
        @index += 2
      }
    }
  }
}

impl Iter[String] for Components {
  fn pub mut next -> Option[String] {
    if @index >= @size { return Option.None }

    if @index == 0 and @root {
      advance_separator
      return Option.Some(SEPARATOR)
    }

    let start = @index

    while @index < @size and separator?(@index).false? { @index += 1 }

    let end = @index

    if end > start {
      advance_separator
      Option.Some(@path.path.slice(start, end).to_string)
    } else {
      Option.None
    }
  }
}

# A path to a file or directory.
#
# A `Path` can be used to retrieve information about a path to a file or
# directory such as the size or file type. `Path` objects can be created by
# either using `Path.new` or by sending `to_path` to a `String`.
#
# # Examples
#
# Creating a new `Path` using a `String`:
#
# ```inko
# import std.fs.path (Path)
#
# Path.new('/tmp/hello.txt')
# ```
#
# Converting a `String` to a `Path`:
#
# ```inko
# import std.fs.path (Path)
#
# '/tmp/hello.txt'.to_path
# ```
type pub inline Path {
  # The raw file path.
  let @path: String

  fn pub inline static new(path: String) -> Path {
    Path(path)
  }

  # Returns `true` if the path points to a file.
  fn pub file? -> Bool {
    metadata.map(fn (m) { m.type.file? }).or(false)
  }

  # Returns `true` if the path points to a directory.
  fn pub directory? -> Bool {
    metadata.map(fn (m) { m.type.directory? }).or(false)
  }

  # Returns `true` if the path points to a file/directory/etc that exists.
  fn pub exists? -> Bool {
    metadata.ok?
  }

  # Returns `true` if this `Path` is an absolute path.
  #
  # # Examples
  #
  # Checking if a `Path` is absolute:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('foo').absolute?  # => false
  # Path.new('/foo').absolute? # => true
  # ```
  fn pub absolute? -> Bool {
    absolute_path?(@path)
  }

  # Returns `true` if this `Path` is a relative path.
  #
  # # Examples
  #
  # Checking if a `Path` is relative:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('foo').relative?  # => true
  # Path.new('../').relative?  # => true
  # Path.new('/foo').relative? # => false
  # ```
  fn pub relative? -> Bool {
    absolute?.false?
  }

  # Joins `self` and the given path together to form a new `Path`.
  #
  # # Examples
  #
  # Joining a `Path` with a `String`:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('foo/bar').join('baz').to_string # => 'foo/bar/baz'
  # ```
  #
  # Joining a `Path` with another `Path`:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('foo/bar').join(Path.new('bar')).to_string # => 'foo/bar/baz'
  # ```
  fn pub join[T: ToString](path: ref T) -> Path {
    Path.new(join_strings(@path, with: path.to_string))
  }

  # Returns a `Path` to the directory of the current `Path`.
  #
  # This method does not touch the filesystem, and thus does not resolve paths
  # like `..` and symbolic links to their real paths.
  #
  # This method normalizes the returned `Path` similar to `Path.components`.
  # Refer to the documentation of `Path.components` for more details.
  #
  # # Examples
  #
  # Obtaining the directory of a path:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('/foo/bar').directory # => Path.new('/foo')
  # ```
  #
  # Obtaining the directory of the root directory:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('/').directory # Path.new('/')
  # ```
  fn pub directory -> Path {
    let buf = StringBuffer.new
    let comp = Components.new(self).peekable
    let mut root = false

    loop {
      match comp.next {
        case Some(SEPARATOR) -> {
          root = true
          buf.push(SEPARATOR)
        }
        case Some(v) if comp.peek.some? -> {
          let any = buf.empty?.false?

          if any and root { root = false } else if any { buf.push(SEPARATOR) }

          buf.push(v)
        }
        case _ -> break
      }
    }

    if buf.empty? { Path.new('.') } else { Path.new(buf.into_string) }
  }

  # Returns the last component in `self`.
  #
  # If `self` is a file, then the tail will be the file name including its
  # extension. If `self` is a directory, the directory name is returned.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('foo/bar/baz.txt') # => 'baz.txt'
  # ```
  fn pub tail -> String {
    let comp = Components.new(self)
    let mut start = -1
    let mut end = -1

    # This finds the range of the last component, taking into account path
    # normalization.
    while comp.index < comp.size {
      comp.advance_separator

      if comp.index < comp.size {
        start = comp.index
        end = start
      }

      while comp.index < comp.size and comp.separator?(comp.index).false? {
        comp.index += 1
        end += 1
      }
    }

    if start == -1 { '' } else { @path.slice(start, end: end).to_string }
  }

  # Returns the file extension of this path (without the leading `.`), if there
  # is any.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('foo.txt').extension # => Option.Some('txt')
  # Path.new('foo').extension     # => Option.None
  # ```
  fn pub extension -> Option[String] {
    let size = @path.size
    let mut min = match bytes_before_last_separator(@path) {
      case -1 -> 0
      case n -> n + 1
    }

    if min >= size { return Option.None }

    # If the name starts with a dot, we work our way backwards until the _next_
    # byte. This way we don't treat `.foo` as having the extension `foo`.
    if @path.get(min).or_panic == DOT_BYTE { min += 1 }

    let max = size - 1
    let mut idx = max

    # We consider something an extension if it has at least one non-dot byte,
    # meaning `foo.` is a path _without_ an extension. Different languages
    # handle this differently:
    #
    #     Language     Path      Extension    Leading dot included
    #     ---------------------------------------------------------
    #     Elixir       'foo.'    '.'          Yes
    #     Go           'foo.'    '.'          Yes
    #     Node.js      'foo.'    '.'          Yes
    #     Python       'foo.'    NONE         No
    #     Ruby         'foo.'    '.'          Yes
    #     Rust         'foo.'    NONE         No
    #     Vimscript    'foo.'    NONE         No
    #
    # Things get more inconsistent for paths such as `...`, with some treating
    # it as a file called `..` with the extension `.`, while others consider it
    # a path without an extension.
    while idx > min {
      if @path.get(idx).or_panic == DOT_BYTE { break } else { idx -= 1 }
    }

    if idx < max and idx > min {
      Option.Some(@path.slice(start: idx + 1, end: size).to_string)
    } else {
      Option.None
    }
  }

  # Returns a copy of `self` with the given extension.
  #
  # If `self` already has an extension, it's overwritten the given extension. If
  # the given extension is an empty `String`, the new `Path` contains no
  # extension.
  #
  # # Panics
  #
  # This method panics if the extension contains a path separator.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('a').with_extension('txt')    # => Path.new('a.txt')
  # Path.new('a.txt').with_extension('md') # => Path.new('a.md')
  # ```
  fn pub with_extension(name: String) -> Path {
    if name.contains?(SEPARATOR) {
      panic("file extensions can't contain path separators")
    }

    if @path.empty? { return clone }

    let raw = match extension {
      case Some(v) if name.empty? -> {
        @path.slice(start: 0, end: @path.size - v.size - 1).to_string
      }
      case Some(v) -> {
        '${@path.slice(start: 0, end: @path.size - v.size - 1)}.${name}'
      }
      case _ if name.empty? or @path.ends_with?(SEPARATOR) -> @path
      case _ -> '${@path}.${name}'
    }

    Path.new(raw)
  }

  # Returns the canonical, absolute version of `self`.
  #
  # # Resolving home directories
  #
  # If `self` is equal to `~`, this method returns the path to the user's home
  # directory. If `self` starts with `~/`, this prefix is replaced with the path
  # to the user's home directory (e.g. `~/foo` becomes `/var/home/alice/foo`).
  #
  # # Errors
  #
  # This method may return an `Error` for cases such as:
  #
  # - `self` doesn't exist
  # - a component that isn't the last component is _not_ a directory
  # - `self` is equal to `~` or starts with `~/`, but the home directory can't
  #   be found (e.g. it doesn't exist)
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('/foo/../bar').expand.get # => Path.new('/bar')
  # Path.new('~').expand.get           # => '/var/home/...'
  # Path.new('~/').expand.get          # => '/var/home/...'
  # ```
  fn pub expand -> Result[Path, Error] {
    if @path == HOME {
      return match home_directory {
        case Some(v) -> Result.Ok(v)
        case _ -> Result.Error(Error.NotFound)
      }
    }

    let mut target = @path

    match @path.strip_prefix(HOME_WITH_SEPARATOR) {
      case Some(tail) -> {
        target = match home_directory {
          case Some(v) -> join_strings(v.path, tail)
          case _ -> throw Error.NotFound
        }
      }
      case _ -> {}
    }

    sys.expand_path(target).map(fn (v) { Path.new(v) })
  }

  # Returns an iterator yielding the entries in the directory `self` points to.
  #
  # The iterator yields values of type `Result[DirectoryEntry, Error]`, as
  # errors may be produced during iteration (e.g. file permissions are changed
  # such that we can no longer read the directory contents).
  #
  # # Errors
  #
  # This method returns an `Error` if any of the following conditions are met:
  #
  # 1. The user lacks the necessary permissions to read the contents of the
  #    directory.
  # 2. The path isn't a valid directory (i.e. it's a file or doesn't exist).
  #
  # # Examples
  #
  # This prints the files in the current working directory while ignoring
  # directories:
  #
  # ```inko
  # import std.fs.path (Path)
  # import std.stdio (Stdout)
  #
  # let out = Stdout.new
  # let path = Path.new('.')
  # let iter = path.list.or_panic_with('failed to create the iterator')
  #
  # for result in iter {
  #   match result {
  #     case Ok({ @path = path, @type = File }) -> {
  #       out.print(path.to_string)
  #       nil
  #     }
  #     case Ok(_) -> {}
  #     case Error(err) -> panic(err.to_string)
  #   }
  # }
  # ```
  fn pub list -> Result[ReadDirectory, Error] {
    sys.ReadDirectory.new(@path).map(fn (inner) {
      ReadDirectory(path: @path, inner: inner)
    })
  }

  # Returns an iterator that yields all non-directory entries in `self` and in
  # any sub directories.
  #
  # The order in which entries are returned is unspecified and shouldn't be
  # relied upon, and may change at any given point.
  #
  # If this iterator fails to read a sub directory (e.g. `bar` in `./foo/bar`
  # isn't readable) a `Some(Error(std.io.Error))` is returned. Because a `Some`
  # is returned the iterator can advance when encountering an error, similar to
  # the iterator returned by `Path.list`.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('/tmp').list_all.get.next
  # # => Option.Some(Result.Ok(DirectoryEntry(...)))
  # ```
  fn pub list_all -> Result[Stream[Result[DirectoryEntry, Error]], Error] {
    list.map(fn (iter) {
      let dirs = []
      let mut current = iter

      Stream.new(fn move {
        loop {
          match current.next {
            case Some(Ok({ @path = p, @type = Directory })) -> dirs.push(p)
            case Some(Ok(entry)) -> return Option.Some(Result.Ok(entry))
            case Some(Error(e)) -> return Option.Some(Result.Error(e))
            case None -> {
              match dirs.pop {
                case Some(dir) -> {
                  match dir.list {
                    case Ok(iter) -> current = iter
                    case Error(e) -> return Option.Some(Result.Error(e))
                  }
                }
                case _ -> return Option.None
              }
            }
          }
        }
      })
    })
  }

  # Removes the file `self` points to.
  #
  # # Errors
  #
  # This method returns an `Error` if the file `self` points to can't be removed
  # (e.g. it doesn't exist) or isn't a file.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (WriteOnlyFile)
  # import std.fs.path (Path)
  #
  # let path = Path.new('/tmp/test.txt')
  # let handle = WriteOnlyFile.new(path).get
  #
  # handle.write('hello') # => Result.Ok(nil)
  # path.remove_file      # => Result.Ok(nil)
  # ```
  fn pub remove_file -> Result[Nil, Error] {
    sys.remove_file(@path)
  }

  # Removes the directory `self` points to.
  #
  # # Errors
  #
  # This method returns an error if `self` points to a file or if the directory
  # can't be removed (e.g. the user lacks the necessary permissions).
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # let path = Path.new('/tmp/foo')
  #
  # path.create_directory # => Result.Ok(nil)
  # path.remove_directory # => Result.Ok(nil)
  # ```
  fn pub remove_directory -> Result[Nil, Error] {
    sys.remove_directory(@path)
  }

  # Removes the directory and its contents `self` points to.
  #
  # When encountering symbolic links, the link itself is removed instead of the
  # file it points to.
  #
  # # Errors
  #
  # This method returns an enty if any of the directories or the contents can't
  # be removed, such as when the user lacks the necessary permissions, or if
  # `self` points to something other than a directory.
  #
  # # Examples
  #
  # Removing a directory:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('/tmp/foo/bar').create_directory_all # => Result.Ok(nil)
  # Path.new('/tmp/foo').remove_directory_all     # => Result.Ok(nil)
  # ```
  fn pub remove_directory_all -> Result[Nil, Error] {
    let stack = [@path]
    let dirs = [@path]

    # First we remove all the files and gather the directories that need to be
    # removed.
    loop {
      let dir = match stack.pop {
        case Some(v) -> v
        case _ -> break
      }

      for entry in try sys.ReadDirectory.new(dir) {
        match entry {
          case Ok((name, Directory)) -> {
            let path = join_strings(dir, name)

            stack.push(path)
            dirs.push(path)
          }
          case Ok((name, _)) -> try sys.remove_file(join_strings(dir, name))
          case Error(e) -> throw e
        }
      }
    }

    # Now we can remove the directories in a depth-first order.
    loop {
      match dirs.pop {
        case Some(v) -> try sys.remove_directory(v)
        case _ -> break
      }
    }

    Result.Ok(nil)
  }

  # Creates a new empty directory at the path `self` points to.
  #
  # # Errors
  #
  # This method returns an `Error` if any of the following conditions are met:
  #
  # 1. The user lacks the necessary permissions to create the directory.
  # 2. The directory already exists.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('/tmp/test').create_directory # => Result.Ok(nil)
  # ```
  fn pub create_directory -> Result[Nil, Error] {
    sys.create_directory(@path)
  }

  # Creates a new empty directory at the path `self` points to, while also
  # creating any intermediate directories.
  #
  # Unlike `Path.create_directory`, this method _doesn't_ return an `Error` if
  # any of the directories already exist.
  #
  # # Errors
  #
  # This method returns an `Error` if any of the directories can't be created,
  # such as when the user doesn't have the required permissions to do so.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('/tmp/foo/bar/test').create_directory_all # => Result.Ok(nil)
  # ```
  fn pub create_directory_all -> Result[Nil, Error] {
    # A common case is when all leading directories already exist, in which case
    # we can avoid the more expensive loop to create the intermediate
    # directories.
    match create_directory {
      case Ok(_) or Error(AlreadyExists) -> return Result.Ok(nil)
      case Error(NotFound) -> {}
      case Error(e) -> throw e
    }

    try components.try_reduce('', fn (leading, cur) {
      let path = join_strings(leading, cur)

      match sys.create_directory(path) {
        case Ok(_) or Error(AlreadyExists) -> Result.Ok(path)
        case Error(e) -> Result.Error(e)
      }
    })

    Result.Ok(nil)
  }

  # Copies the file `self` points to the file `to` points to, returning the
  # number of bytes copied.
  #
  # If the target file already exists, it's overwritten.
  #
  # # Errors
  #
  # This method returns an `Error` if the file couldn't be copied, such as when
  # the source file doesn't exist or the user lacks the necessary permissions.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.file (WriteOnlyFile)
  # import std.fs.path (Path)
  #
  # let path = Path.new('/tmp/test.txt')
  # let file = WriteOnlyFile.new(path).get
  #
  # file.write('hello')             # => Result.Ok(nil)
  # path.copy(to: '/tmp/test2.txt') # => Result.Ok(5)
  # ```
  fn pub copy[T: ToString](to: ref T) -> Result[Int, Error] {
    sys.copy_file(@path, to.to_string)
  }

  # Returns an iterator over the components in `self`.
  #
  # When parsing the path as part of the iteration, the following normalization
  # is applied:
  #
  # - Repeated separators are treated as a single separator, such as `a/b` and
  #   `a//b` produce the same components
  # - Instances of `.` are normalized away except at the start, such that
  #   `a/./b` and `a/b` produce the same components
  # - Trailing separators are removed, such that `a/b//` and `a/b` produce the
  #   same components
  #
  # If the path starts with the path separator (e.g. `/` on Unix), the first
  # component returned by the iterator is the separator itself.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('a/b/c').components.to_array  # => ['a', 'b', 'c']
  # Path.new('/a/b/c').components.to_array # => ['/', 'a', 'b', 'c']
  # ```
  fn pub components -> Components {
    Components.new(self)
  }

  # Returns a new `Path` with the prefix `prefix` removed from it.
  #
  # If `self` doesn't start with `prefix`, a `None` is returned.
  #
  # This method operates on the in-memory representation of `self`, and doesn't
  # expand the path, follow symbolic links, etc.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path.new('a/b').strip_prefix(Path.new('a'))   # => Path.new('b')
  # Path.new('/a/b').strip_prefix(Path.new('/a')) # => Path.new('b')
  # ```
  fn pub strip_prefix(prefix: ref Path) -> Option[Path] {
    let comp = components
    let valid = prefix.components.all?(fn (theirs) {
      match comp.next {
        case Some(ours) -> ours == theirs
        case _ -> false
      }
    })

    if valid {
      Option.Some(Path.new(String.join(comp, SEPARATOR)))
    } else {
      Option.None
    }
  }

  # Returns a metadata about the current path, such as its size and creation
  # time.
  #
  # # Errors
  #
  # This method returns an `Error` if the underlying system call fails, such as
  # when the file no longer exists.
  #
  # # Examples
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # Path
  #   .new('/tmp/test.txt')
  #   .metadata
  #   .or_panic_with('failed to get the metadata')
  #   .size # => 1234
  # ```
  fn pub metadata -> Result[Metadata, Error] {
    sys.path_metadata(@path)
  }
}

impl Equal for Path {
  # Returns `true` if `self` is equal to the given `Path`.
  #
  # # Examples
  #
  # Comparing two paths:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # let path1 = Path.new('foo')
  # let path2 = Path.new('foo')
  #
  # path1 == path2 # => true
  # ```
  fn pub ==(other: ref Path) -> Bool {
    @path == other.to_string
  }
}

impl ToString for Path {
  # Converts a `Path` to a `String`.
  #
  # # Examples
  #
  # Converting a `Path`:
  #
  # ```inko
  # import std.fs.path (Path)
  #
  # let path = Path.new('/dev/null')
  #
  # path.to_string # => '/dev/null'
  # ```
  fn pub to_string -> String {
    @path
  }
}

impl IntoString for Path {
  fn pub move into_string -> String {
    @path
  }
}

impl Clone for Path {
  fn pub clone -> Path {
    Path.new(@path)
  }
}

impl Format for Path {
  fn pub fmt(formatter: mut Formatter) {
    @path.fmt(formatter)
  }
}

impl Hash for Path {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    @path.hash(hasher)
  }
}
