# Cross-platform path manipulation.
import std::clone::Clone
import std::cmp::Equal
import std::fmt::(Format, Formatter)
import std::io::(Error, Size)
import std::string::(ToString, IntoString)
import std::sys
import std::time::DateTime

# The character used to separate components in a file path.
let pub SEPARATOR = '/'

# Returns `True` if the byte is a valid path separator byte.
fn path_separator?(byte: Int) -> Bool {
  byte == 47
}

# Returns the number of bytes leading up to the last path separator.
#
# If no separator could be found, `-1` is returned.
fn bytes_before_last_separator(path: String) -> Int {
  if path.empty? { return -1 }

  let mut index = path.size - 1

  # Trailing separators should be ignored, so we'll skip over them until the
  # first non-separator byte.
  while index > 0 and path_separator?(path.byte(index)) {
    index -= 1
  }

  let mut in_separator = false

  while index > -1 {
    let byte = path.byte(index)

    if path_separator?(byte) {
      in_separator = true
    } else if in_separator {
      return index + 1
    }

    index -= 1
  }

  if in_separator { 1 } else { -1 }
}

# Returns `True` if the given file path is an absolute path.
fn absolute_path?(path: String) -> Bool {
  path_separator?(path.byte(0))
}

# A path to a file or directory.
#
# A `Path` can be used to retrieve information about a path to a file or
# directory such as the size or file type. `Path` objects can be created by
# either using `Path.new` or by sending `to_path` to a `String`.
#
# # Examples
#
# Creating a new `Path` using a `String`:
#
#     import std::fs::path::Path
#
#     Path.new('/tmp/hello.txt')
#
# Converting a `String` to a `Path`:
#
#     import std::fs::path::Path
#
#     '/tmp/hello.txt'.to_path
class pub Path {
  # The raw file path.
  let @path: String

  fn pub static new(path: String) -> Path {
    Path { @path = path }
  }

  # Returns `True` if the path points to a file.
  fn pub file? -> Bool {
    _INKO.path_is_file(@path)
  }

  # Returns `True` if the path points to a directory.
  fn pub directory? -> Bool {
    _INKO.path_is_directory(@path)
  }

  # Returns `True` if the path points to an existing file or directory.
  fn pub exists? -> Bool {
    _INKO.path_exists(@path)
  }

  # Returns the creation time of `self`.
  #
  # # Examples
  #
  # Obtaining the creation time of a `Path`:
  #
  #     import std::fs::path::Path
  #
  #     let path = Path.new('README.md')
  #
  #     path.created_at.unwrap # => DateTime { ... }
  fn pub created_at -> Result[DateTime, Error] {
    match _INKO.path_created_at(@path) {
      case { @tag = 0, @value = val } -> Result.Ok(
        DateTime.from_timestamp(val as Float, _INKO.time_system_offset)
      )
      case { @tag = _, @value = e } -> Result.Error(Error.from_int(e as Int))
    }
  }

  # Returns the modification time of `self`.
  #
  # # Examples
  #
  # Obtaining the modification time of a `Path`:
  #
  #     import std::fs::path::Path
  #
  #     let path = Path.new('README.md')
  #
  #     path.modified_at.unwrap # => DateTime { ... }
  fn pub modified_at -> Result[DateTime, Error] {
    match _INKO.path_modified_at(@path) {
      case { @tag = 0, @value = val } -> Result.Ok(
        DateTime.from_timestamp(val as Float, _INKO.time_system_offset)
      )
      case { @tag = _, @value = e } -> Result.Error(Error.from_int(e as Int))
    }
  }

  # Returns the access time of `self`.
  #
  # # Examples
  #
  # Obtaining the access time of a `Path`:
  #
  #     import std::fs::path::Path
  #
  #     let path = Path.new('README.md')
  #
  #     path.accessed_at.unwrap # => DateTime { ... }
  fn pub accessed_at -> Result[DateTime, Error] {
    match _INKO.path_accessed_at(@path) {
      case { @tag = 0, @value = val } -> Result.Ok(
        DateTime.from_timestamp(val as Float, _INKO.time_system_offset)
      )
      case { @tag = _, @value = e } -> Result.Error(Error.from_int(e as Int))
    }
  }

  # Returns `True` if this `Path` is an absolute path.
  #
  # # Examples
  #
  # Checking if a `Path` is absolute:
  #
  #     import std::fs::path::Path
  #
  #     Path.new('foo').absolute?  # => False
  #     Path.new('/foo').absolute? # => True
  fn pub absolute? -> Bool {
    absolute_path?(@path)
  }

  # Returns `True` if this `Path` is a relative path.
  #
  # # Examples
  #
  # Checking if a `Path` is relative:
  #
  #     import std::fs::path::Path
  #
  #     Path.new('foo').relative?  # => True
  #     Path.new('../').relative?  # => True
  #     Path.new('/foo').relative? # => False
  fn pub relative? -> Bool {
    absolute?.false?
  }

  # Joins `self` and the given path together to form a new `Path`.
  #
  # # Examples
  #
  # Joining a `Path` with a `String`:
  #
  #     import std::fs::path::Path
  #
  #     Path.new('foo/bar').join('baz').to_string # => 'foo/bar/baz'
  #
  # Joining a `Path` with another `Path`:
  #
  #     import std::fs::path::Path
  #
  #     Path.new('foo/bar').join(Path.new('bar')).to_string # => 'foo/bar/baz'
  fn pub join(path: ref ToString) -> Path {
    let path_str = path.to_string
    let new_path = if absolute_path?(path_str) {
      path_str
    } else if path_separator?(@path.byte(@path.size - 1)) {
      "{@path}{path_str}"
    } else {
      "{@path}{SEPARATOR}{path_str}"
    }

    Path.new(new_path)
  }

  # Returns a `Path` to the directory of the current `Path`.
  #
  # This method does not touch the filesystem, and thus does not resolve paths
  # like `..` and symbolic links to their real paths.
  #
  # # Examples
  #
  # Obtaining the directory of a path:
  #
  #     import std::fs::path::Path
  #
  #     Path.new('/foo/bar').directory # => Path.new('/foo')
  #
  # Obtaining the directory of the root directory:
  #
  #     import std::fs::path::Path
  #
  #     Path.new('/').directory # Path.new('/')
  fn pub directory -> Path {
    let length = bytes_before_last_separator(@path)

    if length < 0 { return Path.new('.') }

    Path.new(@path.slice_bytes(start: 0, length: length))
  }

  # Returns the last component in `self`.
  #
  # If `self` is a file, then the tail will be the file name including its
  # extension. If `self` is a directory, the directory name is returned.
  #
  # # Examples
  #
  #     import std::fs::path::Path
  #
  #     Path.new('foo/bar/baz.txt') # => 'baz.txt'
  fn pub tail -> String {
    let len = bytes_before_last_separator(@path)

    if len < 0 { return @path }

    @path.slice_bytes(start: len + 1, length: @path.size - len)
  }

  # Returns the canonical, absolute version of `self`.
  #
  # # Errors
  #
  # This method may return an `Error` for cases such as when `self` doesn't
  # exist, or when a component that isn't the last component is _not_ a
  # directory.
  #
  # # Examples
  #
  #     import std::fs::path::Path
  #
  #     Path.new('/foo/../bar').expand.unwrap # => Path.new('/bar')
  fn pub expand -> Result[Path, Error] {
    match _INKO.path_expand(@path) {
      case { @tag = 0, @value = v } -> Result.Ok(Path.new(v as String))
      case { @tag = _, @value = e } -> Result.Error(Error.from_int(e as Int))
    }
  }
}

# A type from which a new `Path` can be created.
trait pub ToPath {
  # Returns a new `Path` based on `self`.
  fn pub to_path -> Path
}

# A type that can be moved into a `Path`
#
# `IntoPath` is useful when you want to accept any type that can be converted to
# a `Path`, including a `Path` itself, but don't unnecessary allocations.
trait pub IntoPath {
  # Moves `self` into a `Path`.
  fn pub move into_path -> Path
}

impl Equal[Path] for Path {
  # Returns `True` if `self` is equal to the given `Path`.
  #
  # # Examples
  #
  # Comparing two paths:
  #
  #     import std::fs::path::Path
  #
  #     let path1 = Path.new('foo')
  #     let path2 = Path.new('foo')
  #
  #     path1 == path2 # => True
  fn pub ==(other: ref Path) -> Bool {
    @path == other.to_string
  }
}

impl ToString for Path {
  # Converts a `Path` to a `String`.
  #
  # # Examples
  #
  # Converting a `Path`:
  #
  #     import std::fs::path::Path
  #
  #     let path = Path.new('/dev/null')
  #
  #     path.to_string # => '/dev/null'
  fn pub to_string -> String {
    @path
  }
}

impl IntoString for Path {
  fn pub move into_string -> String {
    @path
  }
}

impl Size for Path {
  # Returns the size of the path in bytes.
  #
  # # Examples
  #
  # Getting the size of a path:
  #
  #     import std::fs::path::Path
  #
  #     let path = Path.new('/dev/null')
  #
  #     path.size.unwrap # => 0
  fn pub size -> Result[Int, Error] {
    match _INKO.file_size(@path) {
      case { @tag = 0, @value = v } -> Result.Ok(v as Int)
      case { @tag = _, @value = e } -> Result.Error(Error.from_int(e as Int))
    }
  }
}

impl Clone[Path] for Path {
  fn pub clone -> Path {
    Path.new(@path)
  }
}

impl ToPath for Path {
  fn pub to_path -> Path {
    clone
  }
}

impl IntoPath for Path {
  fn pub move into_path -> Path {
    self
  }
}

impl Format for Path {
  fn pub fmt(formatter: mut Formatter) {
    @path.fmt(formatter)
  }
}
