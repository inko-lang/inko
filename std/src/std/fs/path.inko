# Cross-platform path manipulation.
import std.clone.Clone
import std.cmp.Equal
import std.fmt.(Format, Formatter)
import std.fs.DirectoryEntry
import std.io.(Error, Size)
import std.iter.Iter
import std.libc.unix.dir.(ReadDirectory as ReadDirectoryInner) if unix
import std.string.(ToString, IntoString)
import std.sys
import std.time.DateTime

class extern IntResult {
  let @tag: Int
  let @value: Int
}

class extern AnyResult {
  let @tag: Int
  let @value: UInt64
}

fn extern inko_file_remove(process: Pointer[UInt8], path: String) -> AnyResult

fn extern inko_file_copy(
  process: Pointer[UInt8],
  from: String,
  to: String,
) -> AnyResult

fn extern inko_directory_remove(
  process: Pointer[UInt8],
  path: String,
) -> AnyResult

fn extern inko_directory_create(
  process: Pointer[UInt8],
  path: String,
) -> AnyResult

fn extern inko_directory_create_recursive(
  process: Pointer[UInt8],
  path: String,
) -> AnyResult

fn extern inko_directory_remove_recursive(
  process: Pointer[UInt8],
  path: String,
) -> AnyResult

fn extern inko_file_size(
  process: Pointer[UInt8],
  path: String,
) -> IntResult

fn extern inko_path_accessed_at(
  process: Pointer[UInt8],
  path: String,
) -> AnyResult

fn extern inko_path_created_at(
  process: Pointer[UInt8],
  path: String,
) -> AnyResult

fn extern inko_path_modified_at(
  process: Pointer[UInt8],
  path: String,
) -> AnyResult

fn extern inko_path_exists(
  process: Pointer[UInt8],
  path: String,
) -> Bool

fn extern inko_path_is_file(
  process: Pointer[UInt8],
  path: String,
) -> Bool

fn extern inko_path_is_directory(
  process: Pointer[UInt8],
  path: String,
) -> Bool

fn extern inko_path_expand(state: Pointer[UInt8], path: String) -> AnyResult
fn extern inko_time_system_offset -> Int64

# The character used to separate components in a file path.
let pub SEPARATOR = '/'

# Returns `true` if the byte is a valid path separator byte.
fn path_separator?(byte: Int) -> Bool {
  byte == 47
}

# Returns the number of bytes leading up to the last path separator.
#
# If no separator could be found, `-1` is returned.
fn bytes_before_last_separator(path: String) -> Int {
  if path.empty? { return -1 }

  let mut index = path.size - 1

  # Trailing separators should be ignored, so we'll skip over them until the
  # first non-separator byte.
  while index > 0 and path_separator?(path.byte(index)) {
    index -= 1
  }

  let mut in_separator = false

  while index > -1 {
    let byte = path.byte(index)

    if path_separator?(byte) {
      in_separator = true
    } else if in_separator {
      return index + 1
    }

    index -= 1
  }

  if in_separator { 1 } else { -1 }
}

# Returns `true` if the given file path is an absolute path.
fn absolute_path?(path: String) -> Bool {
  path_separator?(path.byte(0))
}

fn join_strings(base: ref String, with: ref String) -> String {
  if with.empty? { return base.clone }

  if absolute_path?(with) {
    with
  } else if path_separator?(base.byte(base.size - 1)) {
    "{base}{with}"
  } else {
    "{base}{SEPARATOR}{with}"
  }
}

# An iterator over the entries in a directory.
#
# See the documentation of `std.fs.path.Path.list` for more details.
class pub ReadDirectory {
  let @path: String
  let @inner: ReadDirectoryInner
}

impl Iter[Result[DirectoryEntry, Error]] for ReadDirectory {
  fn pub mut next -> Option[Result[DirectoryEntry, Error]] {
    let ret = match try { @inner.next } {
      case Ok((path, type)) -> Result.Ok(DirectoryEntry {
        @path = Path.new(join_strings(@path, with: path)),
        @type = type,
      })
      case Error(e) -> Result.Error(e)
    }

    Option.Some(ret)
  }
}

# A path to a file or directory.
#
# A `Path` can be used to retrieve information about a path to a file or
# directory such as the size or file type. `Path` objects can be created by
# either using `Path.new` or by sending `to_path` to a `String`.
#
# # Examples
#
# Creating a new `Path` using a `String`:
#
#     import std.fs.path.Path
#
#     Path.new('/tmp/hello.txt')
#
# Converting a `String` to a `Path`:
#
#     import std.fs.path.Path
#
#     '/tmp/hello.txt'.to_path
class pub Path {
  # The raw file path.
  let @path: String

  fn pub static new(path: String) -> Path {
    Path { @path = path }
  }

  # Returns `true` if the path points to a file.
  fn pub file? -> Bool {
    inko_path_is_file(_INKO.process, @path)
  }

  # Returns `true` if the path points to a directory.
  fn pub directory? -> Bool {
    inko_path_is_directory(_INKO.process, @path)
  }

  # Returns `true` if the path points to an existing file or directory.
  fn pub exists? -> Bool {
    inko_path_exists(_INKO.process, @path)
  }

  # Returns the creation time of `self`.
  #
  # # Examples
  #
  # Obtaining the creation time of a `Path`:
  #
  #     import std.fs.path.Path
  #
  #     let path = Path.new('README.md')
  #
  #     path.created_at.unwrap # => DateTime { ... }
  fn pub created_at -> Result[DateTime, Error] {
    match inko_path_created_at(_INKO.process, @path) {
      case { @tag = 0, @value = val } -> Result.Ok(
        DateTime.from_timestamp(val as Float, inko_time_system_offset as Int)
      )
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Returns the modification time of `self`.
  #
  # # Examples
  #
  # Obtaining the modification time of a `Path`:
  #
  #     import std.fs.path.Path
  #
  #     let path = Path.new('README.md')
  #
  #     path.modified_at.unwrap # => DateTime { ... }
  fn pub modified_at -> Result[DateTime, Error] {
    match inko_path_modified_at(_INKO.process, @path) {
      case { @tag = 0, @value = val } -> Result.Ok(
        DateTime.from_timestamp(val as Float, inko_time_system_offset as Int)
      )
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Returns the access time of `self`.
  #
  # # Examples
  #
  # Obtaining the access time of a `Path`:
  #
  #     import std.fs.path.Path
  #
  #     let path = Path.new('README.md')
  #
  #     path.accessed_at.unwrap # => DateTime { ... }
  fn pub accessed_at -> Result[DateTime, Error] {
    match inko_path_accessed_at(_INKO.process, @path) {
      case { @tag = 0, @value = val } -> Result.Ok(
        DateTime.from_timestamp(val as Float, inko_time_system_offset as Int)
      )
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Returns `true` if this `Path` is an absolute path.
  #
  # # Examples
  #
  # Checking if a `Path` is absolute:
  #
  #     import std.fs.path.Path
  #
  #     Path.new('foo').absolute?  # => false
  #     Path.new('/foo').absolute? # => true
  fn pub absolute? -> Bool {
    absolute_path?(@path)
  }

  # Returns `true` if this `Path` is a relative path.
  #
  # # Examples
  #
  # Checking if a `Path` is relative:
  #
  #     import std.fs.path.Path
  #
  #     Path.new('foo').relative?  # => true
  #     Path.new('../').relative?  # => true
  #     Path.new('/foo').relative? # => false
  fn pub relative? -> Bool {
    absolute?.false?
  }

  # Joins `self` and the given path together to form a new `Path`.
  #
  # # Examples
  #
  # Joining a `Path` with a `String`:
  #
  #     import std.fs.path.Path
  #
  #     Path.new('foo/bar').join('baz').to_string # => 'foo/bar/baz'
  #
  # Joining a `Path` with another `Path`:
  #
  #     import std.fs.path.Path
  #
  #     Path.new('foo/bar').join(Path.new('bar')).to_string # => 'foo/bar/baz'
  fn pub join[T: ToString](path: ref T) -> Path {
    Path.new(join_strings(@path, with: path.to_string))
  }

  # Returns a `Path` to the directory of the current `Path`.
  #
  # This method does not touch the filesystem, and thus does not resolve paths
  # like `..` and symbolic links to their real paths.
  #
  # # Examples
  #
  # Obtaining the directory of a path:
  #
  #     import std.fs.path.Path
  #
  #     Path.new('/foo/bar').directory # => Path.new('/foo')
  #
  # Obtaining the directory of the root directory:
  #
  #     import std.fs.path.Path
  #
  #     Path.new('/').directory # Path.new('/')
  fn pub directory -> Path {
    let size = bytes_before_last_separator(@path)

    if size < 0 { return Path.new('.') }

    Path.new(@path.slice(start: 0, size: size).into_string)
  }

  # Returns the last component in `self`.
  #
  # If `self` is a file, then the tail will be the file name including its
  # extension. If `self` is a directory, the directory name is returned.
  #
  # # Examples
  #
  #     import std.fs.path.Path
  #
  #     Path.new('foo/bar/baz.txt') # => 'baz.txt'
  fn pub tail -> String {
    let len = bytes_before_last_separator(@path)

    if len < 0 { return @path }

    @path.slice(start: len + 1, size: @path.size - len).into_string
  }

  # Returns the canonical, absolute version of `self`.
  #
  # # Errors
  #
  # This method may return an `Error` for cases such as when `self` doesn't
  # exist, or when a component that isn't the last component is _not_ a
  # directory.
  #
  # # Examples
  #
  #     import std.fs.path.Path
  #
  #     Path.new('/foo/../bar').expand.unwrap # => Path.new('/bar')
  fn pub expand -> Result[Path, Error] {
    match inko_path_expand(_INKO.state, @path) {
      case { @tag = 0, @value = v } -> Result.Ok(Path.new(v as String))
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Returns an iterator yielding the entries in the directory `self` points to.
  #
  # The iterator yields values of type `Result[DirectoryEntry, Error]`, as
  # errors may be produced during iteration (e.g. file permissions are changed
  # such that we can no longer read the directory contents).
  #
  # # Errors
  #
  # This method returns an `Error` if any of the following conditions are met:
  #
  # 1. The user lacks the necessary permissions to read the contents of the
  #    directory.
  # 2. The path isn't a valid directory (i.e. it's a file or doesn't exist).
  #
  # # Examples
  #
  # This prints the files in the current working directory while ignoring
  # directories:
  #
  #     import std.fs.path.Path
  #     import std.stdio.STDOUT
  #
  #     let out = STDOUT.new
  #     let path = Path.new('.')
  #     let iter = path.list.expect('failed to create the iterator')
  #
  #     iter.each fn (result) {
  #       match result {
  #         case Ok({ @path = path, @type = File }) -> {
  #           out.print(path.to_string)
  #           nil
  #         }
  #         case Ok(_) -> {}
  #         case Error(err) -> panic(err.to_string)
  #       }
  #     }
  fn pub list -> Result[ReadDirectory, Error] {
    ReadDirectoryInner.new(@path).map fn (inner) {
      ReadDirectory { @path = @path, @inner = inner }
    }
  }

  # Removes the file `self` points to.
  #
  # If `self` points to a directory, an error is returned.
  #
  # # Examples
  #
  #     import std.fs.file.WriteOnlyFile
  #     import std.fs.path.Path
  #
  #     let path = Path.new('/tmp/test.txt')
  #     let handle = WriteOnlyFile.new(path).unwrap
  #
  #     handle.write_string('hello').unwrap
  #     path.remove_file.unwrap
  fn pub remove_file -> Result[Nil, Error] {
    match inko_file_remove(_INKO.process, @path) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Removes the directory `self` points to.
  #
  # If `self` points to a file, an error is returned.
  #
  # # Examples
  #
  #     import std.fs.path.Path
  #
  #     let path = Path.new('/tmp/foo')
  #
  #     path.create_directory.unwrap
  #     path.remove_directory.unwrap
  fn pub remove_directory -> Result[Nil, Error] {
    match inko_directory_remove(_INKO.process, @path) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Removes the directory and its contents `self` points to.
  #
  # # Errors
  #
  # This method returns an `Error` if any of the following conditions are met:
  #
  # 1. The user lacks the necessary permissions to remove the directory.
  # 2. The directory does not exist.
  #
  # # Examples
  #
  # Removing a directory:
  #
  #     import std.fs.path.Path
  #
  #     Path.new('/tmp/foo/bar').create_directory_all.unwrap
  #     Path.new('/tmp/foo').remove_directory_all.unwrap
  fn pub remove_directory_all -> Result[Nil, Error] {
    match inko_directory_remove_recursive(_INKO.process, @path) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Creates a new empty directory at the path `self` points to.
  #
  # # Errors
  #
  # This method returns an `Error` if any of the following conditions are met:
  #
  # 1. The user lacks the necessary permissions to create the directory.
  # 2. The directory already exists.
  #
  # # Examples
  #
  #     import std.fs.path.Path
  #
  #     Path.new('/tmp/test').create_directory.unwrap
  fn pub create_directory -> Result[Nil, Error] {
    match inko_directory_create(_INKO.process, @path) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Creates a new empty directory at the path `self` points to, while also
  # creating any intermediate directories.
  #
  # # Errors
  #
  # This method returns an `Error` if any of the following conditions are met:
  #
  # 1. The user lacks the necessary permissions to create the directory.
  #
  # # Examples
  #
  #     import std.fs.path.Path
  #
  #     Path.new('/tmp/foo/bar/test').create_directory_all.unwrap
  fn pub create_directory_all -> Result[Nil, Error] {
    match inko_directory_create_recursive(_INKO.process, @path) {
      case { @tag = 1, @value = _ } -> Result.Ok(nil)
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }

  # Copies the file `self` points to the file `to` points to, returning the
  # number of copied bytes.
  #
  # If `self` or `to` points to a directory, an error is returned.
  #
  # # Examples
  #
  #     import std.fs.file.WriteOnlyFile
  #     import std.fs.path.Path
  #
  #     let path = Path.new('/tmp/test.txt')
  #     let file = WriteOnlyFile.new(path).unwrap
  #
  #     file.write_string('hello').unwrap
  #     path.copy(to: '/tmp/test2.txt').unwrap
  fn pub copy[T: ToString](to: ref T) -> Result[Int, Error] {
    match inko_file_copy(_INKO.process, @path, to.to_string) {
      case { @tag = 0, @value = v } -> Result.Ok(v as Int)
      case { @tag = _, @value = e } -> Result.Error(
        Error.from_os_error(e as Int)
      )
    }
  }
}

# A type from which a new `Path` can be created.
trait pub ToPath {
  # Returns a new `Path` based on `self`.
  fn pub to_path -> Path
}

# A type that can be moved into a `Path`
#
# `IntoPath` is useful when you want to accept any type that can be converted to
# a `Path`, including a `Path` itself, but don't unnecessary allocations.
trait pub IntoPath {
  # Moves `self` into a `Path`.
  fn pub move into_path -> Path
}

impl Equal[Path] for Path {
  # Returns `true` if `self` is equal to the given `Path`.
  #
  # # Examples
  #
  # Comparing two paths:
  #
  #     import std.fs.path.Path
  #
  #     let path1 = Path.new('foo')
  #     let path2 = Path.new('foo')
  #
  #     path1 == path2 # => true
  fn pub ==(other: ref Path) -> Bool {
    @path == other.to_string
  }
}

impl ToString for Path {
  # Converts a `Path` to a `String`.
  #
  # # Examples
  #
  # Converting a `Path`:
  #
  #     import std.fs.path.Path
  #
  #     let path = Path.new('/dev/null')
  #
  #     path.to_string # => '/dev/null'
  fn pub to_string -> String {
    @path
  }
}

impl IntoString for Path {
  fn pub move into_string -> String {
    @path
  }
}

impl Size for Path {
  # Returns the size of the path in bytes.
  #
  # # Examples
  #
  # Getting the size of a path:
  #
  #     import std.fs.path.Path
  #
  #     let path = Path.new('/dev/null')
  #
  #     path.size.unwrap # => 0
  fn pub size -> Result[Int, Error] {
    match inko_file_size(_INKO.process, @path) {
      case { @tag = 0, @value = v } -> Result.Ok(v)
      case { @tag = _, @value = e } -> Result.Error(Error.from_os_error(e))
    }
  }
}

impl Clone[Path] for Path {
  fn pub clone -> Path {
    Path.new(@path)
  }
}

impl ToPath for Path {
  fn pub to_path -> Path {
    clone
  }
}

impl IntoPath for Path {
  fn pub move into_path -> Path {
    self
  }
}

impl Format for Path {
  fn pub fmt(formatter: mut Formatter) {
    @path.fmt(formatter)
  }
}
