import std.crypto.pem
import std.crypto.x509
import std.env
import std.fs.path (Path)
import std.hash (Hash)
import std.hash.siphash (SipHasher13)
import std.io (Buffer)

# A valid private key. Do not actually use this key outside of this test suite.
#
# This certificate and its private key are generated using the following
# configuration file:
#
# ```
# [req]
# distinguished_name = req_distinguished_name
# x509_extensions = v3_req
# prompt = no
# [req_distinguished_name]
# C = US
# ST = VA
# L = SomeCity
# O = MyCompany
# OU = MyDivision
# CN = localhost
# [v3_req]
# keyUsage = critical, digitalSignature, keyAgreement
# extendedKeyUsage = serverAuth
# subjectAltName = DNS:localhost,IP:127.0.0.1,IP:::1
# ```
#
# And the following command:
#
# ```
# openssl req -x509 -newkey rsa:4096 -days 36500 -noenc \
#   -keyout example.com.key -out example.com.crt -config req.cnf
# ```
let pub VALID_KEY = '
-----BEGIN PRIVATE KEY-----
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
Gsn/x5Bkk4wovpT5nths8I2Rd3sWoQ==
-----END PRIVATE KEY-----
'

# A valid certificate. Do not actually use this key outside of this test suite.
let pub VALID_CERT = '
-----BEGIN CERTIFICATE-----
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
k0pvsPWTGNAO69ym
-----END CERTIFICATE-----
'

fn pub inline debug? -> Bool {
  env.MODE == 'debug'
}

fn pub hash[T: Hash](value: ref T) -> Int {
  let hasher = SipHasher13.default

  value.hash(hasher)
  hasher.finish
}

fn pub with_directory[R](id: Int, func: fn (ref Path) -> R) -> R {
  let path = env.temporary_directory.join('inko-test-directory-${id}')
  let ret = func.call(path)
  let _ = path.remove_directory_all

  ret
}

fn pub compiler_path -> Path {
  let base = match env.working_directory {
    case Ok(path) -> path
    case Error(err) -> {
      panic('Failed to determine the working directory: ${err}')
    }
  }

  let target = if base.join('test').directory? {
    base.join('..').join('target')
  } else if base.join('std').directory? {
    base.join('target')
  } else {
    panic('Tests must be run in either the project root, or the std/ directory')
  }

  let debug = target.join('debug').join('inko')
  let release = target.join('release').join('inko')

  match
    (
      debug.metadata.map(fn (m) { m.modified_at.to_date_time }),
      release.metadata.map(fn (m) { m.modified_at.to_date_time }),
    )
  {
    case (Ok(deb), Ok(rel)) -> if deb >= rel { debug } else { release }
    case (Ok(_), Error(_)) -> debug
    case (Error(_), Ok(_)) -> release
    case _ -> panic("The path to the compiler couldn't be determined")
  }
}

fn pub certificate -> x509.Certificate {
  match pem.PemFile.new(Buffer.new(VALID_CERT)).next {
    case Some(Ok(Certificate(cert))) -> cert
    case _ -> panic('the certificate data is invalid')
  }
}

fn pub private_key -> x509.PrivateKey {
  match pem.PemFile.new(Buffer.new(VALID_KEY)).next {
    case Some(Ok(PrivateKey(cert))) -> cert
    case _ -> panic('the private key data is invalid')
  }
}
