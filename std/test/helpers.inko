import std.env
import std.fs.path (Path)
import std.hash (Hash)
import std.hash.siphash (SipHasher13)

fn pub inline debug? -> Bool {
  env.MODE == 'debug'
}

fn pub hash[T: Hash](value: ref T) -> Int {
  let hasher = SipHasher13.default

  value.hash(hasher)
  hasher.finish
}

fn pub with_directory[R](id: Int, func: fn (ref Path) -> R) -> R {
  let path = env.temporary_directory.join('inko-test-directory-${id}')
  let ret = func.call(path)
  let _ = path.remove_directory_all

  ret
}

fn pub compiler_path -> Path {
  let base = match env.working_directory {
    case Ok(path) -> path
    case Error(err) -> {
      panic('Failed to determine the working directory: ${err}')
    }
  }

  let target = if base.join('test').directory? {
    base.join('..').join('target')
  } else if base.join('std').directory? {
    base.join('target')
  } else {
    panic('Tests must be run in either the project root, or the std/ directory')
  }

  let debug = target.join('debug').join('inko')
  let release = target.join('release').join('inko')

  match
    (
      debug.metadata.map(fn (m) { m.modified_at }),
      release.metadata.map(fn (m) { m.modified_at }),
    )
  {
    case (Ok(deb), Ok(rel)) -> if deb >= rel { debug } else { release }
    case (Ok(_), Error(_)) -> debug
    case (Error(_), Ok(_)) -> release
    case _ -> panic("The path to the compiler couldn't be determined")
  }
}
