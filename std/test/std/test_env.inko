import std.env (self, MissingVariable)
import std.fmt (fmt)
import std.stdio (Stdout)
import std.test (Tests)

let COMPILE_TIME_CONCAT = 'version: ' + env.VERSION

fn pub tests(t: mut Tests) {
  t.test('env.ARCH', fn (t) { t.true(env.ARCH.size > 0) })

  t.test('env.OS', fn (t) { t.true(env.OS.size > 0) })

  t.test('env.ABI', fn (t) { t.true(env.ABI.size > 0) })

  t.test('env.VERSION', fn (t) {
    t.true(env.VERSION.size > 0)
    t.not_equal(env.VERSION, 'generated at compile-time')

    # This test exists to make sure that if a constant refers to a compile-time
    # overwritten constant, it uses the correct value.
    t.not_equal(COMPILE_TIME_CONCAT, 'version: generated at compile-time')
  })

  t.test('MissingVariable.to_string', fn (t) {
    t.equal(
      MissingVariable.new('NAME').to_string,
      "the environment variable 'NAME' is missing",
    )
  })

  t.test('MissingVariable.fmt', fn (t) {
    t.equal(fmt(MissingVariable.new('NAME')), 'MissingVariable(name: "NAME")')
  })

  t.test('MissingVariable.==', fn (t) {
    t.equal(MissingVariable.new('NAME'), MissingVariable.new('NAME'))
    t.not_equal(MissingVariable.new('NAME'), MissingVariable.new('AGE'))
  })

  t.fork(
    'env.get',
    child: fn { Stdout.new.write(env.get('INKO_TEST').or('?')) },
    test: fn (test, process) {
      process.variable('INKO_TEST', 'foo')
      test.equal(process.spawn.stdout, 'foo')
    },
  )

  t.fork(
    'env.variables',
    child: fn {
      let out = Stdout.new
      let vars = env.variables
      let _ = out.print(vars.get('INKO_FOO').or_panic)
      let _ = out.print(vars.get('INKO_BAR').or_panic)
    },
    test: fn (test, process) {
      process.variable('INKO_FOO', 'foo')
      process.variable('INKO_BAR', 'bar')
      test.equal(process.spawn.stdout, 'foo\nbar\n')
    },
  )

  t.test('env.home_directory', fn (t) {
    # Home directories are optional, and even if they're set the actual path may
    # not exist. As such there's not really anything we can test for, other than
    # asserting the path isn't empty.
    match env.home_directory {
      case Some(path) -> t.true(path.to_string.size > 0)
      case _ -> {}
    }
  })

  t.fork(
    'env.home_directory with a missing home directory',
    child: fn {
      let out = Stdout.new
      let res = env.home_directory.map(fn (v) { v.to_string }).or('ERROR')

      out.write(res)
    },
    test: fn (test, proc) {
      proc.variable('HOME', '')
      test.equal(proc.spawn.stdout, 'ERROR')
    },
  )

  t.test('env.working_directory', fn (t) {
    let path = env.working_directory.get

    t.true(path.directory?)
  })

  t.fork(
    'env.working_directory=',
    child: fn {
      let out = Stdout.new
      let _ = env.working_directory = env.temporary_directory

      out.write(env.working_directory.get.to_string)
    },
    test: fn (test, process) {
      test.equal(process.spawn.stdout, env.temporary_directory.to_string)
    },
  )

  t.fork(
    'env.arguments',
    child: fn {
      let out = Stdout.new
      let args = env.arguments
      let _ = out.print(args.get(0).or_panic)
      let _ = out.print(args.get(1).or_panic)
    },
    test: fn (test, process) {
      process.argument('foo')
      process.argument('bar')
      test.equal(process.spawn.stdout, 'foo\nbar\n')
    },
  )

  t.test('env.executable', fn (t) {
    let path = env.executable.get

    t.true(path.file?)
  })
}
