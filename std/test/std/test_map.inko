import helpers (hash)
import std.fmt (fmt)
import std.map (DEFAULT_CAPACITY, MissingKey)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('MissingKey.to_string', fn (t) {
    t.equal(MissingKey.new('name').to_string, 'the key is missing')
  })

  t.test('MissingKey.fmt', fn (t) {
    t.equal(fmt(MissingKey.new('name')), 'MissingKey(key: "name")')
  })

  t.test('MissingKey.==', fn (t) {
    t.equal(MissingKey.new('name'), MissingKey.new('name'))
    t.not_equal(MissingKey.new('name'), MissingKey.new('age'))
  })

  t.test('Map.with_capacity', fn (t) {
    let map1: Map[Int, Int] = Map.new
    let map2: Map[Int, Int] = Map.with_capacity(0)
    let map3: Map[Int, Int] = Map.with_capacity(1)
    let map4: Map[Int, Int] = Map.with_capacity(3)
    let map5: Map[Int, Int] = Map.with_capacity(8)

    t.equal(map1.capacity, 4)
    t.equal(map2.capacity, 4)
    t.equal(map3.capacity, 1)
    t.equal(map4.capacity, 4)
    t.equal(map5.capacity, 8)
  })

  t.test('Map.remove', fn (t) {
    let map = Map.new

    map.set('name', 'Alice')
    map.set('city', 'Bla')
    map.set('foo', 'bar')
    map.set('bar', 'baz')

    t.equal(map.remove('city'), Result.Ok('Bla'))
    t.equal(map.remove('city'), Result.Error(MissingKey.new('city')))
    t.equal(map.keys.to_array, ['name', 'foo', 'bar'])
    t.equal(map.values.to_array, ['Alice', 'bar', 'baz'])
  })

  t.test('Map.iter', fn (t) {
    let map = Map.new

    map.set('name', 'Alice')
    map.set('city', 'Bla')

    let entries = map.iter

    t.equal(entries.next, Option.Some(('name', 'Alice')))
    t.equal(entries.next, Option.Some(('city', 'Bla')))
    t.equal(entries.next, Option.None)
  })

  t.test('Map.iter_mut', fn (t) {
    let map = Map.new

    map.set('name', ['Alice'])
    map.set('city', ['Bla'])

    let entries = map.iter_mut

    t.equal(entries.next, Option.Some(('name', mut ['Alice'])))
    t.equal(entries.next, Option.Some(('city', mut ['Bla'])))
    t.equal(entries.next, Option.None)
  })

  t.test('Map.into_iter', fn (t) {
    let map = Map.new

    map.set('name', 'Alice')
    map.set('city', 'Bla')

    let entries = map.into_iter

    t.equal(entries.next, Option.Some(('name', 'Alice')))
    t.equal(entries.next, Option.Some(('city', 'Bla')))
    t.equal(entries.next, Option.None)
  })

  t.test('Map.keys', fn (t) {
    let map = Map.new

    map.set('name', 'Alice')
    map.set('city', 'Bla')

    let keys = map.keys

    t.equal(keys.next, Option.Some('name'))
    t.equal(keys.next, Option.Some('city'))
    t.equal(keys.next, Option.None)
  })

  t.test('Map.values', fn (t) {
    let map = Map.new

    map.set('name', 'Alice')
    map.set('city', 'Bla')

    let values = map.values

    t.equal(values.next, Option.Some('Alice'))
    t.equal(values.next, Option.Some('Bla'))
    t.equal(values.next, Option.None)
  })

  t.test('Map.values_mut', fn (t) {
    let map = Map.new

    map.set('numbers', [10])

    let values = map.values_mut

    t.equal(values.next, Option.Some(mut [10]))
    t.equal(values.next, Option.None)
  })

  t.test('Map.get', fn (t) {
    let map = Map.new

    map.set('name', 'Alice')
    t.equal(map.get('name'), Result.Ok('Alice'))
    t.equal(map.get('city'), Result.Error(MissingKey.new('city')))
  })

  t.test('Map.opt_mut', fn (t) {
    let map = Map.new

    map.set('foo', (1, 0))
    t.equal(map.get_mut('foo'), Result.Ok(mut (1, 0)))
    t.equal(map.get_mut('bar'), Result.Error(MissingKey.new('bar')))
  })

  t.test('Map.merge', fn (t) {
    let map1 = Map.new
    let map2 = Map.new

    map1.set('name', 'Alice')
    map2.set('city', 'Bla')

    map1.merge(map2)

    t.equal(map1.get('name'), Result.Ok('Alice'))
    t.equal(map1.get('city'), Result.Ok('Bla'))
  })

  t.test('Map.size', fn (t) {
    let map = Map.new

    t.equal(map.size, 0)

    map.set('name', 'Alice')

    t.equal(map.size, 1)
  })

  t.test('Map.==', fn (t) {
    let map1 = Map.new
    let map2 = Map.new
    let map3 = Map.new
    let map4 = Map.new
    let map5 = Map.new
    let map6 = Map.new

    map1.set('name', 'Alice')
    map2.set('name', 'Alice')
    map4.set('foo', 'bar')

    map5.set('foo', 'bar')
    map5.set('bar', 'baz')

    map6.set('bar', 'baz')
    map6.set('foo', 'bar')

    t.equal(map1, map2)
    t.equal(map5, map6)
    t.not_equal(map1, map3)
    t.not_equal(map1, map4)
  })

  t.test('Map.set', fn (t) {
    let map = Map.new

    t.equal(map.set('name', 'Alice'), Option.None)
    t.equal(map.set('name', 'Bob'), Option.Some('Alice'))
  })

  t.test('Map.hash', fn (t) {
    let map1 = Map.new
    let map2 = Map.new
    let map3: Map[String, String] = Map.new

    map1.set('name', 'Alice')
    map2.set('name', 'Alice')

    t.equal(hash(map1), hash(map2))
    t.not_equal(hash(map1), hash(map3))
  })

  t.test('Map.contains?', fn (t) {
    let map1 = Map.new
    let map2: Map[String, String] = Map.new

    map1.set('name', 'Alice')

    t.true(map1.contains?('name'))
    t.false(map2.contains?('name'))
  })

  t.test('Map.fmt', fn (t) {
    let map1: Map[String, String] = Map.new
    let map2 = Map.new
    let map3 = Map.new

    map2.set('name', 'Alice')
    map3.set('name', 'Alice')
    map3.set('city', 'Bla')

    t.equal(fmt(map1), '{}')
    t.equal(fmt(map2), '{"name": "Alice"}')
    t.equal(fmt(map3), '{"name": "Alice", "city": "Bla"}')
  })

  t.test('Map.clone', fn (t) {
    let map1 = Map.new

    map1.set('numbers', [10, 20])

    let map2 = map1.clone

    t.equal(map1, map2)
  })

  t.test('Map.clear', fn (t) {
    let map = Map.new

    map.set('name', 'Alice')
    map.set('age', '42')
    map.clear
    t.equal(map.size, 0)
    t.equal(map.slots.size, DEFAULT_CAPACITY)
    t.equal(map.entries.size, 0)

    map.set('name', 'Bob')
    map.set('age', '50')
    t.equal(map.get('name'), Result.Ok('Bob'))
    t.equal(map.get('age'), Result.Ok('50'))
  })
}
