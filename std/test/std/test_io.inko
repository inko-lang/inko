import std.bytes (Bytes)
import std.drop (drop)
import std.fmt (fmt)
import std.io (
  Buffer, BufferedReader, BufferedWriter, Error, READ_BUFFER_SIZE, Read,
  ReadExactError, WRITE_BUFFER_SIZE, Write,
)
import std.libc
import std.test (Tests)

type Reader {
  let mut @index: Int
  let @bytes: ByteArray

  fn static new -> Reader {
    Reader(index: 0, bytes: ByteArray.from_array([1, 2, 3]))
  }

  fn static from_array(bytes: Array[Int]) -> Reader {
    Reader(index: 0, bytes: ByteArray.from_array(bytes))
  }
}

impl Read[Error] for Reader {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    let start = @index
    let mut max = @index + size

    if max > @bytes.size { max = @bytes.size }

    while @index < max {
      into.push(@bytes.get(@index).or_panic)
      @index += 1
    }

    Result.Ok(@index - start)
  }
}

type SingleByteReader {
  let mut @index: Int
  let @bytes: ByteArray

  fn static new -> SingleByteReader {
    SingleByteReader(index: 0, bytes: ByteArray.from_array([1, 2, 3]))
  }
}

impl Read[Error] for SingleByteReader {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    match @bytes.get(@index) {
      case Ok(v) -> {
        into.push(v)
        @index += 1
        Result.Ok(1)
      }
      case _ -> Result.Ok(0)
    }
  }
}

type ErrorReader {}

impl Read[Error] for ErrorReader {
  fn pub mut read(into: mut ByteArray, size: Int) -> Result[Int, Error] {
    Result.Error(Error.TimedOut)
  }
}

type Writer {
  let @buffer: ByteArray

  fn static new -> Writer {
    Writer(ByteArray.new)
  }
}

impl Write[Error] for Writer {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, Error] {
    @buffer.append(bytes)
    Result.Ok(nil)
  }

  fn pub mut flush -> Result[Nil, Error] {
    Result.Ok(nil)
  }
}

fn pub tests(t: mut Tests) {
  t.test('Error.from_os_error', fn (t) {
    t.equal(Error.from_os_error(libc.EPERM), Error.PermissionDenied)
    t.equal(Error.from_os_error(libc.ENOENT), Error.NotFound)
    t.equal(Error.from_os_error(libc.EINTR), Error.Interrupted)
    t.equal(Error.from_os_error(libc.EAGAIN), Error.WouldBlock)
    t.equal(Error.from_os_error(libc.ENOMEM), Error.OutOfMemory)
    t.equal(Error.from_os_error(libc.EACCES), Error.PermissionDenied)
    t.equal(Error.from_os_error(libc.EBUSY), Error.ResourceBusy)
    t.equal(Error.from_os_error(libc.EEXIST), Error.AlreadyExists)
    t.equal(Error.from_os_error(libc.ENOTDIR), Error.NotADirectory)
    t.equal(Error.from_os_error(libc.EISDIR), Error.IsADirectory)
    t.equal(Error.from_os_error(libc.EINVAL), Error.InvalidArgument)
    t.equal(Error.from_os_error(libc.EFBIG), Error.FileTooLarge)
    t.equal(Error.from_os_error(libc.ENOSPC), Error.StorageFull)
    t.equal(Error.from_os_error(libc.ESPIPE), Error.InvalidSeek)
    t.equal(Error.from_os_error(libc.EROFS), Error.ReadOnlyFilesystem)
    t.equal(Error.from_os_error(libc.EPIPE), Error.BrokenPipe)
    t.equal(Error.from_os_error(libc.EDEADLK), Error.Deadlock)
    t.equal(Error.from_os_error(libc.ENAMETOOLONG), Error.InvalidFileName)
    t.equal(Error.from_os_error(libc.ENOTEMPTY), Error.DirectoryNotEmpty)
    t.equal(Error.from_os_error(libc.ETIME), Error.TimedOut)
    t.equal(Error.from_os_error(libc.EADDRINUSE), Error.AddressInUse)
    t.equal(Error.from_os_error(libc.EADDRNOTAVAIL), Error.AddressUnavailable)
    t.equal(Error.from_os_error(libc.ENETDOWN), Error.NetworkDown)
    t.equal(Error.from_os_error(libc.ENETUNREACH), Error.NetworkDown)
    t.equal(Error.from_os_error(libc.ECONNABORTED), Error.ConnectionAborted)
    t.equal(Error.from_os_error(libc.ECONNRESET), Error.ConnectionReset)
    t.equal(Error.from_os_error(libc.EISCONN), Error.AlreadyConnected)
    t.equal(Error.from_os_error(libc.ENOTCONN), Error.NotConnected)
    t.equal(Error.from_os_error(libc.ETIMEDOUT), Error.TimedOut)
    t.equal(Error.from_os_error(libc.ECONNREFUSED), Error.ConnectionRefused)
    t.equal(Error.from_os_error(libc.EHOSTUNREACH), Error.HostUnreachable)
    t.equal(Error.from_os_error(libc.EINPROGRESS), Error.InProgress)
    t.equal(Error.from_os_error(999), Error.Other(999))
    t.equal(Error.from_os_error(libc.EXDEV), Error.CrossDeviceLink)
    t.equal(Error.from_os_error(libc.ENOTSUP), Error.NotSupported)
    t.equal(Error.from_os_error(libc.EOPNOTSUPP), Error.NotSupported)
    t.equal(Error.from_os_error(libc.EBADF), Error.InvalidFileDescriptor)
  })

  t.test('Error.fmt', fn (t) {
    t.equal(fmt(Error.AddressInUse), 'AddressInUse')
    t.equal(fmt(Error.AddressUnavailable), 'AddressUnavailable')
    t.equal(fmt(Error.AlreadyConnected), 'AlreadyConnected')
    t.equal(fmt(Error.AlreadyExists), 'AlreadyExists')
    t.equal(fmt(Error.BrokenPipe), 'BrokenPipe')
    t.equal(fmt(Error.ConnectionAborted), 'ConnectionAborted')
    t.equal(fmt(Error.ConnectionRefused), 'ConnectionRefused')
    t.equal(fmt(Error.ConnectionReset), 'ConnectionReset')
    t.equal(fmt(Error.Deadlock), 'Deadlock')
    t.equal(fmt(Error.DirectoryNotEmpty), 'DirectoryNotEmpty')
    t.equal(fmt(Error.FileTooLarge), 'FileTooLarge')
    t.equal(fmt(Error.HostUnreachable), 'HostUnreachable')
    t.equal(fmt(Error.InProgress), 'InProgress')
    t.equal(fmt(Error.Interrupted), 'Interrupted')
    t.equal(fmt(Error.InvalidArgument), 'InvalidArgument')
    t.equal(fmt(Error.InvalidFileName), 'InvalidFileName')
    t.equal(fmt(Error.InvalidSeek), 'InvalidSeek')
    t.equal(fmt(Error.IsADirectory), 'IsADirectory')
    t.equal(fmt(Error.NetworkDown), 'NetworkDown')
    t.equal(fmt(Error.NotADirectory), 'NotADirectory')
    t.equal(fmt(Error.NotConnected), 'NotConnected')
    t.equal(fmt(Error.NotFound), 'NotFound')
    t.equal(fmt(Error.OutOfMemory), 'OutOfMemory')
    t.equal(fmt(Error.PermissionDenied), 'PermissionDenied')
    t.equal(fmt(Error.ReadOnlyFilesystem), 'ReadOnlyFilesystem')
    t.equal(fmt(Error.ResourceBusy), 'ResourceBusy')
    t.equal(fmt(Error.StorageFull), 'StorageFull')
    t.equal(fmt(Error.TimedOut), 'TimedOut')
    t.equal(fmt(Error.WouldBlock), 'WouldBlock')
    t.equal(fmt(Error.Other(999)), 'Other(999)')
    t.equal(fmt(Error.CrossDeviceLink), 'CrossDeviceLink')
    t.equal(fmt(Error.NotSupported), 'NotSupported')
    t.equal(fmt(Error.InvalidFileDescriptor), 'InvalidFileDescriptor')
  })

  t.test('ReadExactError.fmt', fn (t) {
    t.equal(
      fmt(ReadExactError.EndOfInput as ReadExactError[Error]),
      'EndOfInput',
    )
    t.equal(fmt(ReadExactError.Read(Error.NotFound)), 'Read(NotFound)')
  })

  t.test('ReadExactError.==', fn (t) {
    t.equal(
      ReadExactError.EndOfInput as ReadExactError[Error],
      ReadExactError.EndOfInput,
    )
    t.equal(
      ReadExactError.Read(Error.NotFound),
      ReadExactError.Read(Error.NotFound),
    )
    t.not_equal(ReadExactError.EndOfInput, ReadExactError.Read(Error.NotFound))
    t.not_equal(
      ReadExactError.Read(Error.NotFound),
      ReadExactError.Read(Error.PermissionDenied),
    )
  })

  t.test('ReadExactError.to_string', fn (t) {
    t.true(
      (ReadExactError.EndOfInput as ReadExactError[Error]).to_string.size > 0,
    )
    t.equal(
      ReadExactError.Read(Error.NotFound).to_string,
      Error.NotFound.to_string,
    )
  })

  t.test('Read.read_all', fn (t) {
    let reader = Reader.new
    let bytes = ByteArray.new
    let size = reader.read_all(bytes).get

    t.equal(size, 3)
    t.equal(bytes, ByteArray.from_array([1, 2, 3]))
  })

  t.test('Read.read_exact', fn (t) {
    let reader = Reader.new
    let bytes = ByteArray.new

    t.equal(reader.read_exact(into: bytes, size: 3), Result.Ok(nil))
    t.equal(bytes, ByteArray.from_array([1, 2, 3]))

    t.equal(
      reader.read_exact(into: bytes, size: 3),
      Result.Error(ReadExactError.EndOfInput),
    )
    t.equal(bytes, ByteArray.from_array([1, 2, 3]))

    reader.index = 0
    t.equal(
      reader.read_exact(into: bytes, size: 6),
      Result.Error(ReadExactError.EndOfInput),
    )
  })

  t.test('Write.print', fn (t) {
    let writer = Writer.new

    writer.print('foo').get

    t.equal(writer.buffer, 'foo\n'.to_byte_array)
  })

  t.test('BufferedRead.read_until with inclusive: true', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: true),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0xA]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: true),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: true),
      Result.Ok(1),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA, 0x3]))
  })

  t.test('BufferedRead.read_until with inclusive: false', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: false),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: false),
      Result.Ok(2),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0x2]))

    t.equal(
      reader.read_until(byte: 0xA, into: bytes, inclusive: false),
      Result.Ok(1),
    )
    t.equal(bytes, ByteArray.from_array([0x1, 0x2, 0x3]))
  })

  t.test('BufferedRead.read_line with inclusive: true', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(reader.read_line(bytes, inclusive: true), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1, 0xA]))

    t.equal(reader.read_line(bytes, inclusive: true), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA]))

    t.equal(reader.read_line(bytes, inclusive: true), Result.Ok(1))
    t.equal(bytes, ByteArray.from_array([0x1, 0xA, 0x2, 0xA, 0x3]))
  })

  t.test('BufferedRead.read_line with inclusive: false', fn (t) {
    let reader = BufferedReader.new(
      Reader.from_array([0x1, 0xA, 0x2, 0xA, 0x3]),
    )
    let bytes = ByteArray.new

    t.equal(reader.read_line(bytes, inclusive: false), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1]))

    t.equal(reader.read_line(bytes, inclusive: false), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([0x1, 0x2]))

    t.equal(reader.read_line(bytes, inclusive: false), Result.Ok(1))
    t.equal(bytes, ByteArray.from_array([0x1, 0x2, 0x3]))
  })

  t.test('BufferedRead.read_line', fn (t) {
    let reader = BufferedReader.new(Reader.new)

    t.equal(reader.bytes.to_array, [Result.Ok(1), Result.Ok(2), Result.Ok(3)])
  })

  t.test('BufferedReader.new', fn (t) {
    let reader = BufferedReader.new(Reader.new)

    t.equal(reader.capacity, READ_BUFFER_SIZE)
  })

  t.test('BufferedReader.with_capacity', fn (t) {
    let reader = BufferedReader.with_capacity(Reader.new, size: 32)

    t.equal(reader.capacity, 32)
  })

  t.panic('BufferedReader.with_capacity with an invalid size', fn {
    BufferedReader.with_capacity(Reader.new, size: 0)
  })

  t.test('BufferedReader.fill_buffer', fn (t) {
    let reader = BufferedReader.with_capacity(Reader.new, size: 3)

    t.equal(reader.fill_buffer, Result.Ok(3))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))

    # This is to make sure fill_buffer() doesn't somehow mess up the buffer for
    # repeated calls without reading from the buffer.
    t.equal(reader.fill_buffer, Result.Ok(3))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))

    # This is to make sure that if the buffer is consumed, a call to
    # fill_buffer() resets it.
    let _ = reader.read_buffer(into: ByteArray.new, size: 3)
    let _ = reader.fill_buffer

    t.true(reader.buffer.empty?)
    t.equal(reader.offset, 0)
  })

  t.test('BufferedReader.fill_buffer with exact reads', fn (t) {
    let reader = BufferedReader.new(SingleByteReader.new)

    t.equal(reader.fill_buffer, Result.Ok(3))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))
  })

  t.test('BufferedReader.fill_buffer without exact reads', fn (t) {
    let reader = BufferedReader.new(SingleByteReader.new)

    reader.exact = false
    t.equal(reader.fill_buffer, Result.Ok(1))
    t.equal(reader.buffer, ByteArray.from_array([1]))
  })

  t.test('BufferedReader.read_buffer', fn (t) {
    let reader = BufferedReader.new(Reader.new)
    let bytes = ByteArray.new
    let _ = reader.fill_buffer

    t.equal(reader.read_buffer(into: bytes, size: 2), 2)
    t.equal(reader.offset, 2)
    t.equal(bytes, ByteArray.from_array([1, 2]))
  })

  t.test('BufferedReader.read_byte', fn (t) {
    let ok = BufferedReader.new(Reader.new)
    let err = BufferedReader.new(ErrorReader())

    t.equal(ok.read_byte, Result.Ok(Option.Some(1)))
    t.equal(ok.read_byte, Result.Ok(Option.Some(2)))
    t.equal(ok.read_byte, Result.Ok(Option.Some(3)))
    t.equal(ok.read_byte, Result.Ok(Option.None))
    t.equal(err.read_byte, Result.Error(Error.TimedOut))
  })

  t.test('BufferedReader.peek', fn (t) {
    let ok = BufferedReader.new(Reader.new)
    let err = BufferedReader.new(ErrorReader())

    t.equal(ok.peek, Result.Ok(Option.Some(1)))
    t.equal(ok.peek, Result.Ok(Option.Some(1)))
    t.equal(ok.read_byte, Result.Ok(Option.Some(1)))

    t.equal(ok.peek, Result.Ok(Option.Some(2)))
    t.equal(ok.peek, Result.Ok(Option.Some(2)))
    t.equal(ok.read_byte, Result.Ok(Option.Some(2)))

    t.equal(ok.peek, Result.Ok(Option.Some(3)))
    t.equal(ok.peek, Result.Ok(Option.Some(3)))
    t.equal(ok.read_byte, Result.Ok(Option.Some(3)))

    t.equal(ok.peek, Result.Ok(Option.None))
    t.equal(ok.peek, Result.Ok(Option.None))
    t.equal(ok.read_byte, Result.Ok(Option.None))

    t.equal(err.peek, Result.Error(Error.TimedOut))
  })

  t.test('BufferedReader.read with a small read size', fn (t) {
    let reader = BufferedReader.new(Reader.new)
    let bytes = ByteArray.new

    t.equal(reader.read(into: bytes, size: 2), Result.Ok(2))
    t.equal(bytes, ByteArray.from_array([1, 2]))
    t.equal(reader.buffer, ByteArray.from_array([1, 2, 3]))
    t.equal(reader.offset, 2)

    t.equal(reader.read(into: bytes, size: 2), Result.Ok(1))
    t.equal(bytes, ByteArray.from_array([1, 2, 3]))
    t.equal(reader.buffer, ByteArray.new)
    t.equal(reader.offset, 0)
  })

  t.test(
    'BufferedReader.read with a size larger than the buffer size',
    fn (t) {
      let reader = BufferedReader.with_capacity(Reader.new, size: 1)
      let bytes = ByteArray.new

      t.equal(reader.read(into: bytes, size: 1), Result.Ok(1))
      t.equal(reader.read(into: bytes, size: 10), Result.Ok(2))
      t.equal(bytes, ByteArray.from_array([1, 2, 3]))
    },
  )

  t.test('BufferedReader.inner', fn (t) {
    let buf = BufferedReader.with_capacity(Reader.new, size: 1)
    let bytes = ByteArray.new

    t.equal(buf.inner.read(into: bytes, size: 1), Result.Ok(1))
    t.equal(bytes, ByteArray.from_array([1]))
  })

  t.test('Buffer.read', fn (t) {
    let buffer = Buffer.new('hello')
    let bytes = ByteArray.new

    t.equal(buffer.read(into: bytes, size: 2), Result.Ok(2))
    t.equal(bytes.to_string, 'he')

    t.equal(buffer.read(into: bytes, size: 2), Result.Ok(2))
    t.equal(bytes.to_string, 'hell')

    t.equal(buffer.read(into: bytes, size: 2), Result.Ok(1))
    t.equal(bytes.to_string, 'hello')

    t.equal(buffer.read(into: bytes, size: 2), Result.Ok(0))
    t.equal(bytes.to_string, 'hello')
  })

  t.test('Buffer.fill_buffer', fn (t) {
    let buffer = Buffer.new('hello')

    t.equal(buffer.fill_buffer, Result.Ok(5))
    t.equal(buffer.read(into: ByteArray.new, size: 2), Result.Ok(2))
    t.equal(buffer.fill_buffer, Result.Ok(3))
  })

  t.test('Buffer.read_buffer', fn (t) {
    let buffer = Buffer.new('hello')
    let bytes = ByteArray.new
    let _ = buffer.fill_buffer

    t.equal(buffer.read_buffer(into: bytes, size: 5), 5)
    t.equal(bytes.to_string, 'hello')
  })

  t.test('Buffer.read_byte', fn (t) {
    let buffer = Buffer.new('abc')

    t.equal(buffer.read_byte, Result.Ok(Option.Some(97)))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(98)))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(99)))
    t.equal(buffer.read_byte, Result.Ok(Option.None))
  })

  t.test('Buffer.peek', fn (t) {
    let buffer = Buffer.new('abc')

    t.equal(buffer.peek, Result.Ok(Option.Some(97)))
    t.equal(buffer.peek, Result.Ok(Option.Some(97)))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(97)))

    t.equal(buffer.peek, Result.Ok(Option.Some(98)))
    t.equal(buffer.peek, Result.Ok(Option.Some(98)))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(98)))

    t.equal(buffer.peek, Result.Ok(Option.Some(99)))
    t.equal(buffer.peek, Result.Ok(Option.Some(99)))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(99)))

    t.equal(buffer.peek, Result.Ok(Option.None))
    t.equal(buffer.peek, Result.Ok(Option.None))
    t.equal(buffer.read_byte, Result.Ok(Option.None))
  })

  t.test('Buffer.seek', fn (t) {
    let buffer = Buffer.new('abc')

    t.equal(buffer.read_byte, Result.Ok(Option.Some(97)))

    t.equal(buffer.seek(0), Result.Ok(0))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(97)))

    t.equal(buffer.seek(10), Result.Ok(10))
    t.equal(buffer.read_byte, Result.Ok(Option.None))

    t.equal(buffer.seek(-1), Result.Ok(2))
    t.equal(buffer.read_byte, Result.Ok(Option.Some(99)))
    t.equal(buffer.read_byte, Result.Ok(Option.None))
  })

  t.test('Buffer.fmt', fn (t) {
    let buf = Buffer.new('foo')

    t.equal(fmt(buf), 'Buffer(bytes: "foo", offset: 0)')
  })

  t.test('BufferedWriter.new', fn (t) {
    let writer = BufferedWriter.new(Writer.new)

    t.equal(writer.size, WRITE_BUFFER_SIZE)
  })

  t.test('BufferedWriter.with_capacity', fn (t) {
    let writer = BufferedWriter.with_capacity(Writer.new, size: 4)

    t.equal(writer.size, 4)
  })

  t.panic('BufferedWriter.with_capacity with a size of zero', fn {
    BufferedWriter.with_capacity(Writer.new, size: 0)
  })

  t.panic('BufferedWriter.with_capacity with a negative size ', fn {
    BufferedWriter.with_capacity(Writer.new, size: -4)
  })

  t.test('BufferedWriter.write', fn (t) {
    let writer = BufferedWriter.with_capacity(Writer.new, size: 8)

    t.equal(writer.write('abcd'.to_byte_array), Result.Ok(nil))
    t.equal(writer.buffer, 'abcd'.to_byte_array)
    t.equal(writer.inner.buffer, ByteArray.new)

    t.equal(writer.write('efgh'.to_byte_array), Result.Ok(nil))
    t.equal(writer.buffer, 'abcdefgh'.to_byte_array)
    t.equal(writer.inner.buffer, ByteArray.new)

    t.equal(writer.write('i'.to_byte_array), Result.Ok(nil))
    t.equal(writer.buffer, 'i'.to_byte_array)
    t.equal(writer.inner.buffer, 'abcdefgh'.to_byte_array)

    t.equal(writer.write('123456789'.to_byte_array), Result.Ok(nil))
    t.equal(writer.buffer, ByteArray.new)
    t.equal(writer.inner.buffer, 'abcdefghi123456789'.to_byte_array)

    writer.inner.buffer.clear
    t.equal(writer.write('abcdefg'.to_byte_array), Result.Ok(nil))
    t.equal(writer.buffer, 'abcdefg'.to_byte_array)
    t.equal(writer.inner.buffer, ByteArray.new)

    t.equal(writer.write('hi'.to_byte_array), Result.Ok(nil))
    t.equal(writer.buffer, 'i'.to_byte_array)
    t.equal(writer.inner.buffer, 'abcdefgh'.to_byte_array)
  })

  t.test('BufferedWriter.flush', fn (t) {
    let writer = BufferedWriter.with_capacity(Writer.new, size: 8)

    t.equal(writer.write('abcd'), Result.Ok(nil))
    t.equal(writer.buffer, 'abcd'.to_byte_array)
    t.equal(writer.flush, Result.Ok(nil))
    t.equal(writer.buffer, ByteArray.new)
    t.equal(writer.inner.buffer, 'abcd'.to_byte_array)
  })

  t.test('BufferedWriter.inner', fn (t) {
    let writer = BufferedWriter.with_capacity(Writer.new, size: 8)

    t.equal(writer.inner.write('abcd'), Result.Ok(nil))
    t.equal(writer.buffer, ByteArray.new)
    t.equal(writer.inner.buffer, 'abcd'.to_byte_array)
  })

  t.test('BufferedWriter.drop', fn (t) {
    let raw = Writer.new
    let writer = BufferedWriter.with_capacity(mut raw, size: 8)

    t.equal(writer.write('abcd'), Result.Ok(nil))
    drop(writer)
    t.equal(raw.buffer, 'abcd'.to_byte_array)
  })
}
