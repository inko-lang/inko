import helpers (debug?, hash)
import std.cmp (Ordering)
import std.fmt (fmt)
import std.int (Format, MAX, MIN)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('Int.parse with binary numbers', fn (t) {
    t.equal(Int.parse('1', Format.Binary), Option.Some(1))
    t.equal(Int.parse('11', Format.Binary), Option.Some(3))
    t.equal(Int.parse('1010', Format.Binary), Option.Some(10))
    t.equal(Int.parse('+11', Format.Binary), Option.Some(3))
    t.equal(Int.parse('-11', Format.Binary), Option.Some(-3))
    t.equal(Int.parse('1111111111111111', Format.Binary), Option.Some(65_535))
    t.equal(
      Int.parse(
        '111111111111111111111111111111111111111111111111111111111111111',
        Format.Binary,
      ),
      Option.Some(9_223_372_036_854_775_807),
    )

    t.equal(
      Int.parse(
        '-1000000000000000000000000000000000000000000000000000000000000000',
        Format.Binary,
      ),
      Option.Some(-9_223_372_036_854_775_808),
    )

    t.equal(Int.parse('ef', Format.Binary), Option.None)
    t.equal(Int.parse(' 11', Format.Binary), Option.None)
    t.equal(Int.parse('11 ', Format.Binary), Option.None)
    t.equal(Int.parse('1'.repeat(times: 70), Format.Binary), Option.None)
    t.equal(Int.parse('', Format.Binary), Option.None)
    t.equal(Int.parse('1_1', Format.Binary), Option.None)
  })

  t.test('Int.parse with decimal numbers', fn (t) {
    t.equal(Int.parse('42', Format.Decimal), Option.Some(42))
    t.equal(Int.parse('11', Format.Decimal), Option.Some(11))
    t.equal(Int.parse('+11', Format.Decimal), Option.Some(11))
    t.equal(Int.parse('-11', Format.Decimal), Option.Some(-11))
    t.equal(
      Int.parse('123456789123456789', Format.Decimal),
      Option.Some(123_456_789_123_456_789),
    )

    t.equal(
      Int.parse('-9223372036854775808', Format.Decimal),
      Option.Some(-9_223_372_036_854_775_808),
    )

    t.equal(
      Int.parse('9223372036854775807', Format.Decimal),
      Option.Some(9_223_372_036_854_775_807),
    )

    t.equal(Int.parse(' 11', Format.Decimal), Option.None)
    t.equal(Int.parse('11 ', Format.Decimal), Option.None)
    t.equal(Int.parse('f', Format.Decimal), Option.None)
    t.equal(Int.parse('1'.repeat(times: 100), Format.Decimal), Option.None)
    t.equal(Int.parse('', Format.Decimal), Option.None)
    t.equal(Int.parse('1_1', Format.Decimal), Option.None)
    t.equal(Int.parse('+', Format.Decimal), Option.None)
    t.equal(Int.parse('-', Format.Decimal), Option.None)
  })

  t.test('Int.parse with hexadecimal numbers', fn (t) {
    t.equal(Int.parse('42', Format.Hex), Option.Some(66))
    t.equal(Int.parse('11', Format.Hex), Option.Some(17))
    t.equal(Int.parse('ef', Format.Hex), Option.Some(239))
    t.equal(Int.parse('0xef', Format.Hex), Option.Some(239))
    t.equal(Int.parse('-0xef', Format.Hex), Option.Some(-239))
    t.equal(Int.parse('+ef', Format.Hex), Option.Some(239))
    t.equal(Int.parse('-ef', Format.Hex), Option.Some(-239))
    t.equal(Int.parse(' 11', Format.Hex), Option.None)
    t.equal(Int.parse('11 ', Format.Hex), Option.None)
    t.equal(Int.parse('zz', Format.Hex), Option.None)
    t.equal(
      Int.parse('-0x4a3f043013b2c4d1', Format.Hex),
      Option.Some(-5349999486874862801),
    )

    t.equal(Int.parse('0x', Format.Hex), Option.None)
    t.equal(Int.parse('f'.repeat(times: 100), Format.Hex), Option.None)
    t.equal(Int.parse('', Format.Hex), Option.None)
    t.equal(Int.parse('f_f', Format.Hex), Option.None)
  })

  t.test('Int.format when formatting as binary', fn (t) {
    t.equal(0.format(Format.Binary), '0')
    t.equal(123.format(Format.Binary), '1111011')
    t.equal(-123.format(Format.Binary), '-1111011')
    t.equal(
      -9223372036854775808.format(Format.Binary),
      '-1000000000000000000000000000000000000000000000000000000000000000',
    )
  })

  t.test('Int.format when formatting as decimal', fn (t) {
    t.equal(42.format(Format.Decimal), '42')
    t.equal(-42.format(Format.Decimal), '-42')
    t.equal(-9223372036854775808.format(Format.Decimal), '-9223372036854775808')
  })

  t.test('Int.format when formatting as hexadecimal', fn (t) {
    t.equal(0.format(Format.Hex), '0')
    t.equal(123.format(Format.Hex), '7b')
    t.equal(-123.format(Format.Hex), '-7b')
    t.equal(-9223372036854775808.format(Format.Hex), '-8000000000000000')
  })

  t.test('Int.to_string', fn (t) {
    t.equal(42.to_string, '42')
    t.equal(-42.to_string, '-42')
    t.equal(-9223372036854775808.to_string, '-9223372036854775808')
  })

  t.test('Int.times', fn (t) {
    let vals = []

    3.times(fn (v) { vals.push(v) })

    t.equal(vals, [0, 1, 2])
  })

  t.test('Int.absolute', fn (t) {
    t.equal(0.absolute, 0)
    t.equal(1.absolute, 1)
    t.equal(-1.absolute, 1)
    t.equal(-9223372036854775807.absolute, 9223372036854775807)
    t.equal(-9_223_372_036_854_775_808.absolute, -9_223_372_036_854_775_808)
  })

  t.test('Int.opposite', fn (t) {
    t.equal(42.opposite, -42)
    t.equal(-42.opposite, 42)
    t.equal(0.opposite, 0)
    t.equal(-9223372036854775807.opposite, 9223372036854775807)
    t.equal(9223372036854775807.opposite, -9223372036854775807)
  })

  t.test('Int.until', fn (t) {
    let range = 0.until(4)

    t.true(range.contains?(0))
    t.true(range.contains?(1))
    t.true(range.contains?(2))
    t.true(range.contains?(3))
    t.false(range.contains?(4))
  })

  t.test('Int.to', fn (t) {
    let range = 0.to(4)

    t.true(range.contains?(0))
    t.true(range.contains?(1))
    t.true(range.contains?(2))
    t.true(range.contains?(3))
    t.true(range.contains?(4))
    t.false(range.contains?(5))
  })

  t.test('Int.digits', fn (t) {
    t.equal(0.digits, 1)
    t.equal(1.digits, 1)
    t.equal(11.digits, 2)
    t.equal(111.digits, 3)
    t.equal(1111.digits, 4)
    t.equal(-0.digits, 1)
    t.equal(-1.digits, 1)
    t.equal(-11.digits, 2)
    t.equal(-111.digits, 3)
  })

  t.test('Int.to_int', fn (t) {
    t.equal(42.to_int, 42)
    t.equal(-42.to_int, -42)
  })

  t.test('Int.to_float', fn (t) {
    t.equal(42.to_float, 42.0)
    t.equal(-42.to_float, -42.0)
  })

  t.test('Int.cmp', fn (t) {
    t.equal(0.cmp(0), Ordering.Equal)
    t.equal(0.cmp(1), Ordering.Less)
    t.equal(2.cmp(1), Ordering.Greater)
  })

  t.test('Int.<', fn (t) {
    t.true(0 < 1)
    t.false(1 < 0)
  })

  t.test('Int.<=', fn (t) {
    t.true(0 <= 1)
    t.true(0 <= 0)
    t.false(1 <= 0)
  })

  t.test('Int.>', fn (t) {
    t.true(1 > 0)
    t.false(0 > 1)
  })

  t.test('Int.>=', fn (t) {
    t.true(1 >= 0)
    t.true(0 >= 0)
    t.false(0 >= 1)
  })

  t.test('Int.==', fn (t) {
    t.equal(1, 1)
    t.not_equal(1, 0)
  })

  t.test('Int.clone', fn (t) { t.equal(42.clone, 42) })

  t.test('Int.+', fn (t) {
    t.equal(1 + 1, 2)
    t.equal(-1 + 1, 0)
  })

  t.test('Int.-', fn (t) {
    t.equal(1 - 1, 0)
    t.equal(0 - 1, -1)
  })

  t.test('Int./', fn (t) {
    t.equal(10 / 2, 5)
    t.equal(10 / -2, -5)
    t.equal(-10 / 2, -5)
    t.equal(MIN / 1, MIN)
  })

  t.panic('Int./ when dividing by zero', fn { 10 / 0 })

  t.panic('Int./ when dividing MIN by -1', fn { MIN / -1 })

  t.test('Int.*', fn (t) {
    t.equal(5 * 2, 10)
    t.equal(-5 * 2, -10)
  })

  t.test('Int.%', fn (t) {
    t.equal(1 % 2, 1)
    t.equal(2 % 2, 0)
    t.equal(-1 % 2, 1)
    t.equal(-2 % 2, 0)
  })

  t.panic('Int.% when dividing by zero', fn { 10 % 0 })

  t.panic('Int.% when dividing MIN by -1', fn { MIN % -1 })

  if debug? {
    t.panic('Int.- with an overflow', fn { MIN - 1 })
    t.panic('Int.+ with an overflow', fn { MAX + 1 })
    t.panic('Int.* with an overflow', fn { MAX * 2 })
    t.panic('Int.% with an overflow', fn {
      9_223_372_036_854_775_806 % 9_223_372_036_854_775_807
    })
    t.panic('Int.<< with an overflow', fn { 1 << 64 })
    t.panic('Int.>> with an overflow', fn { 1 >> 64 })
    t.panic('Int.>>> with an overflow', fn { 1 >>> 64 })
    t.panic('Int.** with an overflow', fn { MAX ** 2 })
  } else {
    t.test('Int.- with an overflow', fn (t) { t.equal(MIN - 1, MAX) })
    t.test('Int.+ with an overflow', fn (t) { t.equal(MAX + 1, MIN) })
    t.test('Int.* with an overflow', fn (t) { t.equal(MAX * 2, -2) })
    t.test('Int.% with an overflow', fn (t) {
      t.equal(9_223_372_036_854_775_806 % 9_223_372_036_854_775_807, -3)
    })
    t.test('Int.<< with an overflow', fn (t) { t.equal(1 << 64, 1) })
    t.test('Int.>> with an overflow', fn (t) { t.equal(1 >> 64, 1) })
    t.test('Int.>>> with an overflow', fn (t) { t.equal(1 >>> 64, 1) })
    t.test('Int.** with an overflow', fn (t) { t.equal(MAX ** 2, 1) })
  }

  t.test('Int.&', fn (t) {
    t.equal(1 & 2, 0)
    t.equal(2 & 2, 2)
    t.equal(-2 & 2, 2)
  })

  t.test('Int.|', fn (t) {
    t.equal(1 | 2, 3)
    t.equal(-1 | 2, -1)
  })

  t.test('Int.^', fn (t) {
    t.equal(1 ^ 2, 3)
    t.equal(-1 ^ 2, -3)
  })

  t.test('Int.<<', fn (t) {
    t.equal(1 << 16, 65_536)
    t.equal(1 << 8, 256)
    t.equal(-1 << 8, -256)
  })

  t.test('Int.>>', fn (t) {
    t.equal(1 >> 16, 0)
    t.equal(65_536 >> 16, 1)
    t.equal(-123 >> 3, -16)
  })

  t.test('Int.>>>', fn (t) {
    t.equal(1 >>> 16, 0)
    t.equal(65_536 >>> 16, 1)
    t.equal(-123 >>> 3, 2305843009213693936)
  })

  t.test('Int.**', fn (t) {
    t.equal(2 ** 2, 4)
    t.equal(2 ** 8, 256)
  })

  t.test('Int.hash', fn (t) { t.equal(hash(42), hash(42)) })

  t.test('Int.fmt', fn (t) {
    t.equal(fmt(42), '42')
    t.equal(fmt(-42), '-42')
  })

  t.test('Int.nearest_power_of_two', fn (t) {
    t.equal(-4.nearest_power_of_two, 0)
    t.equal(-1.nearest_power_of_two, 0)
    t.equal(0.nearest_power_of_two, 0)
    t.equal(1.nearest_power_of_two, 1)
    t.equal(2.nearest_power_of_two, 2)
    t.equal(3.nearest_power_of_two, 4)
    t.equal(9.nearest_power_of_two, 16)
  })

  t.test('Int.not', fn (t) {
    t.equal(0.not, -1)
    t.equal(12.not, -13)
    t.equal(-13.not, 12)
    t.equal(MAX.not, MIN)
    t.equal(MIN.not, MAX)
  })

  t.test('Int.rotate_left', fn (t) {
    t.equal(0xAA00000000006E1.rotate_left(12), 0x6E10AA)
  })

  t.test('Int.rotate_right', fn (t) {
    t.equal(0x6E10AA.rotate_right(12), 0xAA00000000006E1)
  })

  t.test('Int.wrapping_add', fn (t) {
    t.equal(MAX.wrapping_add(1), MIN)
    t.equal(0.wrapping_add(1), 1)
  })

  t.test('Int.wrapping_sub', fn (t) {
    t.equal(MIN.wrapping_sub(1), MAX)
    t.equal(1.wrapping_sub(1), 0)
  })

  t.test('Int.wrapping_mul', fn (t) {
    t.equal(MAX.wrapping_mul(2), -2)
    t.equal(1.wrapping_mul(2), 2)
  })

  t.test('Int.checked_add', fn (t) {
    t.equal(0.checked_add(5), Option.Some(5))
    t.equal(MAX.checked_add(1), Option.None)
  })

  t.test('Int.checked_sub', fn (t) {
    t.equal(0.checked_sub(5), Option.Some(-5))
    t.equal(MIN.checked_sub(1), Option.None)
  })

  t.test('Int.checked_mul', fn (t) {
    t.equal(5.checked_mul(2), Option.Some(10))
    t.equal(MAX.checked_mul(2), Option.None)
  })

  t.test('Int.checked_div', fn (t) {
    t.equal(10.checked_div(2), Option.Some(5))
    t.equal(10.checked_div(0), Option.None)
    t.equal(MIN.checked_div(-1), Option.None)
  })

  t.test('Int.checked_pow', fn (t) {
    t.equal(2.checked_pow(2), Option.Some(4))
    t.equal(MAX.checked_pow(2), Option.None)
  })

  t.test('Int.sum', fn (t) { t.equal(Int.sum([10, 20, 30].into_iter), 60) })

  t.test('Int.swap_bytes', fn (t) {
    t.equal(12345.swap_bytes, 4120793659044003840)
    t.equal(4120793659044003840.swap_bytes, 12345)
  })

  t.test('Int.leading_zeros', fn (t) {
    t.equal(0.leading_zeros, 64)
    t.equal(1000.leading_zeros, 54)
    t.equal(MIN.leading_zeros, 0)
    t.equal(MAX.leading_zeros, 1)
  })

  t.test('Int.trailing_zeros', fn (t) {
    t.equal(0.trailing_zeros, 64)
    t.equal(1000.trailing_zeros, 3)
    t.equal(MIN.trailing_zeros, 63)
    t.equal(MAX.trailing_zeros, 0)
  })

  t.test('Int.leading_ones', fn (t) {
    t.equal(0.leading_ones, 0)
    t.equal(-1.leading_ones, 64)
    t.equal(-2.leading_ones, 63)
  })

  t.test('Int.trailing_ones', fn (t) {
    t.equal(1.trailing_ones, 1)
    t.equal(2.trailing_ones, 0)
    t.equal(11.trailing_ones, 2)
  })
}
