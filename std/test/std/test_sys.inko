import helpers (compiler_path)
import std.env
import std.stdio (Stdout)
import std.sys (self, Command, ExitStatus, Stream)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('sys.cpu_cores', fn (t) { t.true(sys.cpu_cores > 0) })

  t.fork(
    'sys.cpu_cores in a child process',
    child: fn { Stdout.new.write(sys.cpu_cores.to_string) },
    test: fn (t, p) { t.equal(p.spawn.stdout, sys.cpu_cores.to_string) },
  )

  t.fork(
    'sys.exit',
    child: fn { sys.exit(4) },
    test: fn (test, process) { test.equal(process.spawn.status.to_int, 4) },
  )

  t.test('Stream.to_int', fn (t) {
    t.equal(Stream.Null.to_int, 0)
    t.equal(Stream.Inherit.to_int, 1)
    t.equal(Stream.Piped.to_int, 2)
  })

  t.test('Command.program', fn (t) { t.equal(Command.new('ls').program, 'ls') })

  t.ok('Command.directory', fn (t) {
    let cmd = Command.new('ls')

    t.equal(cmd.directory, Option.None)
    cmd.directory = 'fixtures'.to_path
    t.equal(cmd.directory, Option.Some('fixtures'.to_path))

    # Make sure the command _actually_ uses the directory.
    cmd.stdin = Stream.Null
    cmd.stdout = Stream.Piped
    cmd.stderr = Stream.Null

    let child = try cmd.spawn
    let bytes = ByteArray.new

    try child.stdout.as_mut.get.read_all(bytes)

    t.true(bytes.into_string.contains?('hello.txt'))
    try child.wait
    Result.Ok(nil)
  })

  t.test('Command.arguments', fn (t) {
    let cmd = Command.new('ls')

    t.equal(cmd.arguments, [])
    cmd.arguments.push('foo')
    t.equal(cmd.arguments, ['foo'])
  })

  t.test('Command.variables', fn (t) {
    let cmd = Command.new('ls')

    t.equal(cmd.variables, env.variables)

    cmd.variables.set('TEST', 'foo')
    t.equal(cmd.variables.get('TEST'), Result.Ok('foo'))
  })

  t.ok('Command.spawn with a valid command', fn (t) {
    let cmd = Command.new(compiler_path)

    cmd.stdin = Stream.Null
    cmd.stderr = Stream.Null
    cmd.stdout = Stream.Piped
    cmd.arguments.push('--help')

    let child = try cmd.spawn

    try child.wait

    let bytes = ByteArray.new

    try child.stdout.as_mut.get.read_all(bytes)
    t.true(bytes.into_string.contains?('Usage: inko'))
    Result.Ok(nil)
  })

  t.test('Command.spawn with an invalid command', fn (t) {
    t.true(Command.new('inko-test-invalid').spawn.error?)
  })

  t.test('ExitStatus.to_int', fn (t) { t.equal(ExitStatus.new(42).to_int, 42) })

  t.test('ExitStatus.success?', fn (t) {
    t.true(ExitStatus.new(0).success?)
    t.false(ExitStatus.new(4).success?)
  })
}
