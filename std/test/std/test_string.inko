import helpers (hash)
import std.alloc
import std.array (OutOfBounds)
import std.cmp (Ordering)
import std.fmt (fmt)
import std.fs.path (Path)
import std.ptr
import std.string (PrimitiveString, StringBuffer)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('String.from_primitive', fn (t) {
    let raw = alloc.allocate(3)

    alloc.write(byte: 102, to: raw, size: 1)
    alloc.write(byte: 111, to: ptr.add(raw, 1), size: 1)
    alloc.write(byte: 111, to: ptr.add(raw, 2), size: 1)

    let str1 = String.from_primitive(PrimitiveString(bytes: raw, size: 3))
    let str2 = String.from_primitive(
      PrimitiveString(bytes: 0x1 as Pointer[UInt8], size: 0),
    )

    t.equal(str1, 'foo')
    t.equal(str1.size, 3)
    t.equal(ptr.add(str1.ptr, 3).0 as Int, 0)
    t.not_equal(str1.ptr as Int, raw as Int)

    t.equal(str2, '')
    t.equal(str2.size, 0)
  })

  t.test('String.from_borrowed_primitive', fn (t) {
    let a = 'foo'
    let b = String.from_borrowed_primitive(a.to_primitive)
    let c = String.from_borrowed_primitive(''.to_primitive)

    t.equal(a, 'foo')
    t.equal(a.size, 3)
    t.equal(b, 'foo')
    t.equal(b.size, 3)
    t.not_equal(b.ptr as Int, a.ptr as Int)
    t.equal(c, '')
    t.equal(c.size, 0)
  })

  t.test('String.from_pointer', fn (t) {
    let a = 'hello'
    let b = String.from_pointer(a.pointer)

    t.equal(a, b)
  })

  t.test('String.from_pointer with a NULL pointer', fn (t) {
    let a = String.from_pointer(0 as Pointer[UInt8])

    t.equal(a, '')
  })

  t.test('String.join', fn (t) {
    let vals = [10, 20, 30]

    t.equal(String.join(vals.iter, with: ', '), '10, 20, 30')
  })

  t.test('String.to_upper', fn (t) {
    t.equal('hello'.to_upper, 'HELLO')
    t.equal('ä'.to_upper, 'Ä')
    t.equal('aä'.to_upper, 'AÄ')
  })

  t.test('String.to_lower', fn (t) {
    t.equal('HELLO'.to_lower, 'hello')
    t.equal('Ä'.to_lower, 'ä')
    t.equal('AÄ'.to_lower, 'aä')
  })

  t.test('String.size', fn (t) {
    t.equal('foo'.size, 3)
    t.equal('Ä'.size, 2)
    t.equal('AÄ'.size, 3)
  })

  t.test('String.get', fn (t) {
    t.equal('foo'.get(0), Result.Ok(102))
    t.equal('foo'.get(10), Result.Error(OutOfBounds.new(index: 10, size: 3)))
  })

  t.test('String.substring', fn (t) {
    t.equal('hello_world'.substring(start: 0, end: 5), 'hello')
    t.equal('hello_world'.substring(start: -1, end: 5), 'hello')
    t.equal('hello_world'.substring(start: 3, end: 8), 'lo_wo')
    t.equal('hello_world'.substring(start: 0, end: 20), 'hello_world')
    t.equal('🇳🇱'.substring(start: 0, end: 1), '🇳🇱')

    t.equal('hello_world'.substring(start: 11, end: 13), '')
    t.equal('hello_world'.substring(start: 12, end: 13), '')
    t.equal('hello_world'.substring(start: 0, end: 0), '')
    t.equal('hello_world'.substring(start: 0, end: -1), '')
    t.equal('hello_world'.substring(start: 5, end: 0), '')
  })

  t.test('String.slice', fn (t) {
    t.equal('hello_world'.slice(start: 0, end: 5).to_string, 'hello')
    t.equal(
      '→foo'.slice(start: 0, end: 2).to_byte_array,
      ByteArray.from_array([226, 134]),
    )
    t.equal('→foo'.slice(start: 0, end: 6).to_string, '→foo')
    t.equal('→foo'.slice(start: 0, end: 3).to_string, '→')
  })

  t.panic('String.slice with an out of bounds start index', fn {
    'foo'.slice(start: 42, end: 50)
  })

  t.panic('String.slice with an out of bounds end index', fn {
    'hello_world'.slice(start: 0, end: 20)
  })

  t.test('String.byte_index', fn (t) {
    t.equal('hello'.byte_index(of: 'h', starting_at: 0), Option.Some(0))
    t.equal('hello'.byte_index(of: 'e', starting_at: 0), Option.Some(1))
    t.equal('hello'.byte_index(of: 'l', starting_at: 0), Option.Some(2))
    t.equal('hello'.byte_index(of: 'l', starting_at: 0), Option.Some(2))
    t.equal('😀x'.byte_index(of: 'x', starting_at: 0), Option.Some(4))
    t.equal('hello'.byte_index(of: '', starting_at: 0), Option.None)
    t.equal('hello'.byte_index(of: 'x', starting_at: 0), Option.None)
    t.equal(''.byte_index(of: 'x', starting_at: 0), Option.None)
    t.equal(''.byte_index(of: '', starting_at: 0), Option.None)
    t.equal('hello'.byte_index(of: 'l', starting_at: 2), Option.Some(2))
    t.equal('hello'.byte_index(of: 'l', starting_at: 3), Option.Some(3))
    t.equal('hello'.byte_index(of: 'h', starting_at: 1), Option.None)
  })

  t.test('String.starts_with?', fn (t) {
    t.true('hello'.starts_with?('hello'))
    t.true('😀foo'.starts_with?('😀'))
    t.true('foo😀'.starts_with?('foo'))

    t.false(''.starts_with?('x'))
    t.false(''.starts_with?(''))
    t.false('hello'.starts_with?(''))
    t.false('hello'.starts_with?('x'))
    t.false('😀foo'.starts_with?('foo'))
  })

  t.test('String.ends_with?', fn (t) {
    t.true('hello_world'.ends_with?('world'))
    t.true('hello_world'.ends_with?('d'))
    t.true('foo😀'.ends_with?('😀'))

    t.false('hello_world'.ends_with?(''))
    t.false('hello_world'.ends_with?('this is a long string'))
    t.false('hello_world'.ends_with?('x'))
    t.false(''.ends_with?('x'))
    t.false(''.ends_with?(''))
  })

  t.test('String.bytes', fn (t) {
    t.equal(''.bytes.to_array, [])
    t.equal('inko'.bytes.to_array, [105, 110, 107, 111])
  })

  t.test('String.split', fn (t) {
    t.equal('foo/bar/baz'.split('/').to_array, ['foo', 'bar', 'baz'])
    t.equal('foo::bar::baz'.split('::').to_array, ['foo', 'bar', 'baz'])
    t.equal('foo'.split('/').to_array, ['foo'])
    t.equal('foo→bar→baz'.split('→').to_array, ['foo', 'bar', 'baz'])
    t.equal('foo→bar→baz'.split('bar').to_array, ['foo→', '→baz'])
    t.equal('foo//bar/baz'.split('/').to_array, ['foo', '', 'bar', 'baz'])
    t.equal('foo/bar/baz'.split('').to_array, ['foo/bar/baz'])
    t.equal('foo/bar'.split('///////////////').to_array, ['foo/bar'])
    t.equal('foo/'.split('/').to_array, ['foo'])
    t.equal('foo//'.split('/').to_array, ['foo', ''])
    t.equal('foo///'.split('/').to_array, ['foo', '', ''])
    t.equal('foo//'.split('//').to_array, ['foo'])
    t.equal('foo///'.split('//').to_array, ['foo', '/'])
    t.equal(''.split('/').to_array, [])
  })

  t.test('String.empty?', fn (t) {
    t.true(''.empty?)
    t.false('foo'.empty?)
    t.false('😀'.empty?)
  })

  t.test('String.pad_start', fn (t) {
    t.equal('foo'.pad_start(with: '', chars: 3), 'foo')
    t.equal('foo'.pad_start(with: '', chars: 4), 'foo')
    t.equal('foo'.pad_start(with: '', chars: 5), 'foo')
    t.equal('foo'.pad_start(with: ' ', chars: 3), 'foo')
    t.equal('foo'.pad_start(with: ' ', chars: 4), ' foo')
    t.equal('foo'.pad_start(with: ' ', chars: 5), '  foo')
    t.equal('foo'.pad_start(with: 'ab', chars: 3), 'foo')
    t.equal('foo'.pad_start(with: 'ab', chars: 4), 'afoo')
    t.equal('foo'.pad_start(with: 'ab', chars: 5), 'abfoo')
    t.equal('foo'.pad_start(with: 'ab', chars: 6), 'abafoo')
    t.equal('foo'.pad_start(with: 'ab', chars: 7), 'ababfoo')
  })

  t.test('String.pad_end', fn (t) {
    t.equal('foo'.pad_end(with: '', chars: 3), 'foo')
    t.equal('foo'.pad_end(with: '', chars: 4), 'foo')
    t.equal('foo'.pad_end(with: '', chars: 5), 'foo')
    t.equal('foo'.pad_end(with: ' ', chars: 3), 'foo')
    t.equal('foo'.pad_end(with: ' ', chars: 4), 'foo ')
    t.equal('foo'.pad_end(with: ' ', chars: 5), 'foo  ')
    t.equal('foo'.pad_end(with: 'ab', chars: 3), 'foo')
    t.equal('foo'.pad_end(with: 'ab', chars: 4), 'fooa')
    t.equal('foo'.pad_end(with: 'ab', chars: 5), 'fooab')
    t.equal('foo'.pad_end(with: 'ab', chars: 6), 'fooaba')
    t.equal('foo'.pad_end(with: 'ab', chars: 7), 'fooabab')
  })

  t.test('String.repeat', fn (t) {
    t.equal('foo'.repeat(0), '')
    t.equal('foo'.repeat(1), 'foo')
    t.equal('foo'.repeat(2), 'foofoo')
  })

  t.test('String.chars', fn (t) {
    t.equal('foo'.chars.to_array, ['f', 'o', 'o'])
    t.equal('fóó'.chars.to_array, ['f', 'ó', 'ó'])
    t.equal('😀😃'.chars.to_array, ['😀', '😃'])
    t.equal('😀x😃'.chars.to_array, ['😀', 'x', '😃'])
    t.equal('🤦🏼‍♂️'.chars.to_array, ['🤦🏼‍♂️'])
  })

  t.test('String.contains?', fn (t) {
    t.true('foo'.contains?('foo'))
    t.true('foo'.contains?('o'))
    t.true('😀'.contains?('😀'))
    t.true('😀foo'.contains?('foo'))

    t.false('foo'.contains?(''))
    t.false(''.contains?(''))
    t.false(''.contains?('x'))
    t.false('foo'.contains?('x'))
    t.false('foo'.contains?('😃'))
  })

  t.test('String.to_byte_array', fn (t) {
    t.equal('inko'.to_byte_array, ByteArray.from_array([105, 110, 107, 111]))
  })

  t.test('String.into_byte_array', fn (t) {
    t.equal('inko'.into_byte_array, ByteArray.from_array([105, 110, 107, 111]))
  })

  t.test('String.clone', fn (t) {
    t.equal('foo'.clone, 'foo')
    t.equal('😃'.clone, '😃')
  })

  t.test('String.to_string', fn (t) {
    t.equal('foo'.to_string, 'foo')
    t.equal('😃'.to_string, '😃')
  })

  t.test('String.into_string', fn (t) {
    t.equal('foo'.into_string, 'foo')
    t.equal('😃'.into_string, '😃')
  })

  t.test('String.==', fn (t) {
    t.equal('a', 'a')
    t.equal('ab', 'ab')
    t.equal('abc', 'abc')
    t.equal('abcd', 'abcd')
    t.equal('abcde', 'abcde')
    t.equal('abcdef', 'abcdef')
    t.equal('abcdefg', 'abcdefg')
    t.equal('abcdefgh', 'abcdefgh')
    t.equal('abcdefghi', 'abcdefghi')
    t.equal('abcdefghij', 'abcdefghij')
    t.equal('abcdefghijk', 'abcdefghijk')
    t.equal('abcdefghijkl', 'abcdefghijkl')
    t.equal('abcdefghijklm', 'abcdefghijklm')
    t.equal('abcdefghijklmn', 'abcdefghijklmn')
    t.equal('abcdefghijklmno', 'abcdefghijklmno')
    t.equal('abcdefghijklmnop', 'abcdefghijklmnop')
    t.equal('abcdefghijklmnopq', 'abcdefghijklmnopq')
    t.equal('abcdefghijklmnopqr', 'abcdefghijklmnopqr')
    t.equal('abcdefghijklmnopqrs', 'abcdefghijklmnopqrs')
    t.equal('Ä', 'Ä')
    t.equal('AÄ', 'AÄ')
    t.equal('쿠키', '쿠키')

    t.not_equal('foo', 'bar')
    t.not_equal('Ä', '쿠')
    t.not_equal('AÄ', 'A쿠')
    t.not_equal('쿠Ä', '쿠키')
    t.not_equal('a', 'A')
    t.not_equal('ab', 'AB')
    t.not_equal('abc', 'ABC')
    t.not_equal('abcd', 'ABCD')
    t.not_equal('abcde', 'ABCDE')
    t.not_equal('abcdef', 'ABCDEF')
    t.not_equal('abcdefg', 'ABCDEFG')
    t.not_equal('abcdefgh', 'ABCDEFGH')
    t.not_equal('abcdefghi', 'ABCDEFGHI')
    t.not_equal('abcdefghij', 'ABCDEFGHIJ')
    t.not_equal('abcdefghijk', 'ABCDEFGHIJK')
    t.not_equal('abcdefghijkl', 'ABCDEFGHIJKL')
    t.not_equal('abcdefghijklm', 'ABCDEFGHIJKLM')
    t.not_equal('abcdefghijklmn', 'ABCDEFGHIJKLMN')
    t.not_equal('abcdefghijklmno', 'ABCDEFGHIJKLMNO')
    t.not_equal('abcdefghijklmnop', 'ABCDEFGHIJKLMNOP')
    t.not_equal('abcdefghijklmnopq', 'ABCDEFGHIJKLMNOPQ')
    t.not_equal('abcdefghijklmnopqr', 'ABCDEFGHIJKLMNOPQR')
    t.not_equal('abcdefghijklmnopqrs', 'ABCDEFGHIJKLMNOPQRS')
    t.not_equal('aaaaaaaaa', 'aaaaaaaab')
    t.not_equal('aaaaaaaaaaaa', 'aaaaaaaabbbb')
    t.not_equal('aaaaaaaaaa', 'aaaaaaaabb')
    t.not_equal('aaaaaaaaa', 'aaaaaaaab')
  })

  t.test('String.hash', fn (t) {
    for
      v
    in
      [
        'a',
        'aa',
        'aaa',
        'aaaa',
        'aaaa',
        'aaaaa',
        'aaaaaa',
        'aaaaaaa',
        'aaaaaaaa',
        'aaaaaaaaa',
        'aaaaaaaaaa',
        'aaaaaaaaaaa',
      ]
    {
      t.equal(hash(v), hash(v))
    }

    t.not_equal(hash('hello'), hash('world'))
    t.not_equal(hash(('ab', 'c')), hash(('a', 'bc')))
  })

  t.test('String.+', fn (t) {
    t.equal('foo' + 'bar', 'foobar')
    t.equal('Ä' + 'Ä', 'ÄÄ')
    t.equal('A' + 'Ä', 'AÄ')
    t.equal('쿠' + '키', '쿠키')
    t.equal('😃' + '😃', '😃😃')
  })

  t.test('String.to_path', fn (t) {
    t.equal('foo.inko'.to_path, Path.new('foo.inko'))
  })

  t.test('String.escaped', fn (t) {
    t.equal('foo'.escaped, 'foo')
    t.equal('"foo"'.escaped, '\\"foo\\"')
    t.equal("'foo'".escaped, "'foo'")
    t.equal('foo\nbar'.escaped, 'foo\\nbar')
    t.equal('foo\tbar'.escaped, 'foo\\tbar')
    t.equal('foo\rbar'.escaped, 'foo\\rbar')
    t.equal('foo\u{C}bar'.escaped, 'foo\\fbar')
    t.equal('foo\u{8}bar'.escaped, 'foo\\bbar')
  })

  t.test('String.escape?', fn (t) {
    t.false(''.escape?)
    t.false('foo'.escape?)
    t.false('foo bar'.escape?)
    t.true('foo\nbar'.escape?)
    t.true('foo\rbar'.escape?)
  })

  t.test('String.fmt', fn (t) {
    t.equal(fmt('foo'), '"foo"')
    t.equal(fmt('"foo"'), '"\\"foo\\""')
    t.equal(fmt("'foo'"), "\"'foo'\"")
    t.equal(fmt('foo\nbar'), '"foo\\nbar"')
    t.equal(fmt('foo\tbar'), '"foo\\tbar"')
    t.equal(fmt('foo\rbar'), '"foo\\rbar"')
  })

  t.test('String.strip_prefix', fn (t) {
    t.equal('hello'.strip_prefix('xxxxxxxxx'), Option.None)
    t.equal('hello'.strip_prefix('x'), Option.None)
    t.equal('hello'.strip_prefix(''), Option.None)
    t.equal('XhelloX'.strip_prefix('x'), Option.None)
    t.equal('xhellox'.strip_prefix('xy'), Option.None)
    t.equal('xhellox'.strip_prefix('y'), Option.None)
    t.equal('xhellox'.strip_prefix('x'), Option.Some('hellox'))
    t.equal('xxhelloxx'.strip_prefix('xx'), Option.Some('helloxx'))
    t.equal('😃hello😃'.strip_prefix('😃'), Option.Some('hello😃'))
  })

  t.test('String.strip_suffix', fn (t) {
    t.equal('hello'.strip_suffix('xxxxxxxxx'), Option.None)
    t.equal('hello'.strip_suffix('x'), Option.None)
    t.equal('hello'.strip_suffix(''), Option.None)
    t.equal('XhelloX'.strip_suffix('x'), Option.None)
    t.equal('xhellox'.strip_suffix('xy'), Option.None)
    t.equal('xhellox'.strip_suffix('y'), Option.None)
    t.equal('xhellox'.strip_suffix('x'), Option.Some('xhello'))
    t.equal('xxhelloxx'.strip_suffix('xx'), Option.Some('xxhello'))
    t.equal('😃hello😃'.strip_suffix('😃'), Option.Some('😃hello'))
  })

  t.test('String.trim_start', fn (t) {
    t.equal(''.trim_start, '')
    t.equal('hello'.trim_start, 'hello')
    t.equal(' hello '.trim_start, 'hello ')
    t.equal('  hello  '.trim_start, 'hello  ')
    t.equal('  '.trim_start, '')
    t.equal('\thello\t'.trim_start, 'hello\t')
    t.equal('\rhello\r'.trim_start, 'hello\r')
    t.equal('\nhello\n'.trim_start, 'hello\n')
    t.equal('\t\r\n\thello'.trim_start, 'hello')
  })

  t.test('String.trim_end', fn (t) {
    t.equal(''.trim_end, '')
    t.equal('hello'.trim_end, 'hello')
    t.equal(' hello '.trim_end, ' hello')
    t.equal('  hello  '.trim_end, '  hello')
    t.equal('  '.trim_end, '')
    t.equal('\thello\t'.trim_end, '\thello')
    t.equal('\rhello\r'.trim_end, '\rhello')
    t.equal('\nhello\n'.trim_end, '\nhello')
    t.equal('hello\t\r\n\t'.trim_end, 'hello')
  })

  t.test('String.trim', fn (t) {
    t.equal(''.trim, '')
    t.equal('hello'.trim, 'hello')
    t.equal(' hello '.trim, 'hello')
    t.equal('  hello  '.trim, 'hello')
    t.equal('  '.trim, '')
    t.equal('\thello\t'.trim, 'hello')
    t.equal('\rhello\r'.trim, 'hello')
    t.equal('\nhello\n'.trim, 'hello')
    t.equal('hello\t\r\n\t'.trim, 'hello')
  })

  t.test('String.replace', fn (t) {
    t.equal(''.replace('', ''), '')
    t.equal(''.replace('', 'foo'), '')
    t.equal('foo'.replace('', 'bar'), 'foo')
    t.equal(''.replace('foo', 'bar'), '')
    t.equal(''.replace('foo', ''), '')
    t.equal('foo'.replace('foo', 'bar'), 'bar')
    t.equal('foo baz'.replace('foo', 'bar'), 'bar baz')
    t.equal('foo foo'.replace('foo', 'bar'), 'bar bar')
    t.equal('foo'.replace('foo', ''), '')
    t.equal('foo bar'.replace('foo', ''), ' bar')
    t.equal('foo'.replace('fo', 'FO'), 'FOo')
    t.equal('foo'.replace('FOO', 'BAR'), 'foo')
    t.equal('a😃a'.replace('😃', 'X'), 'aXa')
    t.equal('foo'.replace('foo', '😃'), '😃')
    t.equal('foo'.replace('foo', 'foobar'), 'foobar')
    t.equal('a,b,c,d'.replace(',', '  '), 'a  b  c  d')
  })

  t.test('String.cmp', fn (t) {
    t.equal(''.cmp(''), Ordering.Equal)
    t.equal(''.cmp('a'), Ordering.Less)
    t.equal('a'.cmp(''), Ordering.Greater)
    t.equal('a'.cmp('a'), Ordering.Equal)
    t.equal('a'.cmp('b'), Ordering.Less)
    t.equal('c'.cmp('b'), Ordering.Greater)
    t.equal('aaa'.cmp('bbb'), Ordering.Less)
    t.equal('aaa'.cmp('bb'), Ordering.Less)
    t.equal('aa'.cmp('aab'), Ordering.Less)
    t.equal('aab'.cmp('aa'), Ordering.Greater)
    t.equal('zzz'.cmp('a'), Ordering.Greater)
  })

  t.test('StringBuffer.new', fn (t) {
    let buf = StringBuffer.new

    t.true(buf.empty?)
  })

  t.test('StringBuffer.from_array', fn (t) {
    let buf = StringBuffer.from_array(['a', 'b'])

    t.equal(buf.into_string, 'ab')
  })

  t.test('StringBuffer.push', fn (t) {
    let buf = StringBuffer.new

    buf.push('a')
    buf.push('b')
    t.equal(buf.into_string, 'ab')
  })

  t.test('StringBuffer.clear', fn (t) {
    let buf = StringBuffer.new

    buf.push('hello')
    buf.clear

    t.true(buf.empty?)
  })

  t.test('StringBuffer.into_string', fn (t) {
    let buf = StringBuffer.new

    buf.push('a')
    buf.push('😃')
    buf.push('b')
    t.equal(buf.into_string, 'a😃b')
  })
}
