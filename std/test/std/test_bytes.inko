import helpers (hash)
import std.array (OutOfBounds)
import std.bytes (Iter, Slice)
import std.fmt (fmt)
import std.test (Tests)

fn split(string: String, on: String, start: Int, end: Int) -> Array[String] {
  string.slice(start, end).split(on).map(fn (s) { s.to_string }).to_array
}

fn to_slice(string: String) -> Slice[String] {
  string.slice(0, string.size)
}

fn pub tests(t: mut Tests) {
  t.test('Slice.new', fn (t) {
    let bytes1 = ByteArray.from_array([10, 20])
    let bytes2 = ByteArray.new
    let slice1 = Slice.new(bytes1, start: 0, end: 2)
    let slice2 = Slice.new(bytes1, start: 0, end: 0)
    let slice3 = Slice.new(bytes2, start: 0, end: 0)
    let slice4 = Slice.new(bytes1, start: 2, end: 2)

    t.equal(slice1.start, 0)
    t.equal(slice1.size, 2)
    t.equal(slice1.source, bytes1)

    t.equal(slice2.start, 0)
    t.equal(slice2.size, 0)
    t.equal(slice2.source, bytes1)

    t.equal(slice3.start, 0)
    t.equal(slice3.size, 0)
    t.equal(slice3.source, bytes2)

    t.equal(slice4.start, 2)
    t.equal(slice4.end, 2)
    t.equal(slice4.size, 0)
  })

  t.test('Slice.new with an out of bounds range', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(Slice.new(bytes, 0, 10).size, 2)
    t.equal(Slice.new(bytes, 10, 15).size, 0)
  })

  t.panic('Slice.checked with an out of bounds start index', fn {
    let bytes = ByteArray.from_array([10, 20])

    Slice.checked(bytes, start: 3, end: 4)
  })

  t.panic('Slice.checked with an out of bounds end index', fn {
    let bytes = ByteArray.from_array([10, 20])

    Slice.checked(bytes, start: 0, end: 3)
  })

  t.test('Slice.to_slice', fn (t) {
    let slice = Slice.new('abc', 0, 3)

    t.equal(slice.to_slice, slice)
  })

  t.test('Slice.slice', fn (t) {
    let input = 'Hello, this is an example String'
    let slice1 = input.slice(start: 0, end: 12)
    let slice2 = slice1.slice(start: 0, end: 5)
    let slice3 = slice1.slice(start: 1, end: 4)

    t.equal(slice1.start, 0)
    t.equal(slice1.end, 12)
    t.equal(slice1.to_string, 'Hello, this ')

    t.equal(slice2.start, 0)
    t.equal(slice2.end, 5)
    t.equal(slice2.to_string, 'Hello')

    t.equal(slice3.start, 1)
    t.equal(slice3.end, 4)
    t.equal(slice3.to_string, 'ell')
  })

  t.panic('Slice.slice with an out of bounds start index', fn {
    'hello'.slice(start: 0, end: 5).slice(start: 15, end: 5)
  })

  t.panic('Slice.slice with an out of bounds end index', fn {
    'hello'.slice(start: 0, end: 5).slice(start: 0, end: 15)
  })

  t.panic('Slice.slice with an end index lower than the start index', fn {
    'hello'.slice(start: 0, end: 5).slice(start: 3, end: 0)
  })

  t.test('Slice.into_iter', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let slice = Slice.new(bytes, start: 1, end: 3)

    t.equal(slice.into_iter.to_array, [20, 30])
  })

  t.test('Slice.bytes', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let slice = Slice.new(bytes, start: 1, end: 3)

    t.equal(slice.bytes.to_array, [20, 30])
  })

  t.test('Slice.empty?', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let slice1 = Slice.new(bytes, start: 1, end: 3)
    let slice2 = Slice.new(bytes, start: 0, end: 0)

    t.false(slice1.empty?)
    t.true(slice2.empty?)

    bytes.clear
    t.true(slice1.empty?)
    t.true(slice2.empty?)
  })

  t.test('Slice.size', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let slice = Slice.new(bytes, start: 1, end: 3)

    t.equal(slice.size, 2)

    bytes.pop
    t.equal(slice.size, 1)

    bytes.clear
    t.equal(slice.size, 0)
  })

  t.test('Slice.get', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let slice = Slice.new(bytes, start: 1, end: 3)

    t.equal(slice.get(0), Result.Ok(20))
    t.equal(slice.get(1), Result.Ok(30))
    t.equal(slice.get(2), Result.Error(OutOfBounds.new(index: 2, size: 2)))

    bytes.clear
    t.equal(slice.get(0), Result.Error(OutOfBounds.new(index: 0, size: 0)))
    t.equal(slice.get(1), Result.Error(OutOfBounds.new(index: 1, size: 0)))
  })

  t.test(
    'Slice.get with an index valid for the source but not the slice',
    fn (t) {
      let val = 'name=Alice;age=42'
      let slice = val.slice(5, 10)

      t.equal(slice.get(7), Result.Error(OutOfBounds.new(index: 7, size: 5)))
    },
  )

  t.test('Slice.fmt', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let slice = Slice.new(bytes, start: 1, end: 3)

    t.equal(fmt(slice), '[20, 30]')
  })

  t.test('Slice.==', fn (t) {
    let bytes1 = ByteArray.from_array([10, 20, 30])
    let bytes2 = ByteArray.from_array([20, 30])
    let slice1 = Slice.new(bytes1, start: 1, end: 3)
    let slice2 = Slice.new(bytes1, start: 1, end: 3)
    let slice3 = Slice.new(bytes1, start: 2, end: 3)
    let slice4 = Slice.new(bytes2, start: 0, end: 2)

    t.equal(slice1, slice2)
    t.equal(slice1, slice4)
    t.not_equal(slice2, slice3)
  })

  t.test('Slice.equals?', fn (t) {
    let bytes1 = ByteArray.from_array([10, 20, 30])
    let bytes2 = ByteArray.from_array([20, 30])
    let slice1 = Slice.new(bytes1, start: 1, end: 3)
    let slice2 = Slice.new(bytes1, start: 1, end: 3)
    let slice3 = Slice.new(bytes1, start: 2, end: 3)
    let slice4 = Slice.new(bytes2, start: 0, end: 2)

    t.true(slice1.equals?(slice2))
    t.true(slice1.equals?(ByteArray.from_array([20, 30])))
    t.true(slice1.equals?(slice4))
    t.false(slice1.equals?(slice3))
  })

  t.test('Slice.index_of', fn (t) {
    let value = 'hello'

    t.equal(value.slice(0, 5).index_of('e', starting_at: 0), Option.Some(1))
    t.equal(value.slice(1, 5).index_of('e', starting_at: 0), Option.Some(0))
    t.equal(value.slice(1, 5).index_of('l', starting_at: 0), Option.Some(1))
    t.equal(value.slice(1, 5).index_of('l', starting_at: 2), Option.Some(2))
    t.equal(value.slice(2, 5).index_of('e', starting_at: 0), Option.None)
  })

  t.test('Slice.contains_bytes?', fn (t) {
    let value = 'hello'

    t.true(value.slice(0, 5).contains_bytes?('hello'))
    t.false(value.slice(0, 4).contains_bytes?('hello'))
  })

  t.test('Slice.to_byte_array', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let slice1 = Slice.new(bytes, start: 1, end: 3)
    let slice2 = Slice.new(bytes, start: 0, end: 0)

    t.equal(slice1.to_byte_array, ByteArray.from_array([20, 30]))
    t.equal(slice2.to_byte_array, ByteArray.new)
  })

  t.test('Slice.to_string', fn (t) {
    let bytes = 'hello'.to_byte_array
    let slice1 = Slice.new(bytes, start: 1, end: 3)
    let slice2 = Slice.new(bytes, start: 0, end: 0)

    t.equal(slice1.to_string, 'el')
    t.equal(slice2.to_string, '')
  })

  t.test('Slice.clone', fn (t) {
    let bytes = ByteArray.from_array([1, 2, 3])
    let slice1 = bytes.slice(start: 0, end: 3)
    let slice2 = slice1.clone

    t.equal(slice1.source, slice2.source)
    t.equal(slice1.start, slice2.start)
    t.equal(slice1.end, slice2.end)
  })

  t.test('Slice.split', fn (t) {
    t.equal(split('foo/bar/baz', on: '/', start: 0, end: 7), ['foo', 'bar'])
    t.equal(
      split('foo/bar/baz', on: '/', start: 0, end: 11),
      ['foo', 'bar', 'baz'],
    )
    t.equal(split('foo/bar/baz', on: '/', start: 0, end: 3), ['foo'])
    t.equal(split('foo/bar/baz', on: '/', start: 0, end: 2), ['fo'])
  })

  t.test('Slice.split_once', fn (t) {
    let val1 = 'key=value'.slice(0, 9)
    let val2 = ''.slice(0, 0)

    t.equal(
      val1.split_once('='),
      Option.Some((val1.slice(0, 3), val1.slice(4, 9))),
    )
    t.equal(
      val1.split_once('=val'),
      Option.Some((val1.slice(0, 3), val1.slice(7, 9))),
    )
    t.equal(val2.split_once('='), Option.None)
    t.equal('key'.split_once('='), Option.None)
    t.equal('key'.split_once(''), Option.None)
  })

  t.test('Slice.trim_start', fn (t) {
    t.equal(to_slice('').trim_start.to_string, '')
    t.equal(to_slice('hello').trim_start.to_string, 'hello')
    t.equal(to_slice(' hello ').trim_start.to_string, 'hello ')
    t.equal(to_slice('  hello  ').trim_start.to_string, 'hello  ')
    t.equal(to_slice('  ').trim_start.to_string, '')
    t.equal(to_slice('\thello\t').trim_start.to_string, 'hello\t')
    t.equal(to_slice('\rhello\r').trim_start.to_string, 'hello\r')
    t.equal(to_slice('\nhello\n').trim_start.to_string, 'hello\n')
    t.equal(to_slice('\t\r\n\thello').trim_start.to_string, 'hello')
  })

  t.test('Slice.trim_end', fn (t) {
    t.equal(to_slice('').trim_end.to_string, '')
    t.equal(to_slice('hello').trim_end.to_string, 'hello')
    t.equal(to_slice(' hello ').trim_end.to_string, ' hello')
    t.equal(to_slice('  hello  ').trim_end.to_string, '  hello')
    t.equal(to_slice('  ').trim_end.to_string, '')
    t.equal(to_slice('\thello\t').trim_end.to_string, '\thello')
    t.equal(to_slice('\rhello\r').trim_end.to_string, '\rhello')
    t.equal(to_slice('\nhello\n').trim_end.to_string, '\nhello')
    t.equal(to_slice('hello\t\r\n\t').trim_end.to_string, 'hello')
  })

  t.test('Slice.trim', fn (t) {
    t.equal(to_slice('').trim.to_string, '')
    t.equal(to_slice('hello').trim.to_string, 'hello')
    t.equal(to_slice(' hello ').trim.to_string, 'hello')
    t.equal(to_slice('  hello  ').trim.to_string, 'hello')
    t.equal(to_slice('  ').trim.to_string, '')
    t.equal(to_slice('\thello\t').trim.to_string, 'hello')
    t.equal(to_slice('\rhello\r').trim.to_string, 'hello')
    t.equal(to_slice('\nhello\n').trim.to_string, 'hello')
    t.equal(to_slice('hello\t\r\n\t').trim.to_string, 'hello')
  })

  t.test('Slice.starts_with?', fn (t) {
    let str = 'hello'

    t.true(str.slice(0, str.size).starts_with?('h'))
    t.false(str.slice(1, str.size).starts_with?('h'))
  })

  t.test('Slice.ends_with?', fn (t) {
    let str = 'hello'

    t.true(str.slice(0, str.size).ends_with?('o'))
    t.false(str.slice(0, str.size - 1).ends_with?('o'))
  })

  t.test('Slice.contains?', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30, 40])
    let slice = bytes.slice(0, 2)

    t.true(slice.contains?(10))
    t.false(slice.contains?(40))
  })

  t.test('Slice.hash', fn (t) {
    t.equal(hash('foo'.slice(0, 3)), hash('foo'.slice(0, 3)))
    t.not_equal(hash('foo'.slice(0, 3)), hash('foo'.slice(0, 2)))
  })

  t.test('Iter.next', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let iter = Iter(source: bytes, index: 0)

    t.equal(iter.next, Option.Some(10))
    t.equal(iter.next, Option.Some(20))
    t.equal(iter.next, Option.Some(30))
    t.equal(iter.next, Option.None)
  })

  t.test('ByteArray.new', fn (t) {
    t.equal(ByteArray.new, ByteArray.from_array([]))
  })

  t.test('ByteArray.from_array', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.get(0), Result.Ok(10))
    t.equal(bytes.get(1), Result.Ok(20))
  })

  t.test('ByteArray.filled', fn (t) {
    t.equal(ByteArray.filled(with: 0, times: 0), ByteArray.new)
    t.equal(ByteArray.filled(with: 0, times: 2), ByteArray.from_array([0, 0]))
  })

  t.test('ByteArray.clear', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    bytes.clear

    t.equal(bytes, ByteArray.new)
  })

  t.test('ByteArray.append with a ByteArray', fn (t) {
    let a = ByteArray.from_array([10])
    let b = ByteArray.from_array([20])

    a.append(b)
    t.equal(a, ByteArray.from_array([10, 20]))
  })

  t.test('ByteArray.append with a String', fn (t) {
    let a = 'hello '.to_byte_array
    let b = ByteArray.new

    a.append('world')
    b.append('hello')
    t.equal(a.into_string, 'hello world')
    t.equal(b.into_string, 'hello')
  })

  t.test('ByteArray.append with a slice', fn (t) {
    let a = 'hello'
    let b = ByteArray.new

    b.append(a.slice(start: 0, end: a.size))
    t.equal(b, a.to_byte_array)
  })

  t.test('ByteArray.append with an empty argument', fn (t) {
    let buf = ByteArray.new

    buf.append('')
    t.equal(buf.size, 0)

    buf.append(ByteArray.new)
    t.equal(buf.size, 0)

    buf.append(''.slice(start: 0, end: 0))
    t.equal(buf.size, 0)
  })

  t.test('ByteArray.push', fn (t) {
    let bytes = ByteArray.new

    bytes.push(10)
    bytes.push(20)

    t.equal(bytes, ByteArray.from_array([10, 20]))
  })

  t.test('ByteArray.pop', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.pop, Option.Some(20))
    t.equal(bytes.pop, Option.Some(10))
    t.equal(bytes.pop, Option.None)
  })

  t.test('ByteArray.remove_at', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])

    t.equal(bytes.remove_at(1), Result.Ok(20))
    t.equal(bytes, ByteArray.from_array([10, 30]))
    t.equal(
      bytes.remove_at(10),
      Result.Error(OutOfBounds.new(index: 10, size: 2)),
    )
  })

  t.test('ByteArray.drain_to_string', fn (t) {
    let bytes = ByteArray.from_array([105, 110, 107, 111])

    t.equal(bytes.drain_to_string, 'inko')
    t.equal(bytes, ByteArray.new)
  })

  t.test('ByteArray.to_slice', fn (t) {
    let bytes = ByteArray.from_array([1, 2, 3])

    t.equal(bytes.to_slice, bytes.slice(0, bytes.size))
  })

  t.test('ByteArray.slice', fn (t) {
    let bytes = ByteArray.from_array([105, 110, 107, 111])
    let slice1 = bytes.slice(start: 0, end: 0)
    let slice2 = bytes.slice(start: 1, end: 4)

    t.equal(slice1.start, 0)
    t.equal(slice1.size, 0)
    t.equal(slice1.pointer as Int, bytes.pointer as Int)

    t.equal(slice2.start, 1)
    t.equal(slice2.size, 3)
    t.equal(slice2.pointer as Int, bytes.pointer as Int + 1)
  })

  t.panic('ByteArray.slice with an out of bounds start index', fn {
    ByteArray.from_array([10, 20]).slice(start: 2, end: 2)
  })

  t.panic('ByteArray.slice with an out of bounds end index', fn {
    ByteArray.from_array([10, 20]).slice(start: 0, end: 10)
  })

  t.test('ByteArray.get', fn (t) {
    let bytes = ByteArray.from_array([105, 110])

    t.equal(bytes.get(0), Result.Ok(105))
    t.equal(bytes.get(1), Result.Ok(110))
    t.equal(bytes.get(2), Result.Error(OutOfBounds.new(index: 2, size: 2)))
  })

  t.test('ByteArray.size', fn (t) {
    t.equal(ByteArray.new.size, 0)
    t.equal(ByteArray.from_array([10]).size, 1)
  })

  t.test('ByteArray.empty?', fn (t) {
    t.true(ByteArray.new.empty?)
    t.false(ByteArray.from_array([10]).empty?)
  })

  t.test('ByteArray.to_array', fn (t) {
    t.equal(ByteArray.new.to_array, [])
    t.equal(ByteArray.from_array([10, 20]).to_array, [10, 20])
  })

  t.test('ByteArray.iter', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.iter.to_array, [10, 20])
  })

  t.test('ByteArray.iter when the ByteArray changes during iteration', fn (t) {
    let bytes = ByteArray.from_array([10, 20, 30])
    let iter = bytes.iter

    t.equal(iter.next, Option.Some(10))
    bytes.pop
    t.equal(iter.next, Option.Some(20))
    t.equal(iter.next, Option.None)

    bytes.push(30)

    let iter = bytes.iter
    let _ = bytes.remove_at(0)

    t.equal(iter.next, Option.Some(20))
    t.equal(iter.next, Option.Some(30))
    t.equal(iter.next, Option.None)
  })

  t.test('ByteArray.bytes', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.bytes.to_array, [10, 20])
  })

  t.test('ByteArray.set', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    bytes.set(0, 50)
    t.equal(bytes.get(0), Result.Ok(50))
  })

  t.test('ByteArray.to_byte_array', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.to_byte_array, bytes)
  })

  t.test('ByteArray.into_byte_array', fn (t) {
    t.equal(
      ByteArray.from_array([10, 20]).into_byte_array,
      ByteArray.from_array([10, 20]),
    )
  })

  t.test('ByteArray.to_string', fn (t) {
    t.equal(ByteArray.from_array([105, 110, 107, 111]).to_string, 'inko')
  })

  t.test('ByteArray.==', fn (t) {
    t.equal('a'.to_byte_array, 'a'.to_byte_array)
    t.equal('ab'.to_byte_array, 'ab'.to_byte_array)
    t.equal('abc'.to_byte_array, 'abc'.to_byte_array)
    t.equal('abcd'.to_byte_array, 'abcd'.to_byte_array)
    t.equal('abcde'.to_byte_array, 'abcde'.to_byte_array)
    t.equal('abcdef'.to_byte_array, 'abcdef'.to_byte_array)
    t.equal('abcdefg'.to_byte_array, 'abcdefg'.to_byte_array)
    t.equal('abcdefgh'.to_byte_array, 'abcdefgh'.to_byte_array)
    t.equal('abcdefghi'.to_byte_array, 'abcdefghi'.to_byte_array)
    t.equal('abcdefghij'.to_byte_array, 'abcdefghij'.to_byte_array)
    t.equal('abcdefghijk'.to_byte_array, 'abcdefghijk'.to_byte_array)
    t.equal('abcdefghijkl'.to_byte_array, 'abcdefghijkl'.to_byte_array)
    t.equal('abcdefghijklm'.to_byte_array, 'abcdefghijklm'.to_byte_array)
    t.equal('abcdefghijklmn'.to_byte_array, 'abcdefghijklmn'.to_byte_array)
    t.equal('abcdefghijklmno'.to_byte_array, 'abcdefghijklmno'.to_byte_array)
    t.equal('abcdefghijklmnop'.to_byte_array, 'abcdefghijklmnop'.to_byte_array)
    t.equal(
      'abcdefghijklmnopq'.to_byte_array,
      'abcdefghijklmnopq'.to_byte_array,
    )
    t.equal(
      'abcdefghijklmnopqr'.to_byte_array,
      'abcdefghijklmnopqr'.to_byte_array,
    )
    t.equal(
      'abcdefghijklmnopqrs'.to_byte_array,
      'abcdefghijklmnopqrs'.to_byte_array,
    )
    t.equal('Ä'.to_byte_array, 'Ä'.to_byte_array)
    t.equal('AÄ'.to_byte_array, 'AÄ'.to_byte_array)
    t.equal('쿠키'.to_byte_array, '쿠키'.to_byte_array)

    t.not_equal('foo'.to_byte_array, 'bar'.to_byte_array)
    t.not_equal('Ä'.to_byte_array, '쿠'.to_byte_array)
    t.not_equal('AÄ'.to_byte_array, 'A쿠'.to_byte_array)
    t.not_equal('쿠Ä'.to_byte_array, '쿠키'.to_byte_array)
    t.not_equal('a'.to_byte_array, 'A'.to_byte_array)
    t.not_equal('ab'.to_byte_array, 'AB'.to_byte_array)
    t.not_equal('abc'.to_byte_array, 'ABC'.to_byte_array)
    t.not_equal('abcd'.to_byte_array, 'ABCD'.to_byte_array)
    t.not_equal('abcde'.to_byte_array, 'ABCDE'.to_byte_array)
    t.not_equal('abcdef'.to_byte_array, 'ABCDEF'.to_byte_array)
    t.not_equal('abcdefg'.to_byte_array, 'ABCDEFG'.to_byte_array)
    t.not_equal('abcdefgh'.to_byte_array, 'ABCDEFGH'.to_byte_array)
    t.not_equal('abcdefghi'.to_byte_array, 'ABCDEFGHI'.to_byte_array)
    t.not_equal('abcdefghij'.to_byte_array, 'ABCDEFGHIJ'.to_byte_array)
    t.not_equal('abcdefghijk'.to_byte_array, 'ABCDEFGHIJK'.to_byte_array)
    t.not_equal('abcdefghijkl'.to_byte_array, 'ABCDEFGHIJKL'.to_byte_array)
    t.not_equal('abcdefghijklm'.to_byte_array, 'ABCDEFGHIJKLM'.to_byte_array)
    t.not_equal('abcdefghijklmn'.to_byte_array, 'ABCDEFGHIJKLMN'.to_byte_array)
    t.not_equal(
      'abcdefghijklmno'.to_byte_array,
      'ABCDEFGHIJKLMNO'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnop'.to_byte_array,
      'ABCDEFGHIJKLMNOP'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnopq'.to_byte_array,
      'ABCDEFGHIJKLMNOPQ'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnopqr'.to_byte_array,
      'ABCDEFGHIJKLMNOPQR'.to_byte_array,
    )
    t.not_equal(
      'abcdefghijklmnopqrs'.to_byte_array,
      'ABCDEFGHIJKLMNOPQRS'.to_byte_array,
    )
    t.not_equal('aaaaaaaaa'.to_byte_array, 'aaaaaaaab'.to_byte_array)
    t.not_equal('aaaaaaaaaaaa'.to_byte_array, 'aaaaaaaabbbb'.to_byte_array)
    t.not_equal('aaaaaaaaaa'.to_byte_array, 'aaaaaaaabb'.to_byte_array)
    t.not_equal('aaaaaaaaa'.to_byte_array, 'aaaaaaaab'.to_byte_array)
  })

  t.test('ByteArray.equals?', fn (t) {
    t.true('a'.to_byte_array.equals?('a'))
    t.true('ab'.to_byte_array.equals?('ab'))
    t.true('abc'.to_byte_array.equals?('abc'))
    t.true('abcd'.to_byte_array.equals?('abcd'))
    t.true('abcde'.to_byte_array.equals?('abcde'))
    t.true('abcdef'.to_byte_array.equals?('abcdef'))
    t.true('abcdefg'.to_byte_array.equals?('abcdefg'))
    t.true('abcdefgh'.to_byte_array.equals?('abcdefgh'))
    t.true('abcdefghi'.to_byte_array.equals?('abcdefghi'))
    t.true('abcdefghij'.to_byte_array.equals?('abcdefghij'))
    t.true('abcdefghijk'.to_byte_array.equals?('abcdefghijk'))
    t.true('abcdefghijkl'.to_byte_array.equals?('abcdefghijkl'))
    t.true('abcdefghijklm'.to_byte_array.equals?('abcdefghijklm'))
    t.true('abcdefghijklmn'.to_byte_array.equals?('abcdefghijklmn'))
    t.true('abcdefghijklmno'.to_byte_array.equals?('abcdefghijklmno'))
    t.true('abcdefghijklmnop'.to_byte_array.equals?('abcdefghijklmnop'))
    t.true('abcdefghijklmnopq'.to_byte_array.equals?('abcdefghijklmnopq'))
    t.true('abcdefghijklmnopqr'.to_byte_array.equals?('abcdefghijklmnopqr'))
    t.true('abcdefghijklmnopqrs'.to_byte_array.equals?('abcdefghijklmnopqrs'))
    t.true('Ä'.to_byte_array.equals?('Ä'))
    t.true('AÄ'.to_byte_array.equals?('AÄ'))
    t.true('쿠키'.to_byte_array.equals?('쿠키'))

    t.false('a'.to_byte_array.equals?(''))
    t.false('foo'.to_byte_array.equals?('bar'))
    t.false('Ä'.to_byte_array.equals?('쿠'))
    t.false('AÄ'.to_byte_array.equals?('A쿠'))
    t.false('쿠Ä'.to_byte_array.equals?('쿠키'))
    t.false('a'.to_byte_array.equals?('A'))
    t.false('ab'.to_byte_array.equals?('AB'))
    t.false('abc'.to_byte_array.equals?('ABC'))
    t.false('abcd'.to_byte_array.equals?('ABCD'))
    t.false('abcde'.to_byte_array.equals?('ABCDE'))
    t.false('abcdef'.to_byte_array.equals?('ABCDEF'))
    t.false('abcdefg'.to_byte_array.equals?('ABCDEFG'))
    t.false('abcdefgh'.to_byte_array.equals?('ABCDEFGH'))
    t.false('abcdefghi'.to_byte_array.equals?('ABCDEFGHI'))
    t.false('abcdefghij'.to_byte_array.equals?('ABCDEFGHIJ'))
    t.false('abcdefghijk'.to_byte_array.equals?('ABCDEFGHIJK'))
    t.false('abcdefghijkl'.to_byte_array.equals?('ABCDEFGHIJKL'))
    t.false('abcdefghijklm'.to_byte_array.equals?('ABCDEFGHIJKLM'))
    t.false('abcdefghijklmn'.to_byte_array.equals?('ABCDEFGHIJKLMN'))
    t.false('abcdefghijklmno'.to_byte_array.equals?('ABCDEFGHIJKLMNO'))
    t.false('abcdefghijklmnop'.to_byte_array.equals?('ABCDEFGHIJKLMNOP'))
    t.false('abcdefghijklmnopq'.to_byte_array.equals?('ABCDEFGHIJKLMNOPQ'))
    t.false('abcdefghijklmnopqr'.to_byte_array.equals?('ABCDEFGHIJKLMNOPQR'))
    t.false('abcdefghijklmnopqrs'.to_byte_array.equals?('ABCDEFGHIJKLMNOPQRS'))
    t.false('aaaaaaaaa'.to_byte_array.equals?('aaaaaaaab'))
    t.false('aaaaaaaaaaaa'.to_byte_array.equals?('aaaaaaaabbbb'))
    t.false('aaaaaaaaaa'.to_byte_array.equals?('aaaaaaaabb'))
    t.false('aaaaaaaaa'.to_byte_array.equals?('aaaaaaaab'))
  })

  t.test('ByteArray.equals_while_ignoring_case?', fn (t) {
    t.true(''.to_byte_array.equals_while_ignoring_case?(''))
    t.true('abc'.to_byte_array.equals_while_ignoring_case?('abc'))
    t.true('abc'.to_byte_array.equals_while_ignoring_case?('ABC'))
    t.true('abc'.to_byte_array.equals_while_ignoring_case?('aBc'))

    t.false('foo'.to_byte_array.equals_while_ignoring_case?('hello'))
    t.false('abc'.to_byte_array.equals_while_ignoring_case?('def'))
    t.false('á'.to_byte_array.equals_while_ignoring_case?('Á'))
  })

  t.test('ByteArray.clone', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.equal(bytes.clone, bytes)
  })

  t.test('ByteArray.hash', fn (t) {
    for
      v
    in
      [
        'a'.to_byte_array,
        'aa'.to_byte_array,
        'aaa'.to_byte_array,
        'aaaa'.to_byte_array,
        'aaaa'.to_byte_array,
        'aaaaa'.to_byte_array,
        'aaaaaa'.to_byte_array,
        'aaaaaaa'.to_byte_array,
        'aaaaaaaa'.to_byte_array,
        'aaaaaaaaa'.to_byte_array,
        'aaaaaaaaaa'.to_byte_array,
        'aaaaaaaaaaa'.to_byte_array,
      ]
    {
      t.equal(hash(v), hash(v))
    }

    t.not_equal(hash('hello'.to_byte_array), hash('world'.to_byte_array))
  })

  t.test('ByteArray.contains?', fn (t) {
    let bytes = ByteArray.from_array([10, 20])

    t.true(bytes.contains?(10))
    t.true(bytes.contains?(20))
    t.false(bytes.contains?(30))
  })

  t.test('ByteArray.fmt', fn (t) {
    t.equal(fmt(ByteArray.new), '[]')
    t.equal(fmt(ByteArray.from_array([10])), '[10]')
    t.equal(fmt(ByteArray.from_array([10, 20])), '[10, 20]')
  })

  t.test('ByteArray.reverse', fn (t) {
    let vals = ByteArray.from_array([10, 20, 30])

    vals.reverse

    t.equal(vals, ByteArray.from_array([30, 20, 10]))
  })

  t.test('ByteArray.reverse_at', fn (t) {
    let vals = ByteArray.from_array([10, 20, 30, 40])

    vals.reverse_at(2)

    t.equal(vals, ByteArray.from_array([10, 20, 40, 30]))
  })

  t.test('ByteArray.resize', fn (t) {
    let bytes = ByteArray.new

    bytes.resize(size: 2, value: 1)
    t.equal(bytes, ByteArray.from_array([1, 1]))

    bytes.resize(size: 0, value: 0)
    t.equal(bytes, ByteArray.new)
  })

  t.panic('ByteArray.resize with an invalid size', fn {
    ByteArray.new.resize(size: -5, value: 0)
  })

  t.test('ByteArray.from_pointer', fn (t) {
    let a = ByteArray.from_array([1, 2, 3, 4])
    let b = ByteArray.from_pointer(a.pointer, size: 4)

    t.equal(a, b)
  })

  t.test('ByteArray.from_pointer with an empty source', fn (t) {
    let a = ByteArray.new
    let b = ByteArray.from_pointer(a.pointer, size: 0)

    t.equal(a, b)
    t.equal(b.size, 0)
  })

  t.test(
    'ByteArray.from_pointer with a NULL pointer and a non-zero size',
    fn (t) {
      let a = ByteArray.new
      let b = ByteArray.from_pointer(a.pointer, size: 10)

      t.equal(a, b)
      t.equal(b.size, 0)
    },
  )

  t.test('ByteArray.last', fn (t) {
    t.equal(ByteArray.new.last, Option.None)
    t.equal(ByteArray.from_array([10, 20]).last, Option.Some(20))
  })

  t.test('ByteArray.starts_with?', fn (t) {
    t.true('hello'.to_byte_array.starts_with?('hello'.to_byte_array))
    t.true('😀foo'.to_byte_array.starts_with?('😀'.to_byte_array))
    t.true('foo😀'.to_byte_array.starts_with?('foo'.to_byte_array))

    t.false(''.to_byte_array.starts_with?('x'.to_byte_array))
    t.false(''.to_byte_array.starts_with?(''.to_byte_array))
    t.false('hello'.to_byte_array.starts_with?(''.to_byte_array))
    t.false('hello'.to_byte_array.starts_with?('x'.to_byte_array))
    t.false('😀foo'.to_byte_array.starts_with?('foo'.to_byte_array))

    t.true('hello'.to_byte_array.starts_with?('hello'))
    t.true('😀foo'.to_byte_array.starts_with?('😀'))
    t.true('foo😀'.to_byte_array.starts_with?('foo'))

    t.false(''.to_byte_array.starts_with?('x'))
    t.false(''.to_byte_array.starts_with?(''))
    t.false('hello'.to_byte_array.starts_with?(''))
    t.false('hello'.to_byte_array.starts_with?('x'))
    t.false('😀foo'.to_byte_array.starts_with?('foo'))
  })

  t.test('ByteArray.ends_with?', fn (t) {
    t.true('hello_world'.to_byte_array.ends_with?('world'.to_byte_array))
    t.true('hello_world'.to_byte_array.ends_with?('d'.to_byte_array))
    t.true('foo😀'.to_byte_array.ends_with?('😀'.to_byte_array))

    t.false('hello_world'.to_byte_array.ends_with?(''.to_byte_array))
    t.false(
      'hello_world'.to_byte_array.ends_with?(
        'this is a long string'.to_byte_array,
      ),
    )
    t.false('hello_world'.to_byte_array.ends_with?('x'.to_byte_array))
    t.false(''.to_byte_array.ends_with?('x'.to_byte_array))
    t.false(''.to_byte_array.ends_with?(''.to_byte_array))

    t.true('hello_world'.to_byte_array.ends_with?('world'))
    t.true('hello_world'.to_byte_array.ends_with?('d'))
    t.true('foo😀'.to_byte_array.ends_with?('😀'))

    t.false('hello_world'.to_byte_array.ends_with?(''))
    t.false('hello_world'.to_byte_array.ends_with?('this is a long string'))
    t.false('hello_world'.to_byte_array.ends_with?('x'))
    t.false(''.to_byte_array.ends_with?('x'))
    t.false(''.to_byte_array.ends_with?(''))
  })

  t.test('ByteArray.zero', fn (t) {
    let buf1 = ByteArray.from_array([1, 2, 3])
    let buf2 = ByteArray.new

    buf1.zero
    buf2.zero
    t.equal(buf1, ByteArray.from_array([0, 0, 0]))
    t.equal(buf2, ByteArray.new)
  })

  t.test('ByteArray.reserve', fn (t) {
    let bytes = ByteArray.from_array([1, 2, 3, 4])

    bytes.reserve(2)
    t.equal(bytes.capacity, 8)
  })

  t.test('ByteArray.reserve_exact', fn (t) {
    let bytes = ByteArray.from_array([1, 2, 3, 4])

    bytes.reserve_exact(2)
    t.equal(bytes.capacity, 6)
  })

  t.test('ByteArray.index_of', fn (t) {
    let value = 'hello'.to_byte_array

    t.equal(value.index_of('e', starting_at: 0), Option.Some(1))
    t.equal(value.index_of('l', starting_at: 0), Option.Some(2))
    t.equal(value.index_of('l', starting_at: 3), Option.Some(3))
    t.equal(value.index_of('e', starting_at: 10), Option.None)
  })

  t.test('ByteArray.contains_bytes?', fn (t) {
    let value = 'hello'.to_byte_array

    t.true(value.contains_bytes?('hello'))
    t.false(value.contains_bytes?('hellox'))
  })

  t.test('ByteArray.write', fn (t) {
    let buf = ByteArray.new

    t.equal(buf.write('hello'), Result.Ok(nil))
    t.equal(buf.to_string, 'hello')
  })
}
