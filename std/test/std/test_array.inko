import helpers (hash)
import std.array (OutOfBounds)
import std.cmp (Compare, Ordering)
import std.drop (Drop, drop)
import std.fmt (fmt)
import std.rand (Random)
import std.test (Tests)

type Person {
  let @name: String
  let @age: Int
}

impl Compare for Person {
  fn pub cmp(other: ref Person) -> Ordering {
    @age.cmp(other.age)
  }
}

type Counter {
  let mut @value: Int

  fn static new -> Counter {
    Counter(0)
  }
}

type TrackDrop {
  let @counter: mut Counter

  fn static new(counter: mut Counter) -> TrackDrop {
    TrackDrop(counter)
  }
}

impl Drop for TrackDrop {
  fn mut drop {
    @counter.value += 1
  }
}

fn pub tests(t: mut Tests) {
  t.test('OutOfBounds.to_string', fn (t) {
    t.equal(
      OutOfBounds.new(index: 2, size: 1).to_string,
      'the index 2 is out of bounds (size: 1)',
    )
  })

  t.test('OutOfBounds.fmt', fn (t) {
    t.equal(
      fmt(OutOfBounds.new(index: 2, size: 1)),
      'OutOfBounds(index: 2, size: 1)',
    )
  })

  t.test('OutOfBounds.==', fn (t) {
    t.equal(
      OutOfBounds.new(index: 2, size: 1),
      OutOfBounds.new(index: 2, size: 1),
    )
    t.not_equal(
      OutOfBounds.new(index: 2, size: 1),
      OutOfBounds.new(index: 1, size: 1),
    )
    t.not_equal(
      OutOfBounds.new(index: 2, size: 1),
      OutOfBounds.new(index: 2, size: 0),
    )
  })

  t.test('Array.with_capacity', fn (t) {
    let ary1: Array[Int] = Array.with_capacity(0)
    let ary2: Array[Int] = Array.with_capacity(2)

    t.equal(ary1.capacity, 0)
    t.equal(ary1.buffer as Int, 0)
    t.equal(ary2.capacity, 2)
    t.not_equal(ary2.buffer as Int, 0)
  })

  t.panic('Array.with_capacity with an invalid size', fn {
    Array.with_capacity(-4) as Array[Int]
  })

  t.test('Array.filled', fn (t) {
    t.equal(Array.filled(with: 1, times: 0), [])
    t.equal(Array.filled(with: 1, times: 1), [1])
    t.equal(Array.filled(with: 1, times: 3), [1, 1, 1])
  })

  t.test('Array.clear', fn (t) {
    let count = Counter.new
    let vals = [TrackDrop.new(count), TrackDrop.new(count)]

    vals.clear

    t.equal(vals.size, 0)
    t.equal(count.value, 2)
  })

  t.test('Array.push', fn (t) {
    let vals = []

    vals.push(10)
    vals.push(20)

    t.equal(vals, [10, 20])
  })

  t.test('Array.pop', fn (t) {
    let vals = [10, 20]

    t.equal(vals.pop, Option.Some(20))
    t.equal(vals.pop, Option.Some(10))
    t.equal(vals.pop, Option.None)
  })

  t.test('Array.remove_at', fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.remove_at(1), Result.Ok(20))
    t.equal(vals, [10, 30])
    t.equal(vals.remove_at(0), Result.Ok(10))
    t.equal(vals, [30])
    t.equal(vals.remove_at(4), Result.Error(OutOfBounds.new(index: 4, size: 1)))
  })

  t.test('Array.swap', fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.swap(index: 1, with: 40), 20)
    t.equal(vals, [10, 40, 30])
  })

  t.test('Array.swap_indexes', fn (t) {
    let vals = [10, 20, 30]

    vals.swap_indexes(index: 0, with: 2)
    t.equal(vals, [30, 20, 10])
  })

  t.panic('Array.swap with an invalid index', fn {
    [10].swap(index: 5, with: 42)
  })

  t.test('Array.iter', fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.iter.to_array, [10, 20, 30])
  })

  t.test('Array.iter when the Array changes during iteration', fn (t) {
    let inp = [10, 20, 30]
    let out = []

    for val in inp.iter {
      if val == 10 { inp.pop }

      out.push(val)
    }

    t.equal(out, [10, 20])
  })

  t.test('Array.iter_mut', fn (t) {
    let vals = [(1, 2), (2, 3)]
    let a = (1, 2)
    let b = (2, 3)

    t.equal(vals.iter_mut.to_array, [mut a, mut b])
  })

  t.test('Array.iter_mut when the Array changes during iteration', fn (t) {
    let inp = [Person(name: 'Alice', age: 20), Person(name: 'Bob', age: 21)]
    let out = []

    for val in inp.iter_mut {
      if val.name == 'Alice' { inp.pop }

      out.push(val)
    }

    t.equal(out.size, 1)
    t.equal(out.get(0).or_panic.name, 'Alice')
  })

  t.test('Array.into_iter', fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.into_iter.to_array, [10, 20, 30])
  })

  t.test('Array.into_iter when the Array changes during iteration', fn (t) {
    let inp = [10, 20, 30]
    let iter = inp.into_iter

    t.equal(iter.next, Option.Some(10))
    iter.array.pop
    t.equal(iter.next, Option.Some(20))
    t.equal(iter.next, Option.None)
  })

  t.test('Array.reverse_iter', fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.reverse_iter.to_array, [30, 20, 10])
  })

  t.test('Array.reverse_iter when the Array changes during iteration', fn (t) {
    let inp = [10, 20, 30]
    let iter = inp.reverse_iter

    t.equal(iter.next, Option.Some(30))

    let _ = inp.remove_at(0)

    t.equal(iter.next, Option.Some(30))
    t.equal(iter.next, Option.Some(20))
    t.equal(iter.next, Option.None)
  })

  t.test('Array.append', fn (t) {
    let vals = [10, 20]

    vals.append([30])

    t.equal(vals, [10, 20, 30])
  })

  t.test('Array.size', fn (t) {
    t.equal(([] as Array[Int]).size, 0)
    t.equal([10, 20].size, 2)
  })

  t.test('Array.empty?', fn (t) {
    t.true(([] as Array[Int]).empty?)
    t.false([10].empty?)
  })

  t.test('Array.shuffle', fn (t) {
    let rng = Random.from_int(123)
    let one = [10]
    let two = [10, 20]
    let three = [10, 20, 30]

    one.shuffle(rng)
    two.shuffle(rng)
    three.shuffle(rng)

    t.equal(one, [10])
    t.equal(two, [20, 10])
    t.equal(three, [30, 10, 20])
  })

  t.test('Array.reverse', fn (t) {
    let vals = [10, 20, 30]

    vals.reverse

    t.equal(vals, [30, 20, 10])
  })

  t.test('Array.drop', fn (t) {
    let count = Counter.new

    drop([TrackDrop.new(count), TrackDrop.new(count)])

    t.equal(count.value, 2)
  })

  t.test('Array.contains?', fn (t) {
    t.true([10, 20].contains?(10))
    t.true([10, 20].contains?(20))
    t.false(([] as Array[Int]).contains?(30))
    t.false([10, 20].contains?(30))
  })

  t.test('Array.get', fn (t) {
    t.equal([10].get(0), Result.Ok(10))
    t.equal([10.5].get(0), Result.Ok(10.5))
    t.equal(['foo'].get(0), Result.Ok('foo'))
    t.equal([10].get(10), Result.Error(OutOfBounds.new(index: 10, size: 1)))
  })

  t.test('Array.get_mut', fn (t) {
    t.equal([(1, 2)].get_mut(0), Result.Ok(mut (1, 2)))
    t.equal(
      [(1, 2)].get_mut(10),
      Result.Error(OutOfBounds.new(index: 10, size: 1)),
    )
  })

  t.test('Array.set', fn (t) {
    let count = Counter.new
    let drops = [TrackDrop.new(count)]
    let vals = [10, 20, 30]

    vals.set(1, 40)
    drops.set(0, TrackDrop.new(count))

    t.equal(vals, [10, 40, 30])
    t.equal(count.value, 1)
  })

  t.panic('Array.set with an invalid index', fn { [10].set(1, 20) })

  t.test('Array.clone', fn (t) {
    let a = [10, 20, 30]
    let b = a.clone

    t.equal(a, b)
  })

  t.test('Array.==', fn (t) {
    t.equal([10], [10])
    t.not_equal([10], [20])
  })

  t.test('Array.hash', fn (t) {
    let vals = [10, 20]

    t.equal(hash(vals), hash(vals))
  })

  t.test('Array.fmt', fn (t) {
    t.equal(fmt([] as Array[Int]), '[]')
    t.equal(fmt([10]), '[10]')
    t.equal(fmt([10, 20]), '[10, 20]')
  })

  t.test('Array.sort', fn (t) {
    let nums = [56, 20, 28, 71, 42, 49, 1, 59, 19, 18, 27, 6, 31, 89, 32]
    let people = [
      Person(name: 'Eve', age: 22),
      Person(name: 'Steve', age: 22),
      Person(name: 'Alice', age: 20),
      Person(name: 'Bob', age: 21),
    ]

    nums.sort
    people.sort

    t.equal(nums, [1, 6, 18, 19, 20, 27, 28, 31, 32, 42, 49, 56, 59, 71, 89])
    t.equal(
      people.iter.map(fn (p) { p.name }).to_array,
      ['Alice', 'Bob', 'Eve', 'Steve'],
    )
  })

  t.test('Array.sort_by', fn (t) {
    let nums = [56, 20, 28, 71, 42, 49, 1, 59, 19, 18, 27, 6, 31, 89, 32]

    nums.sort_by(fn (a, b) { b.cmp(a) })
    t.equal(nums, [89, 71, 59, 56, 49, 42, 32, 31, 28, 27, 20, 19, 18, 6, 1])
  })

  t.test('Array.last', fn (t) {
    t.equal([].last as Option[Int], Option.None)
    t.equal([10, 20].last, Option.Some(20))
  })

  t.test('Array.last_mut', fn (t) {
    let exp = (2, 3)

    t.equal(([] as Array[(Int, Int)]).last_mut, Option.None)
    t.equal([(1, 2), (2, 3)].last_mut, Option.Some(mut exp))
  })

  t.test('Array.reserve', fn (t) {
    let vals: Array[Int] = []

    t.equal(vals.capacity, 0)

    vals.reserve(2)
    t.equal(vals.capacity, 2)
  })

  t.test('Array.reserve with a size of zero', fn (t) {
    let vals = [10]

    vals.reserve(0)
    t.equal(vals.capacity, 1)
  })

  t.test('Array.reserve with a negative size', fn (t) {
    let a = [10]
    let b: Array[Int] = []

    a.reserve(-1)
    b.reserve(-1)
    t.equal(a.capacity, 1)
    t.equal(b.capacity, 0)
  })

  t.test('Array.reserve with enough remaining capacity', fn (t) {
    let vals = [10]

    vals.reserve(4)
    vals.reserve(4)
    t.equal(vals.capacity, 5)
  })

  t.test('Array.reserve with a small extra size', fn (t) {
    let vals = [10, 20, 30, 40]

    vals.reserve(1)
    t.equal(vals.capacity, 8)
  })

  t.test('Array.reserve_exact', fn (t) {
    let vals = [10]

    vals.reserve_exact(2)
    t.equal(vals.capacity, 3)
    t.equal(vals.size, 1)

    vals.reserve_exact(2)
    t.equal(vals.capacity, 3)

    vals.reserve_exact(-1)
    t.equal(vals.capacity, 3)
  })

  t.test('Array.insert', fn (t) {
    let vals = []

    vals.insert(0, 10)
    t.equal(vals, [10])

    vals.insert(0, 20)
    t.equal(vals, [20, 10])

    vals.insert(1, 30)
    t.equal(vals, [20, 30, 10])

    vals.insert(3, 100)
    t.equal(vals, [20, 30, 10, 100])
  })

  t.panic('Array.insert with an invalid positive index', fn {
    let vals = [10]

    vals.insert(5, 20)
  })

  t.panic('Array.insert with an invalid negative index', fn {
    let vals = [10]

    vals.insert(-5, 20)
  })

  t.test('Array.index_of', fn (t) {
    t.equal([].index_of(10), Option.None)
    t.equal([10, 20, 30].index_of(20), Option.Some(1))
    t.equal([10, 20, 30].index_of(40), Option.None)
  })

  t.test('IntoIter.next', fn (t) {
    let vals = [10, 20].into_iter

    t.equal(vals.next, Option.Some(10))
    t.equal(vals.next, Option.Some(20))
    t.equal(vals.next, Option.None)
  })

  t.test('IntoIter.drop', fn (t) {
    let count = Counter.new

    drop([TrackDrop.new(count), TrackDrop.new(count)].into_iter)

    t.equal(count.value, 2)
  })
}
