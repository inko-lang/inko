import std.env
import std.fs.file (ReadOnlyFile, ReadWriteFile, WriteOnlyFile)
import std.fs.path (Path)
import std.io (SeekFrom)
import std.test (Tests)
import std.time (DateTime, Duration)

fn write(string: String, to: ref Path) {
  let file = WriteOnlyFile.new(to.clone).get

  file.write(string).get
}

fn read(from: ref Path) -> String {
  let file = ReadOnlyFile.new(from.clone).get
  let bytes = ByteArray.new
  let _ = file.read_all(bytes).get

  bytes.into_string
}

fn pub tests(t: mut Tests) {
  t.test('ReadOnlyFile.new', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    t.true(ReadOnlyFile.new(path.clone).error?)

    write('test', to: path)

    t.true(ReadOnlyFile.new(path.clone).ok?)

    path.remove_file.get
  })

  t.test('ReadOnlyFile.read', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    write('test', to: path)

    let handle = ReadOnlyFile.new(path.clone).get
    let bytes = ByteArray.new
    let _ = handle.read(into: bytes, size: 4).get

    t.equal(bytes.into_string, 'test')

    path.remove_file.get
  })

  t.ok('ReadOnlyFile.seek', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    write('test', to: path)

    let handle = try ReadOnlyFile.new(path.clone)
    let bytes = ByteArray.new
    let _ = try handle.seek(SeekFrom.Start(1))
    let _ = try handle.read(into: bytes, size: 4)

    t.equal(bytes.into_string, 'est')
    t.equal(handle.seek(SeekFrom.Current(0)), Result.Ok(4))

    try path.remove_file
    Result.Ok(nil)
  })

  t.ok('ReadOnlyFile.metadata', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    write('test', to: path)

    let today = DateTime.utc - Duration.from_secs(60)
    let handle = try ReadOnlyFile.new(path.clone)
    let meta = try handle.metadata

    t.true(meta.size >= 4)
    t.true(meta.type.file?)
    t.true(meta.modified_at >= today)
    t.true(meta.accessed_at >= today)

    match meta.created_at {
      case Some(v) -> t.true(v >= today)
      case _ -> {}
    }

    try path.remove_file
    Result.Ok(nil)
  })

  t.ok('WriteOnlyFile.new', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    {
      let file = try WriteOnlyFile.new(path.clone)

      try file.write('hello')
      try file.flush

      t.equal(read(path), 'hello')
    }

    # Opening an existing file should truncate it.
    try WriteOnlyFile.new(path.clone)

    t.equal(read(path), '')
    path.remove_file
  })

  t.ok('WriteOnlyFile.append', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    {
      let file = try WriteOnlyFile.append(path.clone)

      try file.write('hello')
      try file.flush
    }

    {
      let file = try WriteOnlyFile.append(path.clone)

      try file.write('world')
      try file.flush
    }

    t.equal(read(path), 'helloworld')
    path.remove_file
  })

  t.test('WriteOnlyFile.write', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    {
      let handle = WriteOnlyFile.new(path.clone).get

      handle.write('test'.to_byte_array).get
    }

    {
      let handle = WriteOnlyFile.append(path.clone).get

      handle.write('ing'.to_byte_array).get
    }

    t.equal(read(path), 'testing')

    path.remove_file.get
  })

  t.test('WriteOnlyFile.flush', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')
    let handle = WriteOnlyFile.new(path.clone).get

    handle.write('test').get

    t.equal(handle.flush, Result.Ok(nil))
    t.equal(read(path), 'test')

    path.remove_file.get
  })

  t.test('WriteOnlyFile.seek', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')
    let handle = WriteOnlyFile.new(path.clone).get
    let _ = handle.write('test').get
    let _ = handle.seek(SeekFrom.Start(1)).get
    let _ = handle.write('ing').get

    t.equal(read(path), 'ting')

    path.remove_file.get
  })

  t.ok('WriteOnlyFile.metadata', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')
    let today = DateTime.utc - Duration.from_secs(60)
    let handle = try WriteOnlyFile.new(path.clone)

    try handle.write('test')

    let meta = try handle.metadata

    t.true(meta.size >= 4)
    t.true(meta.type.file?)
    t.true(meta.modified_at >= today)
    t.true(meta.accessed_at >= today)

    match meta.created_at {
      case Some(v) -> t.true(v >= today)
      case _ -> {}
    }

    try path.remove_file
    Result.Ok(nil)
  })

  t.ok('ReadWriteFile.new', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    {
      let file = try ReadWriteFile.new(path.clone)
      let buf = ByteArray.new

      try file.write('hello')
      try file.flush
      try file.seek(SeekFrom.Start(0))
      try file.read_all(buf)

      t.equal(buf.into_string, 'hello')
    }

    # Opening an existing file _shouldn't_ truncate it.
    let file = try ReadWriteFile.new(path.clone)
    let buf = ByteArray.new

    try file.read_all(buf)

    t.equal(buf.into_string, 'hello')
    path.remove_file
  })

  t.test('ReadWriteFile.append', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    t.true(ReadWriteFile.append(path.clone).ok?)
    t.true(ReadWriteFile.append(path.clone).ok?)

    path.remove_file.get
  })

  t.test('ReadWriteFile.read', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    write('test', to: path)

    let handle = ReadWriteFile.new(path.clone).get
    let bytes = ByteArray.new
    let _ = handle.read(bytes, size: 4).get

    t.equal(bytes.to_string, 'test')

    path.remove_file.get
  })

  t.test('ReadWriteFile.write', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')

    {
      let handle = ReadWriteFile.new(path.clone).get

      handle.write('test'.to_byte_array).get
    }

    {
      let handle = ReadWriteFile.append(path.clone).get

      handle.write('ing'.to_byte_array).get
    }

    t.equal(read(path), 'testing')

    path.remove_file.get
  })

  t.test('ReadWriteFile.flush', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')
    let handle = ReadWriteFile.new(path.clone).get

    handle.write('test').get

    t.equal(handle.flush, Result.Ok(nil))
    t.equal(read(path), 'test')

    path.remove_file.get
  })

  t.test('ReadWriteFile.seek', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')
    let handle = ReadWriteFile.new(path.clone).get
    let _ = handle.write('test').get
    let _ = handle.seek(SeekFrom.Start(1)).get
    let _ = handle.write('ing').get

    t.equal(read(path), 'ting')

    path.remove_file.get
  })

  t.ok('ReadWriteFile.metadata', fn (t) {
    let path = env.temporary_directory.join('inko-test-${t.id}')
    let today = DateTime.utc - Duration.from_secs(60)
    let handle = try ReadWriteFile.new(path.clone)

    try handle.write('test')

    let meta = try handle.metadata

    t.true(meta.size >= 4)
    t.true(meta.type.file?)
    t.true(meta.modified_at >= today)
    t.true(meta.accessed_at >= today)

    match meta.created_at {
      case Some(v) -> t.true(v >= today)
      case _ -> {}
    }

    try path.remove_file
    Result.Ok(nil)
  })
}
