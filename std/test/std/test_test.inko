import helpers::(fmt)
import std::env
import std::fs::path::Path
import std::io::Write
import std::sys
import std::test::(Filter, Plain, Test, Tests)
import std::time::Duration

class Buffer {
  let @bytes: mut ByteArray

  fn static new(bytes: mut ByteArray) -> Buffer {
    Buffer { @bytes = bytes}
  }
}

impl Write for Buffer {
  fn pub mut write_string(string: String) -> Result[Int, Never] {
    let bytes = string.to_byte_array
    let size = bytes.length

    @bytes.append(bytes)
    Result.Ok(size)
  }

  fn pub mut write_bytes(bytes: ref ByteArray) -> Result[Int, Never] {
    @bytes.append(bytes.clone)
    Result.Ok(bytes.length)
  }

  fn pub mut flush -> Result[Nil, Never] {
    Result.Ok(nil)
  }
}

fn pub tests(t: mut Tests) {
  t.test('Plain.passed without colors') fn (t) {
    let buff = ByteArray.new
    let plain = Plain.new(out: Buffer.new(buff), colors: false)
    let test = Test
      .new(id: 1, name: 'foo', path: Path.new(''), line: 42, code: fn (t) {})

    plain.passed(test)

    t.equal(buff.to_string, '.')
  }

  t.test('Plain.passed with colors') fn (t) {
    let buff = ByteArray.new
    let plain = Plain.new(out: Buffer.new(buff), colors: true)
    let test = Test
      .new(id: 1, name: 'foo', path: Path.new(''), line: 42, code: fn (t) {})

    plain.passed(test)

    t.equal(buff.to_string, "\e[32m.\e[0m")
  }

  t.test('Plain.failed without colors') fn (t) {
    let buff = ByteArray.new
    let plain = Plain.new(out: Buffer.new(buff), colors: false)
    let test = Test
      .new(id: 1, name: 'foo', path: Path.new(''), line: 42, code: fn (t) {})

    plain.failed(test)

    t.equal(buff.to_string, 'F')
  }

  t.test('Plain.failed with colors') fn (t) {
    let buff = ByteArray.new
    let plain = Plain.new(out: Buffer.new(buff), colors: true)
    let test = Test
      .new(id: 1, name: 'foo', path: Path.new(''), line: 42, code: fn (t) {})

    plain.failed(test)

    t.equal(buff.to_string, "\e[31mF\e[0m")
  }

  t.test('Plain.finished without tests') fn (t) {
    let buff = ByteArray.new
    let plain = Plain.new(out: Buffer.new(buff), colors: false)

    t.equal(plain.finished(duration: Duration.from_secs(1), seed: 42), true)
    t.equal(
      buff.to_string,
      "\nFinished running 0 tests in 1.0 seconds, 0 failures, seed: 42\n"
    )
  }

  t.test('Plain.finished without failures') fn (t) {
    let buff = ByteArray.new
    let plain = Plain.new(out: Buffer.new(buff), colors: false)
    let test = Test
      .new(id: 1, name: 'foo', path: Path.new(''), line: 42, code: fn (t) {})

    plain.passed(test)

    t.equal(plain.finished(duration: Duration.from_secs(1), seed: 42), true)
    t.equal(
      buff.to_string,
      ".\nFinished running 1 tests in 1.0 seconds, 0 failures, seed: 42\n"
    )
  }

  t.test('Plain.finished with failures') fn (t) {
    let buff = ByteArray.new
    let plain = Plain.new(out: Buffer.new(buff), colors: false)
    let test = Test.new(
      id: 1,
      name: 'foo',
      path: Path.new('foo.inko'),
      line: 42,
      code: fn (t) {}
    )

    test.true(false)
    test.true(false)
    plain.failed(test)

    t.equal(plain.finished(duration: Duration.from_secs(1), seed: 42), false)

    let out = buff.to_string

    t.true(out.contains?('Failures:'))
    t.true(out.contains?('Test: foo'))
    t.true(
      out.contains?(
        'Finished running 1 tests in 1.0 seconds, 2 failures, seed: 42'
      )
    )
  }

  t.test('Tests.new') fn (t) {
    let tests = Tests.new

    t.equal(tests.concurrency, sys.cpu_cores)
  }

  t.test('Filter.from_string') fn (t) {
    let exe = env.executable.unwrap

    t.equal(Filter.from_string(''), Filter.None)
    t.equal(Filter.from_string('foo'), Filter.Pattern('foo'))
    t.equal(Filter.from_string(exe.to_string), Filter.Location(exe.clone))
  }

  t.test('Filter.==') fn (t) {
    t.equal(Filter.None, Filter.None)
    t.equal(Filter.Pattern('foo'), Filter.Pattern('foo'))
    t.equal(Filter.Location(Path.new('foo')), Filter.Location(Path.new('foo')))

    t.not_equal(Filter.None, Filter.Pattern('foo'))
    t.not_equal(Filter.Pattern('foo'), Filter.Pattern('bar'))
    t.not_equal(
      Filter.Location(Path.new('foo')),
      Filter.Location(Path.new('bar'))
    )
  }

  t.test('Filter.fmt') fn (t) {
    t.equal(fmt(Filter.None), 'None')
    t.equal(fmt(Filter.Pattern('foo')), 'Pattern("foo")')
    t.equal(fmt(Filter.Location(Path.new('foo'))), 'Location("foo")')
  }
}
