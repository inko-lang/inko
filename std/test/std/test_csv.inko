import std.bytes (Bytes)
import std.csv (Error, ErrorKind, Generator, Parser, Separator)
import std.fmt (fmt)
import std.io (Buffer, Error as IoError, Write)
import std.test (Tests)

type Output {
  let @buffer: ByteArray
  let mut @flushed: Bool

  fn static new -> Output {
    Output(buffer: ByteArray.new, flushed: false)
  }
}

impl Write[IoError] for Output {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, IoError] {
    @buffer.append(bytes)
    Result.Ok(nil)
  }

  fn pub mut flush -> Result[Nil, IoError] {
    @flushed = true
    Result.Ok(nil)
  }
}

type BrokenOutput {
  let mut @writes: Int

  fn static new -> BrokenOutput {
    BrokenOutput(0)
  }
}

impl Write[IoError] for BrokenOutput {
  fn pub mut write[B: Bytes](bytes: ref B) -> Result[Nil, IoError] {
    @writes += 1
    Result.Error(IoError.InvalidArgument)
  }

  fn pub mut flush -> Result[Nil, IoError] {
    Result.Ok(nil)
  }
}

fn parse(input: String) -> Result[Array[Array[String]], Error[Nil]] {
  let rows = []
  let parser = Parser.new(Buffer.new(input))

  loop {
    let row = []

    while try parser.column? { row.push(try parser.column) }

    if row.size > 0 { rows.push(row) }

    if (try parser.next_line).false? { break }
  }

  Result.Ok(rows)
}

fn iter(input: String) -> Result[Array[Array[String]], Error[Nil]] {
  Parser.new(Buffer.new(input)).try_reduce([], fn (rows, res) {
    rows.push(try res)
    Result.Ok(rows)
  })
}

fn eof_error(offset: Int) -> Error[Nil] {
  Error(kind: ErrorKind.EndOfInput, offset: offset)
}

fn unexpected(offset: Int) -> Error[Nil] {
  Error(kind: ErrorKind.UnexpectedCharacter, offset: offset)
}

fn pub tests(t: mut Tests) {
  t.test('Error.to_string', fn (t) {
    let e1 = Error(kind: ErrorKind.Read(IoError.NotFound), offset: 0)
    let e2 = Error(kind: ErrorKind.UnexpectedCharacter, offset: 0)
      as Error[IoError]

    t.equal(
      e1.to_string,
      'failed to read more bytes at byte offset 0: '
        + "the resource isn't found",
    )
    t.equal(e2.to_string, 'the character at byte offset 0 is unexpected')
  })

  t.test('Error.fmt', fn (t) {
    t.equal(
      fmt(Error(kind: ErrorKind.Read(IoError.NotFound), offset: 0)),
      'Error(kind: Read(NotFound), offset: 0)',
    )
    t.equal(
      fmt(Error(kind: ErrorKind.MissingColumn, offset: 0) as Error[IoError]),
      'Error(kind: MissingColumn, offset: 0)',
    )
    t.equal(
      fmt(
        Error(kind: ErrorKind.UnexpectedCharacter, offset: 0) as Error[IoError],
      ),
      'Error(kind: UnexpectedCharacter, offset: 0)',
    )
  })

  t.test('Error.==', fn (t) {
    t.equal(
      Error(kind: ErrorKind.Read(IoError.NotFound), offset: 0),
      Error(kind: ErrorKind.Read(IoError.NotFound), offset: 0),
    )
    t.equal(
      Error(kind: ErrorKind.MissingColumn, offset: 0) as Error[IoError],
      Error(kind: ErrorKind.MissingColumn, offset: 0) as Error[IoError],
    )
    t.equal(
      Error(kind: ErrorKind.UnexpectedCharacter, offset: 0) as Error[IoError],
      Error(kind: ErrorKind.UnexpectedCharacter, offset: 0) as Error[IoError],
    )

    t.not_equal(
      Error(kind: ErrorKind.Read(IoError.NotFound), offset: 0),
      Error(kind: ErrorKind.Read(IoError.NotFound), offset: 1),
    )
    t.not_equal(
      Error(kind: ErrorKind.Read(IoError.NotFound), offset: 0),
      Error(kind: ErrorKind.Read(IoError.InvalidArgument), offset: 0),
    )
    t.not_equal(
      Error(kind: ErrorKind.MissingColumn, offset: 0) as Error[IoError],
      Error(kind: ErrorKind.UnexpectedCharacter, offset: 0) as Error[IoError],
    )
  })

  t.test('Parser.new', fn (t) {
    t.equal(Parser.new(Buffer.new('foo')).separator, 0x2C)
  })

  t.test('Parser.separator=', fn (t) {
    let parser = Parser.new(Buffer.new('foo'))

    parser.separator = Separator.Tab
    t.equal(parser.separator, 0x9)
  })

  t.test('Parser.skip_line', fn (t) {
    let parser = Parser.new(Buffer.new('foo\nbar'))

    t.equal(parser.skip_line, Result.Ok(nil))
    t.equal(parser.peek, Result.Ok(Option.Some(0x62)))
  })

  t.test('Parser.next_line', fn (t) {
    let parser = Parser.new(Buffer.new('foo\nbar'))

    t.equal(
      parser.next_line,
      Result.Error(Error(kind: ErrorKind.UnexpectedCharacter, offset: 0)),
    )
    t.equal(parser.column, Result.Ok('foo'))
    t.equal(parser.next_line, Result.Ok(true))

    t.equal(parser.column, Result.Ok('bar'))
    t.equal(parser.next_line, Result.Ok(false))
  })

  t.test('Parser.column?', fn (t) {
    let parser = Parser.new(Buffer.new('foo\n'))

    t.equal(parser.column?, Result.Ok(true))
    t.equal(parser.column, Result.Ok('foo'))
    t.equal(parser.column?, Result.Ok(false))
  })

  t.test('Parser.column', fn (t) {
    let parser = Parser.new(Buffer.new('foo'))

    t.equal(parser.column, Result.Ok('foo'))
    t.equal(
      parser.column,
      Result.Error(Error(kind: ErrorKind.MissingColumn, offset: 3)),
    )
  })

  t.test('Parser.column with different inputs', fn (t) {
    let tests = [
      # Valid inputs
      ('', Result.Ok([])),
      ('\na,b', Result.Ok([['a', 'b']])),
      ('foo,bar', Result.Ok([['foo', 'bar']])),
      ('foo,  bar', Result.Ok([['foo', '  bar']])),
      ('foo,bar ', Result.Ok([['foo', 'bar ']])),
      (' foo , bar ', Result.Ok([[' foo ', ' bar ']])),
      ('foo,"bar"', Result.Ok([['foo', 'bar']])),
      ('"foo",bar', Result.Ok([['foo', 'bar']])),
      ('"foo","bar"', Result.Ok([['foo', 'bar']])),
      ('foo\n', Result.Ok([['foo']])),
      ('foo\nbar', Result.Ok([['foo'], ['bar']])),
      ('foo\r\n', Result.Ok([['foo']])),
      ('foo\r\nbar', Result.Ok([['foo'], ['bar']])),
      ('foo,', Result.Ok([['foo']])),
      ('"foo",', Result.Ok([['foo']])),
      ('"a""b",c', Result.Ok([['a"b', 'c']])),
      ('a,b\n\nc,d', Result.Ok([['a', 'b'], ['c', 'd']])),

      # Invalid inputs
      ('foo,\r', Result.Error(eof_error(5))),
      ('"foo', Result.Error(eof_error(4))),
      (' "foo"', Result.Error(unexpected(1))),
      ('"foo", "bar"', Result.Error(unexpected(7))),
      ('"foo",bar"', Result.Error(unexpected(9))),
      ('"a" "b"', Result.Error(unexpected(3))),
    ]

    for (inp, out) in tests.into_iter { t.equal(parse(inp), out) }
  })

  t.test('Parser.skip_column', fn (t) {
    let parser = Parser.new(Buffer.new('foo,bar'))

    t.equal(parser.skip_column, Result.Ok(nil))
    t.equal(parser.column, Result.Ok('bar'))
  })

  t.test('Parser.skip_columns', fn (t) {
    let parser = Parser.new(Buffer.new('foo,bar,baz'))

    t.equal(parser.skip_columns(2), Result.Ok(nil))
    t.equal(parser.column, Result.Ok('baz'))
  })

  t.test('Parser.offset', fn (t) {
    let parser = Parser.new(Buffer.new('foo,bar,baz'))

    t.equal(parser.offset, 0)

    t.equal(parser.column, Result.Ok('foo'))
    t.equal(parser.offset, 4)

    t.equal(parser.column, Result.Ok('bar'))
    t.equal(parser.offset, 8)

    t.equal(parser.column, Result.Ok('baz'))
    t.equal(parser.offset, 11)
  })

  t.ok('Parser.headers', fn (t) {
    let parser = Parser.new(Buffer.new('foo,bar\n10,20'))
    let map = try parser.headers

    t.equal(map.get('foo'), Result.Ok(0))
    t.equal(map.get('bar'), Result.Ok(1))
    t.equal(parser.column, Result.Ok('10'))
    t.equal(parser.column, Result.Ok('20'))

    Result.Ok(nil)
  })

  t.test('Parser.next', fn (t) {
    let tests = [
      # Valid inputs
      ('', Result.Ok([])),
      ('\na,b', Result.Ok([['a', 'b']])),
      ('foo,bar', Result.Ok([['foo', 'bar']])),
      ('foo,  bar', Result.Ok([['foo', '  bar']])),
      ('foo,bar ', Result.Ok([['foo', 'bar ']])),
      (' foo , bar ', Result.Ok([[' foo ', ' bar ']])),
      ('foo,"bar"', Result.Ok([['foo', 'bar']])),
      ('"foo",bar', Result.Ok([['foo', 'bar']])),
      ('"foo","bar"', Result.Ok([['foo', 'bar']])),
      ('foo\n', Result.Ok([['foo']])),
      ('foo\nbar', Result.Ok([['foo'], ['bar']])),
      ('foo\r\n', Result.Ok([['foo']])),
      ('foo\r\nbar', Result.Ok([['foo'], ['bar']])),
      ('foo,', Result.Ok([['foo']])),
      ('"foo",', Result.Ok([['foo']])),
      ('"a""b",c', Result.Ok([['a"b', 'c']])),
      ('a,b\n\nc,d', Result.Ok([['a', 'b'], ['c', 'd']])),

      # Invalid inputs
      ('foo,\r', Result.Error(eof_error(5))),
      ('"foo', Result.Error(eof_error(4))),
      (' "foo"', Result.Error(unexpected(1))),
      ('"foo", "bar"', Result.Error(unexpected(7))),
      ('"foo",bar"', Result.Error(unexpected(9))),
      ('"a" "b"', Result.Error(unexpected(3))),
    ]

    for (inp, out) in tests { t.equal(iter(inp), out) }
  })

  t.test('Generator.separator', fn (t) {
    let gen = Generator.new(Output.new)

    t.equal(gen.separator_string, ',')
    t.equal(gen.separator_byte, 0x2C)

    gen.separator = Separator.Tab
    t.equal(gen.separator_string, '\t')
    t.equal(gen.separator_byte, 0x9)
  })

  t.test('Generator.write', fn (t) {
    let tests = [
      (Separator.Comma, [[]], ''),
      (Separator.Comma, [['foo']], 'foo\r\n'),
      (Separator.Comma, [['foo', 'bar']], 'foo,bar\r\n'),
      (Separator.Comma, [['foo', 'bar'], ['baz']], 'foo,bar\r\nbaz\r\n'),
      (Separator.Comma, [['foo"bar', 'baz']], '"foo""bar",baz\r\n'),
      (Separator.Comma, [['foo,bar', 'baz']], '"foo,bar",baz\r\n'),
      (Separator.Comma, [['foo\rbar', 'baz']], '"foo\rbar",baz\r\n'),
      (Separator.Comma, [['foo\r\nbar', 'baz']], '"foo\r\nbar",baz\r\n'),
      (Separator.Comma, [['foo\nbar', 'baz']], '"foo\nbar",baz\r\n'),
      (Separator.Comma, [['foo\tbar', 'baz']], 'foo\tbar,baz\r\n'),
      (Separator.Tab, [['foo\tbar', 'baz']], '"foo\tbar"\tbaz\r\n'),
      (Separator.Semicolon, [['foo;bar', 'baz']], '"foo;bar";baz\r\n'),
    ]

    for (sep, inp, out) in tests {
      let gen = Generator.new(Output.new)

      gen.separator = sep

      for row in inp.iter { gen.write(row) }

      t.equal(gen.output.buffer.to_string, out)
    }
  })

  t.test('Generator.write returns errors returned by the stream', fn (t) {
    let gen = Generator.new(BrokenOutput.new)

    t.equal(gen.write(['foo']), Result.Error(IoError.InvalidArgument))
    t.equal(gen.output.writes, 1)
  })

  t.test('Generator.flush', fn (t) {
    let gen = Generator.new(Output.new)

    t.equal(gen.flush, Result.Ok(nil))
    t.true(gen.output.flushed)
  })
}
