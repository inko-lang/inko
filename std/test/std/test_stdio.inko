import std::test::Tests
import std::stdio::(STDERR, STDIN, STDOUT)

fn pub tests(t: mut Tests) {
  t.fork(
    'STDIN.read',
    child: fn {
      let out = STDOUT.new
      let in = STDIN.new
      let bytes = ByteArray.new
      let _ = in.read_all(bytes)
      let _ = out.write_bytes(bytes)
    },
    test: fn (test, process) {
      process.stdin('hello')
      test.equal(process.spawn.stdout, 'hello')
    }
  )

  t.fork(
    'STDOUT.write_bytes',
    child: fn {
      let _ = STDOUT.new.write_bytes('hello'.to_byte_array)
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'hello') }
  )

  t.fork(
    'STDOUT.write_string',
    child: fn {
      let _ = STDOUT.new.write_string('hello')
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'hello') }
  )

  t.fork(
    'STDOUT.print',
    child: fn {
      let _ = STDOUT.new.print('hello')
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, "hello\n") }
  )

  t.fork(
    'STDOUT.flush',
    child: fn {
      let out = STDOUT.new
      let _ = out.write_string('hello')
      let _ = out.flush
    },
    test: fn (test, process) { test.equal(process.spawn.stdout, 'hello') }
  )

  t.fork(
    'STDERR.write_bytes',
    child: fn {
      let _ = STDERR.new.write_bytes('hello'.to_byte_array)
    },
    test: fn (test, process) { test.equal(process.spawn.stderr, 'hello') }
  )

  t.fork(
    'STDERR.write_string',
    child: fn {
      let _ = STDERR.new.write_string('hello')
    },
    test: fn (test, process) { test.equal(process.spawn.stderr, 'hello') }
  )

  t.fork(
    'STDERR.print',
    child: fn {
      let _ = STDERR.new.print('hello')
    },
    test: fn (test, process) { test.equal(process.spawn.stderr, "hello\n") }
  )

  t.fork(
    'STDERR.flush',
    child: fn {
      let out = STDERR.new
      let _ = out.write_string('hello')
      let _ = out.flush
    },
    test: fn (test, process) { test.equal(process.spawn.stderr, 'hello') }
  )
}
