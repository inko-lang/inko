import std.crypto.pem (PemFile)
import std.crypto.x509 (Certificate, PrivateKey)
import std.fmt (fmt)
import std.fs.file (ReadOnlyFile)
import std.io (Buffer)
import std.net.ip (IpAddress)
import std.net.socket (Socket, TcpClient, TcpServer)
import std.net.tls (
  Client, ClientConfig, Server, ServerConfig, ServerConfigError,
)
import std.sync (Future, Promise)
import std.test (Tests)

# A private key of which the content is invalid.
let INVALID_KEY = '
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCyU87LWHj+r1Dj
dZQtA0EWy5TmBjf8Rr5tv4eiSolFYAD1kfyelutxj6mMzgk1cvePpC8npPzZRhwO
/8vGZshRw2D0Vdgq8XN8B6G35S4PhhdgHsvGMSX6s5EBk4Xj730YKR9NaSpyHSIa
LEYcmM3Ryv+iKEwnEPw+/oFHeW56J197dWiLIHEDM8oC82lX5MT/cYm2QG4CsC/7
TCDDT1sEVhkdPB60Scks/Ln5ACsWYInH67AvXWDOaBSebBRR+wFGckgu2kldahIc
e0ejawKa5xgvOX00JmQyigDwqm3NMxjdGOg7y27aNWw8Vbo/oRDif775DvtNIn9C
1nJB8wNjAgMBAAECggEAFuAJo2u7yE6HQvOmvdLF4IgzQgHjNaEs4AQqgHGCRAbJ
fgwrinu+mQh+OI8yKYvlYM+FXaxcOPzgMDZflpmXBxICgmVD/6zjDQfSQWDh3zZA
EmGbmdayfK3YeIogKeSN40cHJRV2pJZtyktf9Ql5ls4CVnPyjNewxoiRidsfBlvc
IoCRjiTD6+MHOQjp4AzwVvbXH1Sr7OsngA4glQJjFlXllyVYQNXBr1sWTVl3TS2L
OQfqYzHWlRtty88z7ExK3D03Jz0PD7qWtTwgJkq1ON+PjgCf7rMvZbVmCoUgX759
LLxY1NE6ogdoRlPyZG3fvSfmxo2PWOqawboZMvirAQKBgQDVwkYwlbY00XuHA4UF
bGwTyk5Yp0/DVSR4jZyAJN6J5xln0JUWYKeps8kxLfDlPgmn6qIaine9Ewf1D9qt
DGr19mzEHzP07OBRo0l34XE5WUMvV4ter3swwmI5w/ysgds7Mz7xA9a69ukF/7SW
C+2RiVW7hJs1pydQw7+NY9YIYwKBgQDVkRv4tvmITtfPpVjAkw0gPIQ2WLw4uIvk
PIX/A58dg952ga+C4MZ7OFtcKI7CF7anr0gCNdGQS6I3SA18YS49U/zycuzPh9v7
lcIMV+R0Wvo2B6QIGJpt7FzfZBXGdv/ft5l+MII3jpoGqGu1K3Ifj/zUrDlUJDQq
ivrkH+CJAQKBgQDFcbCRugfWW9TlDhw1uUNPOGQLwWeMvr10WSHAv82KxZsS6Hh9
dgQIXZeuRIgpx5b1smXPbC1TyRtlgiJ0C29VCCzJLyU3zAEbh18aS3PhDBFhzlRe
vmpkzHgccWqYEU5mLVyrFOeoRN9S+jFdE2F6N8en8MHI2kAXeugZeqk9jwKBgCmV
pMWsEzCIcZs8DekJeR/SyMewRY4h2RNq+YhrUxszJykaHWu1itBJa/io6QtABM/n
4HSVuCWJpJ9xBzc10QQeC33GBPhv8tStF2jB4HkLkfbdTAJLkB5hTMAuw9KuLyqH
-----END PRIVATE KEY-----
'

# A certificate of which the content is invalid.
#
# This certificate and its private key are generated using the following
# configuration file:
#
# ```
# [req]
# distinguished_name = req_distinguished_name
# x509_extensions = v3_req
# prompt = no
# [req_distinguished_name]
# C = US
# ST = VA
# L = SomeCity
# O = MyCompany
# OU = MyDivision
# CN = localhost
# [v3_req]
# keyUsage = critical, digitalSignature, keyAgreement
# extendedKeyUsage = serverAuth
# subjectAltName = DNS:localhost,IP:127.0.0.1,IP:::1
# ```
#
# And the following command:
#
# ```
# openssl req -x509 -newkey rsa:4096 -days 36500 -noenc \
#   -keyout example.com.key -out example.com.crt -config req.cnf
# ```
let INVALID_CERT = '
-----BEGIN CERTIFICATE-----
MIIDvDCCAqSgAwIBAgIUBwbzzsn/P9HmSv1o2tAoIH6ZYE0wDQYJKoZIhvcNAQEL
BQAwaTELMAkGA1UEBhMCTkwxEDAOBgNVBAgMB0V4YW1wbGUxEDAOBgNVBAcMB0V4
YW1wbGUxEDAOBgNVBAoMB0V4YW1wbGUxEDAOBgNVBAsMB2V4YW1wbGUxEjAQBgNV
BAMMCWxvY2FsaG9zdDAeFw0yNDA3MTcxMzA3MDVaFw0yNTA3MTcxMzA3MDVaMGkx
CzAJBgNVBAYTAk5MMRAwDgYDVQQIDAdFeGFtcGxlMRAwDgYDVQQHDAdFeGFtcGxl
MRAwDgYDVQQKDAdFeGFtcGxlMRAwDgYDVQQLDAdleGFtcGxlMRIwEAYDVQQDDAls
b2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyU87LWHj+
r1DjdZQtA0EWy5TmBjf8Rr5tv4eiSolFYAD1kfyelutxj6mMzgk1cvePpC8npPzZ
-----END CERTIFICATE-----
'

# A valid private key. Do not actually use this key outside of this test suite.
let VALID_KEY = '
-----BEGIN PRIVATE KEY-----
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
Gsn/x5Bkk4wovpT5nths8I2Rd3sWoQ==
-----END PRIVATE KEY-----
'

# A valid certificate. Do not actually use this key outside of this test suite.
let VALID_CERT = '
-----BEGIN CERTIFICATE-----
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
k0pvsPWTGNAO69ym
-----END CERTIFICATE-----
'

type async DummyServer {
  let @socket: TcpServer
  let @config: ServerConfig

  fn static new -> Result[(DummyServer, Int), String] {
    let conf = recover {
      try ServerConfig
        .new(certificate(VALID_CERT), private_key(VALID_KEY))
        .map_error(fn (e) { 'failed to create the server config: ${e}' })
    }

    # We bind to port zero so we get a random port number, such that we don't
    # accidentally pick one that's already in use.
    let sock = recover {
      try TcpServer.new(ip: IpAddress.v4(0, 0, 0, 0), port: 0).map_error(
        fn (e) { 'failed to start the server: ${e}' },
      )
    }
    let addr = try sock.local_address.map_error(fn (e) {
      'failed to get the server address: ${e}'
    })

    Result.Ok((DummyServer(sock, conf), addr.port))
  }

  fn async hello {
    # We may encounter an error such as when the client closes the connection.
    # We want to ignore those so we don't terminate the test suite.
    let _ = @socket.accept.then(fn (sock) {
      Server.new(sock, @config).write('hello')
    })
  }

  fn async reply {
    # We may encounter an error such as when the client closes the connection.
    # We want to ignore those so we don't terminate the test suite.
    let _ = @socket.accept.then(fn (sock) {
      let con = Server.new(sock, @config)
      let bytes = ByteArray.new

      try con.read(into: bytes, size: 32)
      con.write(bytes)
    })
  }
}

type async DummyClient {
  fn async connect(
    port: Int,
    output: uni Promise[uni Result[Client[TcpClient], String]],
  ) {
    output.set(recover client(port))
  }

  fn async write(
    port: Int,
    output: uni Promise[uni Result[Client[TcpClient], String]],
  ) {
    let res = recover {
      client(port).then(fn (s) {
        try s.write('hello').map_error(fn (e) { 'write failed: ${e}' })
        Result.Ok(s)
      })
    }

    output.set(res)
  }

  fn async reply(port: Int, output: uni Promise[uni Result[String, String]]) {
    let res = recover {
      client(port).then(fn (s) {
        let buf = ByteArray.new

        try s.read(into: buf, size: 5).map_error(fn (e) { 'read failed: ${e}' })
        Result.Ok(buf.into_string)
      })
    }

    output.set(res)
  }

  fn client(port: Int) -> Result[Client[TcpClient], String] {
    let conf = try client_config
    let sock = try TcpClient.new([IpAddress.v4(127, 0, 0, 1)], port).map_error(
      fn (e) { 'failed to connect: ${e}' },
    )

    Client.new(sock, conf, name: 'localhost').ok_or('invalid server name')
  }
}

fn connect(port: Int) -> Result[TcpClient, String] {
  TcpClient.new([IpAddress.v4(127, 0, 0, 1)], port).map_error(fn (e) {
    'failed to connect to the server: ${e}'
  })
}

fn certificate(data: String) -> Certificate {
  let reader = PemFile.new(Buffer.new(data))

  match reader.next {
    case Some(Ok(Certificate(cert))) -> cert
    case _ -> panic('the certificate data is invalid')
  }
}

fn private_key(data: String) -> PrivateKey {
  let reader = PemFile.new(Buffer.new(data))

  match reader.next {
    case Some(Ok(PrivateKey(cert))) -> cert
    case _ -> panic('the private key data is invalid')
  }
}

fn client_config -> Result[ClientConfig, String] {
  ClientConfig.with_certificate(certificate(VALID_CERT)).ok_or(
    'failed to create the client configuration',
  )
}

fn server_config -> Result[ServerConfig, String] {
  ServerConfig.new(certificate(VALID_CERT), private_key(VALID_KEY)).map_error(
    fn (e) { e.to_string },
  )
}

fn dummy_socket -> Result[Socket, String] {
  Socket.stream(ipv6: false).map_error(fn (e) { e.to_string })
}

fn accept(socket: mut TcpServer) -> Result[Server[TcpClient], String] {
  let conf = try server_config
  let server = Server.new(
    try socket.accept.map_error(fn (e) { 'accept failed: ${e}' }),
    conf,
  )

  Result.Ok(server)
}

fn listener -> Result[(TcpServer, Int), String] {
  let sock = try TcpServer.new(ip: IpAddress.v4(0, 0, 0, 0), port: 0).map_error(
    fn (e) { 'failed to start the server: ${e}' },
  )
  let addr = try sock.local_address.map_error(fn (e) {
    'failed to get the server address: ${e}'
  })

  Result.Ok((sock, addr.port))
}

fn pub tests(t: mut Tests) {
  t.test('ServerConfigError.to_string', fn (t) {
    t.false(ServerConfigError.InvalidCertificate.to_string.empty?)
    t.false(ServerConfigError.InvalidPrivateKey.to_string.empty?)
  })

  t.test('ServerConfigError.fmt', fn (t) {
    t.equal(fmt(ServerConfigError.InvalidCertificate), 'InvalidCertificate')
    t.equal(fmt(ServerConfigError.InvalidPrivateKey), 'InvalidPrivateKey')
  })

  t.test('ServerConfigError.==', fn (t) {
    t.equal(
      ServerConfigError.InvalidCertificate,
      ServerConfigError.InvalidCertificate,
    )
    t.equal(
      ServerConfigError.InvalidPrivateKey,
      ServerConfigError.InvalidPrivateKey,
    )
  })

  t.test('ClientConfig.with_certificate with a valid certificate', fn (t) {
    t.true(ClientConfig.with_certificate(certificate(VALID_CERT)).some?)
  })

  t.test('ClientConfig.with_certificate with an invalid certificate', fn (t) {
    t.true(ClientConfig.with_certificate(certificate(INVALID_CERT)).none?)
  })

  t.ok('ClientConfig.clone', fn (t) {
    let a = try client_config
    let b = a.clone

    t.equal(a.raw as Int, b.raw as Int)
    Result.Ok(nil)
  })

  t.test('ServerConfig.new with a valid certificate and private key', fn (t) {
    let cert = certificate(VALID_CERT)
    let key = private_key(VALID_KEY)

    t.true(ServerConfig.new(cert, key).ok?)
  })

  t.test('ServerConfig with an invalid certificate', fn (t) {
    let key = private_key(VALID_KEY)

    t.equal(
      ServerConfig.new(certificate(INVALID_CERT), key).error,
      Option.Some(ServerConfigError.InvalidCertificate),
    )
  })

  t.test('ServerConfig with an invalid private key', fn (t) {
    let cert = certificate(VALID_CERT)

    t.equal(
      ServerConfig.new(cert, private_key(INVALID_KEY)).error,
      Option.Some(ServerConfigError.InvalidPrivateKey),
    )
  })

  t.ok('ServerConfig.clone', fn (t) {
    let a = try server_config
    let b = a.clone

    t.equal(b.raw as Int, a.raw as Int)
    Result.Ok(nil)
  })

  t.ok('Client.new with a valid DNS name as the server name', fn (t) {
    let conf = try client_config
    let sock = try dummy_socket

    t.true(Client.new(sock, conf, name: 'localhost').some?)
    Result.Ok(nil)
  })

  t.ok('Client.new with a valid IP address as the server name', fn (t) {
    let conf = try client_config
    let sock = try dummy_socket

    t.true(Client.new(sock, conf, name: '127.0.0.1').some?)
    Result.Ok(nil)
  })

  t.ok('Client.new with an invalid DNS name as the server name', fn (t) {
    let conf = try client_config
    let sock = try dummy_socket

    t.true(Client.new(sock, conf, name: 'what?!').none?)
    Result.Ok(nil)
  })

  t.ok('Client.new with an invalid IP address as the server name', fn (t) {
    let conf = try client_config
    let sock = try dummy_socket

    t.true(Client.new(sock, conf, name: '1.2.3.4.5').none?)
    Result.Ok(nil)
  })

  t.ok('Client.read', fn (t) {
    let port = match DummyServer.new {
      case Ok((server, port)) -> {
        server.hello
        port
      }
      case Error(e) -> throw e
    }

    let conf = try client_config
    let sock = try connect(port)
    let client = Client.new(sock, conf, name: 'localhost').get
    let bytes = ByteArray.new

    t.equal(client.read(into: bytes, size: 5), Result.Ok(5))
    t.equal(bytes.into_string, 'hello')
    Result.Ok(nil)
  })

  t.ok('Client.write', fn (t) {
    let port = match DummyServer.new {
      case Ok((server, port)) -> {
        server.reply
        port
      }
      case Error(e) -> throw e
    }

    let conf = try client_config
    let sock = try connect(port)
    let client = Client.new(sock, conf, name: 'localhost').get
    let bytes = ByteArray.new

    t.equal(client.write('ping'), Result.Ok(nil))
    t.equal(client.read(into: bytes, size: 4), Result.Ok(4))
    t.equal(bytes.into_string, 'ping')
    Result.Ok(nil)
  })

  t.ok('Client.send_file', fn (t) {
    let port = match DummyServer.new {
      case Ok((server, port)) -> {
        server.reply
        port
      }
      case Error(e) -> throw e
    }

    let conf = try client_config
    let sock = try connect(port)
    let file = try ReadOnlyFile.new('fixtures/hello.txt'.to_path).map_error(
      fn (e) { e.to_string },
    )
    let client = Client.new(sock, conf, name: 'localhost').get
    let bytes = ByteArray.new

    t.equal(try client.send_file(file).map_error(fn (e) { e.to_string }), 6)
    t.equal(client.read(into: bytes, size: 6), Result.Ok(6))
    t.equal(bytes.into_string, 'hello\n')
    Result.Ok(nil)
  })

  t.ok('Client.close', fn (t) {
    let port = match DummyServer.new {
      case Ok((server, port)) -> {
        server.reply
        port
      }
      case Error(e) -> throw e
    }

    let conf = try client_config
    let sock = try connect(port)
    let client = Client.new(sock, conf, name: 'localhost').get

    t.equal(client.close, Result.Ok(nil))
    Result.Ok(nil)
  })

  # Not much to test here, so this test mostly exists to make sure the
  # underlying code doesn't blow up outright.
  t.ok('Server.new', fn (t) {
    let conf = try server_config
    let sock = try dummy_socket
    let server = Server.new(sock, conf)

    t.not_equal(server.state as Int, 0)
    Result.Ok(nil)
  })

  t.ok('Server.close', fn (t) {
    let sock_fut = match Future.new {
      case (future, promise) -> {
        match try listener {
          case (sock, port) -> {
            DummyClient().connect(port, promise)
            (sock, future)
          }
        }
      }
    }

    match sock_fut {
      case (sock, out) -> {
        let server = try accept(sock)

        # There's not really a sensible way we can test close_notify handling as
        # it's timing/ordering sensitive, so we just test that the initial call
        # doesn't fail outright.
        t.equal(server.close, Result.Ok(nil))
        t.true(out.get.ok?)
      }
    }

    Result.Ok(nil)
  })

  t.ok('Server.read', fn (t) {
    let sock_fut = match Future.new {
      case (future, promise) -> {
        match try listener {
          case (sock, port) -> {
            DummyClient().write(port, promise)
            (sock, future)
          }
        }
      }
    }

    match sock_fut {
      case (sock, out) -> {
        let server = try accept(sock)
        let bytes = ByteArray.new

        t.equal(server.read(into: bytes, size: 5), Result.Ok(5))
        t.equal(bytes.into_string, 'hello')
        t.true(out.get.ok?)
      }
    }

    Result.Ok(nil)
  })

  t.ok('Server.write', fn (t) {
    let sock_fut = match Future.new {
      case (future, promise) -> {
        match try listener {
          case (sock, port) -> {
            DummyClient().reply(port, promise)
            (sock, future)
          }
        }
      }
    }

    match sock_fut {
      case (sock, out) -> {
        let server = try accept(sock)

        t.equal(server.write('hello'), Result.Ok(nil))
        t.equal(recover out.get, Result.Ok('hello'))
      }
    }

    Result.Ok(nil)
  })

  t.ok('Server.send_file', fn (t) {
    let sock_fut = match Future.new {
      case (future, promise) -> {
        match try listener {
          case (sock, port) -> {
            DummyClient().reply(port, promise)
            (sock, future)
          }
        }
      }
    }

    let file = try ReadOnlyFile.new('fixtures/hello.txt'.to_path).map_error(
      fn (e) { e.to_string },
    )

    match sock_fut {
      case (sock, out) -> {
        let server = try accept(sock)

        t.equal(try server.send_file(file).map_error(fn (e) { e.to_string }), 6)
        t.equal(recover out.get, Result.Ok('hello'))
      }
    }

    Result.Ok(nil)
  })
}
