import std::test::Tests
import std::crypto::chacha::(ChaCha20, hchacha20, XChaCha20)

fn chacha_test_data -> Array[
  (Array[Int], Array[Int], Int, Array[Int], Array[Int])
] {
  # Each tuple is in the form (key, nonce, counter, input, output)
  [
    # Suncreen text from
    # https://datatracker.ietf.org/doc/html/rfc8439#section-2.4.2.
    (
      [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
        0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
      ],
      [
        00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00
      ],
      1,
      [
        0x4C, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x47,
        0x65, 0x6E, 0x74, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x20, 0x6F, 0x66, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x6F, 0x66,
        0x20, 0x27, 0x39, 0x39, 0x3A, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6F, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79,
        0x6F, 0x75, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x6F, 0x6E, 0x65, 0x20,
        0x74, 0x69, 0x70, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
        0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2C, 0x20, 0x73, 0x75, 0x6E, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6E, 0x20, 0x77, 0x6F, 0x75, 0x6C, 0x64, 0x20,
        0x62, 0x65, 0x20, 0x69, 0x74, 0x2E
      ],
      [
        0x6E, 0x2E, 0x35, 0x9A, 0x25, 0x68, 0xF9, 0x80, 0x41, 0xBA, 0x07, 0x28,
        0xDD, 0x0D, 0x69, 0x81, 0xE9, 0x7E, 0x7A, 0xEC, 0x1D, 0x43, 0x60, 0xC2,
        0x0A, 0x27, 0xAF, 0xCC, 0xFD, 0x9F, 0xAE, 0x0B, 0xF9, 0x1B, 0x65, 0xC5,
        0x52, 0x47, 0x33, 0xAB, 0x8F, 0x59, 0x3D, 0xAB, 0xCD, 0x62, 0xB3, 0x57,
        0x16, 0x39, 0xD6, 0x24, 0xE6, 0x51, 0x52, 0xAB, 0x8F, 0x53, 0x0C, 0x35,
        0x9F, 0x08, 0x61, 0xD8, 0x07, 0xCA, 0x0D, 0xBF, 0x50, 0x0D, 0x6A, 0x61,
        0x56, 0xA3, 0x8E, 0x08, 0x8A, 0x22, 0xB6, 0x5E, 0x52, 0xBC, 0x51, 0x4D,
        0x16, 0xCC, 0xF8, 0x06, 0x81, 0x8C, 0xE9, 0x1A, 0xB7, 0x79, 0x37, 0x36,
        0x5A, 0xF9, 0x0B, 0xBF, 0x74, 0xA3, 0x5B, 0xE6, 0xB4, 0x0B, 0x8E, 0xED,
        0xF2, 0x78, 0x5E, 0x42, 0x87, 0x4D
      ]
    ),
    # Test vectors from
    # https://datatracker.ietf.org/doc/html/rfc8439#appendix-A.2
    (
      Array.filled(with: 0, times: 32),
      Array.filled(with: 0, times: 12),
      0,
      Array.filled(with: 0, times: 64),
      [
        0x76, 0xB8, 0xE0, 0xAD, 0xA0, 0xF1, 0x3D, 0x90, 0x40, 0x5D, 0x6A, 0xE5,
        0x53, 0x86, 0xBD, 0x28, 0xBD, 0xD2, 0x19, 0xB8, 0xA0, 0x8D, 0xED, 0x1A,
        0xA8, 0x36, 0xEF, 0xCC, 0x8B, 0x77, 0x0D, 0xC7, 0xDA, 0x41, 0x59, 0x7C,
        0x51, 0x57, 0x48, 0x8D, 0x77, 0x24, 0xE0, 0x3F, 0xB8, 0xD8, 0x4A, 0x37,
        0x6A, 0x43, 0xB8, 0xF4, 0x15, 0x18, 0xA1, 0x1C, 0xC3, 0x87, 0xB6, 0x69,
        0xB2, 0xEE, 0x65, 0x86
      ]
    ),
    (
      [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
      ],
      [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
      ],
      1,
      [
        0x41, 0x6E, 0x79, 0x20, 0x73, 0x75, 0x62, 0x6D, 0x69, 0x73, 0x73, 0x69,
        0x6F, 0x6E, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x45,
        0x54, 0x46, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x64, 0x65, 0x64, 0x20,
        0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x72,
        0x69, 0x62, 0x75, 0x74, 0x6F, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x70,
        0x75, 0x62, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61,
        0x73, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x6F, 0x72, 0x20, 0x70, 0x61, 0x72,
        0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x6E, 0x20, 0x49, 0x45, 0x54, 0x46,
        0x20, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x74, 0x2D, 0x44, 0x72,
        0x61, 0x66, 0x74, 0x20, 0x6F, 0x72, 0x20, 0x52, 0x46, 0x43, 0x20, 0x61,
        0x6E, 0x64, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
        0x6D, 0x65, 0x6E, 0x74, 0x20, 0x6D, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69,
        0x74, 0x68, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6E,
        0x74, 0x65, 0x78, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x6E, 0x20, 0x49,
        0x45, 0x54, 0x46, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
        0x20, 0x69, 0x73, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x69, 0x64, 0x65, 0x72,
        0x65, 0x64, 0x20, 0x61, 0x6E, 0x20, 0x22, 0x49, 0x45, 0x54, 0x46, 0x20,
        0x43, 0x6F, 0x6E, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6F, 0x6E,
        0x22, 0x2E, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74,
        0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x69, 0x6E, 0x63, 0x6C, 0x75,
        0x64, 0x65, 0x20, 0x6F, 0x72, 0x61, 0x6C, 0x20, 0x73, 0x74, 0x61, 0x74,
        0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x49, 0x45,
        0x54, 0x46, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x2C,
        0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6C, 0x6C, 0x20, 0x61, 0x73, 0x20,
        0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6E, 0x20, 0x61, 0x6E, 0x64, 0x20,
        0x65, 0x6C, 0x65, 0x63, 0x74, 0x72, 0x6F, 0x6E, 0x69, 0x63, 0x20, 0x63,
        0x6F, 0x6D, 0x6D, 0x75, 0x6E, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
        0x73, 0x20, 0x6D, 0x61, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6E,
        0x79, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x6F, 0x72, 0x20, 0x70, 0x6C,
        0x61, 0x63, 0x65, 0x2C, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61,
        0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
        0x20, 0x74, 0x6F
      ],
      [
        0xA3, 0xFB, 0xF0, 0x7D, 0xF3, 0xFA, 0x2F, 0xDE, 0x4F, 0x37, 0x6C, 0xA2,
        0x3E, 0x82, 0x73, 0x70, 0x41, 0x60, 0x5D, 0x9F, 0x4F, 0x4F, 0x57, 0xBD,
        0x8C, 0xFF, 0x2C, 0x1D, 0x4B, 0x79, 0x55, 0xEC, 0x2A, 0x97, 0x94, 0x8B,
        0xD3, 0x72, 0x29, 0x15, 0xC8, 0xF3, 0xD3, 0x37, 0xF7, 0xD3, 0x70, 0x05,
        0x0E, 0x9E, 0x96, 0xD6, 0x47, 0xB7, 0xC3, 0x9F, 0x56, 0xE0, 0x31, 0xCA,
        0x5E, 0xB6, 0x25, 0x0D, 0x40, 0x42, 0xE0, 0x27, 0x85, 0xEC, 0xEC, 0xFA,
        0x4B, 0x4B, 0xB5, 0xE8, 0xEA, 0xD0, 0x44, 0x0E, 0x20, 0xB6, 0xE8, 0xDB,
        0x09, 0xD8, 0x81, 0xA7, 0xC6, 0x13, 0x2F, 0x42, 0x0E, 0x52, 0x79, 0x50,
        0x42, 0xBD, 0xFA, 0x77, 0x73, 0xD8, 0xA9, 0x05, 0x14, 0x47, 0xB3, 0x29,
        0x1C, 0xE1, 0x41, 0x1C, 0x68, 0x04, 0x65, 0x55, 0x2A, 0xA6, 0xC4, 0x05,
        0xB7, 0x76, 0x4D, 0x5E, 0x87, 0xBE, 0xA8, 0x5A, 0xD0, 0x0F, 0x84, 0x49,
        0xED, 0x8F, 0x72, 0xD0, 0xD6, 0x62, 0xAB, 0x05, 0x26, 0x91, 0xCA, 0x66,
        0x42, 0x4B, 0xC8, 0x6D, 0x2D, 0xF8, 0x0E, 0xA4, 0x1F, 0x43, 0xAB, 0xF9,
        0x37, 0xD3, 0x25, 0x9D, 0xC4, 0xB2, 0xD0, 0xDF, 0xB4, 0x8A, 0x6C, 0x91,
        0x39, 0xDD, 0xD7, 0xF7, 0x69, 0x66, 0xE9, 0x28, 0xE6, 0x35, 0x55, 0x3B,
        0xA7, 0x6C, 0x5C, 0x87, 0x9D, 0x7B, 0x35, 0xD4, 0x9E, 0xB2, 0xE6, 0x2B,
        0x08, 0x71, 0xCD, 0xAC, 0x63, 0x89, 0x39, 0xE2, 0x5E, 0x8A, 0x1E, 0x0E,
        0xF9, 0xD5, 0x28, 0x0F, 0xA8, 0xCA, 0x32, 0x8B, 0x35, 0x1C, 0x3C, 0x76,
        0x59, 0x89, 0xCB, 0xCF, 0x3D, 0xAA, 0x8B, 0x6C, 0xCC, 0x3A, 0xAF, 0x9F,
        0x39, 0x79, 0xC9, 0x2B, 0x37, 0x20, 0xFC, 0x88, 0xDC, 0x95, 0xED, 0x84,
        0xA1, 0xBE, 0x05, 0x9C, 0x64, 0x99, 0xB9, 0xFD, 0xA2, 0x36, 0xE7, 0xE8,
        0x18, 0xB0, 0x4B, 0x0B, 0xC3, 0x9C, 0x1E, 0x87, 0x6B, 0x19, 0x3B, 0xFE,
        0x55, 0x69, 0x75, 0x3F, 0x88, 0x12, 0x8C, 0xC0, 0x8A, 0xAA, 0x9B, 0x63,
        0xD1, 0xA1, 0x6F, 0x80, 0xEF, 0x25, 0x54, 0xD7, 0x18, 0x9C, 0x41, 0x1F,
        0x58, 0x69, 0xCA, 0x52, 0xC5, 0xB8, 0x3F, 0xA3, 0x6F, 0xF2, 0x16, 0xB9,
        0xC1, 0xD3, 0x00, 0x62, 0xBE, 0xBC, 0xFD, 0x2D, 0xC5, 0xBC, 0xE0, 0x91,
        0x19, 0x34, 0xFD, 0xA7, 0x9A, 0x86, 0xF6, 0xE6, 0x98, 0xCE, 0xD7, 0x59,
        0xC3, 0xFF, 0x9B, 0x64, 0x77, 0x33, 0x8F, 0x3D, 0xA4, 0xF9, 0xCD, 0x85,
        0x14, 0xEA, 0x99, 0x82, 0xCC, 0xAF, 0xB3, 0x41, 0xB2, 0x38, 0x4D, 0xD9,
        0x02, 0xF3, 0xD1, 0xAB, 0x7A, 0xC6, 0x1D, 0xD2, 0x9C, 0x6F, 0x21, 0xBA,
        0x5B, 0x86, 0x2F, 0x37, 0x30, 0xE3, 0x7C, 0xFD, 0xC4, 0xFD, 0x80, 0x6C,
        0x22, 0xF2, 0x21
      ]
    ),
    (
      [
        0x1C, 0x92, 0x40, 0xA5, 0xEB, 0x55, 0xD3, 0x8A, 0xF3, 0x33, 0x88, 0x86,
        0x04, 0xF6, 0xB5, 0xF0, 0x47, 0x39, 0x17, 0xC1, 0x40, 0x2B, 0x80, 0x09,
        0x9D, 0xCA, 0x5C, 0xBC, 0x20, 0x70, 0x75, 0xC0
      ],
      [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
      ],
      42,
      [
        0x27, 0x54, 0x77, 0x61, 0x73, 0x20, 0x62, 0x72, 0x69, 0x6C, 0x6C, 0x69,
        0x67, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
        0x6C, 0x69, 0x74, 0x68, 0x79, 0x20, 0x74, 0x6F, 0x76, 0x65, 0x73, 0x0A,
        0x44, 0x69, 0x64, 0x20, 0x67, 0x79, 0x72, 0x65, 0x20, 0x61, 0x6E, 0x64,
        0x20, 0x67, 0x69, 0x6D, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x77, 0x61, 0x62, 0x65, 0x3A, 0x0A, 0x41, 0x6C, 0x6C,
        0x20, 0x6D, 0x69, 0x6D, 0x73, 0x79, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x62, 0x6F, 0x72, 0x6F, 0x67, 0x6F, 0x76, 0x65,
        0x73, 0x2C, 0x0A, 0x41, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D,
        0x6F, 0x6D, 0x65, 0x20, 0x72, 0x61, 0x74, 0x68, 0x73, 0x20, 0x6F, 0x75,
        0x74, 0x67, 0x72, 0x61, 0x62, 0x65, 0x2E
      ],
      [
        0x62, 0xE6, 0x34, 0x7F, 0x95, 0xED, 0x87, 0xA4, 0x5F, 0xFA, 0xE7, 0x42,
        0x6F, 0x27, 0xA1, 0xDF, 0x5F, 0xB6, 0x91, 0x10, 0x04, 0x4C, 0x0D, 0x73,
        0x11, 0x8E, 0xFF, 0xA9, 0x5B, 0x01, 0xE5, 0xCF, 0x16, 0x6D, 0x3D, 0xF2,
        0xD7, 0x21, 0xCA, 0xF9, 0xB2, 0x1E, 0x5F, 0xB1, 0x4C, 0x61, 0x68, 0x71,
        0xFD, 0x84, 0xC5, 0x4F, 0x9D, 0x65, 0xB2, 0x83, 0x19, 0x6C, 0x7F, 0xE4,
        0xF6, 0x05, 0x53, 0xEB, 0xF3, 0x9C, 0x64, 0x02, 0xC4, 0x22, 0x34, 0xE3,
        0x2A, 0x35, 0x6B, 0x3E, 0x76, 0x43, 0x12, 0xA6, 0x1A, 0x55, 0x32, 0x05,
        0x57, 0x16, 0xEA, 0xD6, 0x96, 0x25, 0x68, 0xF8, 0x7D, 0x3F, 0x3F, 0x77,
        0x04, 0xC6, 0xA8, 0xD1, 0xBC, 0xD1, 0xBF, 0x4D, 0x50, 0xD6, 0x15, 0x4B,
        0x6D, 0xA7, 0x31, 0xB1, 0x87, 0xB5, 0x8D, 0xFD, 0x72, 0x8A, 0xFA, 0x36,
        0x75, 0x7A, 0x79, 0x7A, 0xC1, 0x88, 0xD1
      ]
    )
  ]
}

fn xchacha_test_data -> Array[
  (Array[Int], Array[Int], Int, Array[Int], Array[Int])
] {
  # Each tuple is in the form (key, nonce, counter, input, output)
  #
  # Tests taken from
  # https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha.
  [
    (
      [
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B,
        0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
        0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F
      ],
      [
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B,
        0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x58
      ],
      0,
      [
        0x54, 0x68, 0x65, 0x20, 0x64, 0x68, 0x6F, 0x6C, 0x65, 0x20, 0x28, 0x70,
        0x72, 0x6F, 0x6E, 0x6F, 0x75, 0x6E, 0x63, 0x65, 0x64, 0x20, 0x22, 0x64,
        0x6F, 0x6C, 0x65, 0x22, 0x29, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6C, 0x73,
        0x6F, 0x20, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x20, 0x61, 0x73, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x41, 0x73, 0x69, 0x61, 0x74, 0x69, 0x63, 0x20, 0x77,
        0x69, 0x6C, 0x64, 0x20, 0x64, 0x6F, 0x67, 0x2C, 0x20, 0x72, 0x65, 0x64,
        0x20, 0x64, 0x6F, 0x67, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x77, 0x68,
        0x69, 0x73, 0x74, 0x6C, 0x69, 0x6E, 0x67, 0x20, 0x64, 0x6F, 0x67, 0x2E,
        0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6F, 0x75, 0x74,
        0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x6F, 0x66,
        0x20, 0x61, 0x20, 0x47, 0x65, 0x72, 0x6D, 0x61, 0x6E, 0x20, 0x73, 0x68,
        0x65, 0x70, 0x68, 0x65, 0x72, 0x64, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6C,
        0x6F, 0x6F, 0x6B, 0x73, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x69,
        0x6B, 0x65, 0x20, 0x61, 0x20, 0x6C, 0x6F, 0x6E, 0x67, 0x2D, 0x6C, 0x65,
        0x67, 0x67, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x78, 0x2E, 0x20, 0x54, 0x68,
        0x69, 0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x6C, 0x79, 0x20, 0x65, 0x6C,
        0x75, 0x73, 0x69, 0x76, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x6B,
        0x69, 0x6C, 0x6C, 0x65, 0x64, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x65, 0x72,
        0x20, 0x69, 0x73, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
        0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x77, 0x6F, 0x6C, 0x76,
        0x65, 0x73, 0x2C, 0x20, 0x63, 0x6F, 0x79, 0x6F, 0x74, 0x65, 0x73, 0x2C,
        0x20, 0x6A, 0x61, 0x63, 0x6B, 0x61, 0x6C, 0x73, 0x2C, 0x20, 0x61, 0x6E,
        0x64, 0x20, 0x66, 0x6F, 0x78, 0x65, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x74, 0x61, 0x78, 0x6F, 0x6E, 0x6F, 0x6D, 0x69, 0x63,
        0x20, 0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x43, 0x61, 0x6E, 0x69,
        0x64, 0x61, 0x65, 0x2E
      ],
      [
        0x45, 0x59, 0xAB, 0xBA, 0x4E, 0x48, 0xC1, 0x61, 0x02, 0xE8, 0xBB, 0x2C,
        0x05, 0xE6, 0x94, 0x7F, 0x50, 0xA7, 0x86, 0xDE, 0x16, 0x2F, 0x9B, 0x0B,
        0x7E, 0x59, 0x2A, 0x9B, 0x53, 0xD0, 0xD4, 0xE9, 0x8D, 0x8D, 0x64, 0x10,
        0xD5, 0x40, 0xA1, 0xA6, 0x37, 0x5B, 0x26, 0xD8, 0x0D, 0xAC, 0xE4, 0xFA,
        0xB5, 0x23, 0x84, 0xC7, 0x31, 0xAC, 0xBF, 0x16, 0xA5, 0x92, 0x3C, 0x0C,
        0x48, 0xD3, 0x57, 0x5D, 0x4D, 0x0D, 0x2C, 0x67, 0x3B, 0x66, 0x6F, 0xAA,
        0x73, 0x10, 0x61, 0x27, 0x77, 0x01, 0x09, 0x3A, 0x6B, 0xF7, 0xA1, 0x58,
        0xA8, 0x86, 0x42, 0x92, 0xA4, 0x1C, 0x48, 0xE3, 0xA9, 0xB4, 0xC0, 0xDA,
        0xEC, 0xE0, 0xF8, 0xD9, 0x8D, 0x0D, 0x7E, 0x05, 0xB3, 0x7A, 0x30, 0x7B,
        0xBB, 0x66, 0x33, 0x31, 0x64, 0xEC, 0x9E, 0x1B, 0x24, 0xEA, 0x0D, 0x6C,
        0x3F, 0xFD, 0xDC, 0xEC, 0x4F, 0x68, 0xE7, 0x44, 0x30, 0x56, 0x19, 0x3A,
        0x03, 0xC8, 0x10, 0xE1, 0x13, 0x44, 0xCA, 0x06, 0xD8, 0xED, 0x8A, 0x2B,
        0xFB, 0x1E, 0x8D, 0x48, 0xCF, 0xA6, 0xBC, 0x0E, 0xB4, 0xE2, 0x46, 0x4B,
        0x74, 0x81, 0x42, 0x40, 0x7C, 0x9F, 0x43, 0x1A, 0xEE, 0x76, 0x99, 0x60,
        0xE1, 0x5B, 0xA8, 0xB9, 0x68, 0x90, 0x46, 0x6E, 0xF2, 0x45, 0x75, 0x99,
        0x85, 0x23, 0x85, 0xC6, 0x61, 0xF7, 0x52, 0xCE, 0x20, 0xF9, 0xDA, 0x0C,
        0x09, 0xAB, 0x6B, 0x19, 0xDF, 0x74, 0xE7, 0x6A, 0x95, 0x96, 0x74, 0x46,
        0xF8, 0xD0, 0xFD, 0x41, 0x5E, 0x7B, 0xEE, 0x2A, 0x12, 0xA1, 0x14, 0xC2,
        0x0E, 0xB5, 0x29, 0x2A, 0xE7, 0xA3, 0x49, 0xAE, 0x57, 0x78, 0x20, 0xD5,
        0x52, 0x0A, 0x1F, 0x3F, 0xB6, 0x2A, 0x17, 0xCE, 0x6A, 0x7E, 0x68, 0xFA,
        0x7C, 0x79, 0x11, 0x1D, 0x88, 0x60, 0x92, 0x0B, 0xC0, 0x48, 0xEF, 0x43,
        0xFE, 0x84, 0x48, 0x6C, 0xCB, 0x87, 0xC2, 0x5F, 0x0A, 0xE0, 0x45, 0xF0,
        0xCC, 0xE1, 0xE7, 0x98, 0x9A, 0x9A, 0xA2, 0x20, 0xA2, 0x8B, 0xDD, 0x48,
        0x27, 0xE7, 0x51, 0xA2, 0x4A, 0x6D, 0x5C, 0x62, 0xD7, 0x90, 0xA6, 0x63,
        0x93, 0xB9, 0x31, 0x11, 0xC1, 0xA5, 0x5D, 0xD7, 0x42, 0x1A, 0x10, 0x18,
        0x49, 0x74, 0xC7, 0xC5
      ]
    ),
    (
      [
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B,
        0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
        0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F
      ],
      [
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B,
        0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x58
      ],
      1,
      [
        0x54, 0x68, 0x65, 0x20, 0x64, 0x68, 0x6F, 0x6C, 0x65, 0x20, 0x28, 0x70,
        0x72, 0x6F, 0x6E, 0x6F, 0x75, 0x6E, 0x63, 0x65, 0x64, 0x20, 0x22, 0x64,
        0x6F, 0x6C, 0x65, 0x22, 0x29, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6C, 0x73,
        0x6F, 0x20, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x20, 0x61, 0x73, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x41, 0x73, 0x69, 0x61, 0x74, 0x69, 0x63, 0x20, 0x77,
        0x69, 0x6C, 0x64, 0x20, 0x64, 0x6F, 0x67, 0x2C, 0x20, 0x72, 0x65, 0x64,
        0x20, 0x64, 0x6F, 0x67, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x77, 0x68,
        0x69, 0x73, 0x74, 0x6C, 0x69, 0x6E, 0x67, 0x20, 0x64, 0x6F, 0x67, 0x2E,
        0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6F, 0x75, 0x74,
        0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x6F, 0x66,
        0x20, 0x61, 0x20, 0x47, 0x65, 0x72, 0x6D, 0x61, 0x6E, 0x20, 0x73, 0x68,
        0x65, 0x70, 0x68, 0x65, 0x72, 0x64, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6C,
        0x6F, 0x6F, 0x6B, 0x73, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x69,
        0x6B, 0x65, 0x20, 0x61, 0x20, 0x6C, 0x6F, 0x6E, 0x67, 0x2D, 0x6C, 0x65,
        0x67, 0x67, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x78, 0x2E, 0x20, 0x54, 0x68,
        0x69, 0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x6C, 0x79, 0x20, 0x65, 0x6C,
        0x75, 0x73, 0x69, 0x76, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x6B,
        0x69, 0x6C, 0x6C, 0x65, 0x64, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x65, 0x72,
        0x20, 0x69, 0x73, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
        0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x77, 0x6F, 0x6C, 0x76,
        0x65, 0x73, 0x2C, 0x20, 0x63, 0x6F, 0x79, 0x6F, 0x74, 0x65, 0x73, 0x2C,
        0x20, 0x6A, 0x61, 0x63, 0x6B, 0x61, 0x6C, 0x73, 0x2C, 0x20, 0x61, 0x6E,
        0x64, 0x20, 0x66, 0x6F, 0x78, 0x65, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x74, 0x61, 0x78, 0x6F, 0x6E, 0x6F, 0x6D, 0x69, 0x63,
        0x20, 0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x43, 0x61, 0x6E, 0x69,
        0x64, 0x61, 0x65, 0x2E
      ],
      [
        0x7D, 0x0A, 0x2E, 0x6B, 0x7F, 0x7C, 0x65, 0xA2, 0x36, 0x54, 0x26, 0x30,
        0x29, 0x4E, 0x06, 0x3B, 0x7A, 0xB9, 0xB5, 0x55, 0xA5, 0xD5, 0x14, 0x9A,
        0xA2, 0x1E, 0x4A, 0xE1, 0xE4, 0xFB, 0xCE, 0x87, 0xEC, 0xC8, 0xE0, 0x8A,
        0x8B, 0x5E, 0x35, 0x0A, 0xBE, 0x62, 0x2B, 0x2F, 0xFA, 0x61, 0x7B, 0x20,
        0x2C, 0xFA, 0xD7, 0x20, 0x32, 0xA3, 0x03, 0x7E, 0x76, 0xFF, 0xDC, 0xDC,
        0x43, 0x76, 0xEE, 0x05, 0x3A, 0x19, 0x0D, 0x7E, 0x46, 0xCA, 0x1D, 0xE0,
        0x41, 0x44, 0x85, 0x03, 0x81, 0xB9, 0xCB, 0x29, 0xF0, 0x51, 0x91, 0x53,
        0x86, 0xB8, 0xA7, 0x10, 0xB8, 0xAC, 0x4D, 0x02, 0x7B, 0x8B, 0x05, 0x0F,
        0x7C, 0xBA, 0x58, 0x54, 0xE0, 0x28, 0xD5, 0x64, 0xE4, 0x53, 0xB8, 0xA9,
        0x68, 0x82, 0x41, 0x73, 0xFC, 0x16, 0x48, 0x8B, 0x89, 0x70, 0xCA, 0xC8,
        0x28, 0xF1, 0x1A, 0xE5, 0x3C, 0xAB, 0xD2, 0x01, 0x12, 0xF8, 0x71, 0x07,
        0xDF, 0x24, 0xEE, 0x61, 0x83, 0xD2, 0x27, 0x4F, 0xE4, 0xC8, 0xB1, 0x48,
        0x55, 0x34, 0xEF, 0x2C, 0x5F, 0xBC, 0x1E, 0xC2, 0x4B, 0xFC, 0x36, 0x63,
        0xEF, 0xAA, 0x08, 0xBC, 0x04, 0x7D, 0x29, 0xD2, 0x50, 0x43, 0x53, 0x2D,
        0xB8, 0x39, 0x1A, 0x8A, 0x3D, 0x77, 0x6B, 0xF4, 0x37, 0x2A, 0x69, 0x55,
        0x82, 0x7C, 0xCB, 0x0C, 0xDD, 0x4A, 0xF4, 0x03, 0xA7, 0xCE, 0x4C, 0x63,
        0xD5, 0x95, 0xC7, 0x5A, 0x43, 0xE0, 0x45, 0xF0, 0xCC, 0xE1, 0xF2, 0x9C,
        0x8B, 0x93, 0xBD, 0x65, 0xAF, 0xC5, 0x97, 0x49, 0x22, 0xF2, 0x14, 0xA4,
        0x0B, 0x7C, 0x40, 0x2C, 0xDB, 0x91, 0xAE, 0x73, 0xC0, 0xB6, 0x36, 0x15,
        0xCD, 0xAD, 0x04, 0x80, 0x68, 0x0F, 0x16, 0x51, 0x5A, 0x7A, 0xCE, 0x9D,
        0x39, 0x23, 0x64, 0x64, 0x32, 0x8A, 0x37, 0x74, 0x3F, 0xFC, 0x28, 0xF4,
        0xDD, 0xB3, 0x24, 0xF4, 0xD0, 0xF5, 0xBB, 0xDC, 0x27, 0x0C, 0x65, 0xB1,
        0x74, 0x9A, 0x6E, 0xFF, 0xF1, 0xFB, 0xAA, 0x09, 0x53, 0x61, 0x75, 0xCC,
        0xD2, 0x9F, 0xB9, 0xE6, 0x05, 0x7B, 0x30, 0x73, 0x20, 0xD3, 0x16, 0x83,
        0x8A, 0x9C, 0x71, 0xF7, 0x0B, 0x5B, 0x59, 0x07, 0xA6, 0x6F, 0x7E, 0xA4,
        0x9A, 0xAD, 0xC4, 0x09
      ]
    )
  ]
}

fn pub tests(t: mut Tests) {
  t.test('ChaCha20.encrypt') fn (t) {
    chacha_test_data.into_iter.each fn (test) {
      let key = ByteArray.from_array(test.0)
      let nonce = ByteArray.from_array(test.1)
      let cipher = ChaCha20 .new(key, nonce)
      let input = ByteArray.from_array(test.3)
      let output = ByteArray.from_array(test.4)

      cipher.counter = test.2

      t.equal(cipher.encrypt(input), output)
    }
  }

  t.test('ChaCha20.decrypt') fn (t) {
    chacha_test_data.into_iter.each fn (test) {
      let key = ByteArray.from_array(test.0)
      let nonce = ByteArray.from_array(test.1)
      let cipher = ChaCha20 .new(key, nonce)
      let input = ByteArray.from_array(test.3)
      let output = ByteArray.from_array(test.4)

      cipher.counter = test.2

      t.equal(cipher.decrypt(output), input)
    }
  }

  t.test('chacha.hchacha20') fn (t) {
    let key = ByteArray.from_array([
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
      0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
      0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    ])

    let nonce = ByteArray.from_array([
      0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00,
      0x31, 0x41, 0x59, 0x27
    ])

    let expected = ByteArray.from_array([
      0x82, 0x41, 0x3B, 0x42, 0x27, 0xB2, 0x7B, 0xFE, 0xD3, 0x0E,
      0x42, 0x50, 0x8A, 0x87, 0x7D, 0x73, 0xA0, 0xF9, 0xE4, 0xD5,
      0x8A, 0x74, 0xA8, 0x53, 0xC1, 0x2E, 0xC4, 0x13, 0x26, 0xD3,
      0xEC, 0xDC,
    ])

    t.equal(hchacha20(key, nonce), expected)
  }

  t.test('XChaCha20.encrypt') fn (t) {
    xchacha_test_data.into_iter.each fn (test) {
      let key = ByteArray.from_array(test.0)
      let nonce = ByteArray.from_array(test.1)
      let cipher = XChaCha20 .new(key, nonce)
      let input = ByteArray.from_array(test.3)
      let output = ByteArray.from_array(test.4)

      cipher.counter = test.2

      t.equal(cipher.encrypt(input), output)
    }
  }

  t.test('XChaCha20.decrypt') fn (t) {
    xchacha_test_data.into_iter.each fn (test) {
      let key = ByteArray.from_array(test.0)
      let nonce = ByteArray.from_array(test.1)
      let cipher = XChaCha20 .new(key, nonce)
      let input = ByteArray.from_array(test.3)
      let output = ByteArray.from_array(test.4)

      cipher.counter = test.2

      t.equal(cipher.decrypt(output), input)
    }
  }
}
