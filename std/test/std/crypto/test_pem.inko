import std.crypto.pem (Item, ParseError, PemFile)
import std.crypto.x509 (Certificate, PrivateKey)
import std.fmt (fmt)
import std.io (Buffer, Error)
import std.rand (Random)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.test('Item.fmt', fn (t) {
    t.equal(
      fmt(Item.Certificate(Certificate.new(ByteArray.from_array([1, 2, 3])))),
      'Certificate(Certificate(3 bytes))',
    )
    t.equal(
      fmt(Item.PrivateKey(PrivateKey.new(ByteArray.from_array([1, 2, 3])))),
      'PrivateKey(PrivateKey(3 bytes))',
    )
  })

  t.test('ParseError.fmt', fn (t) {
    t.equal(fmt(ParseError.Read(Error.NotFound)), 'Read(NotFound)')
    t.equal(
      fmt(ParseError.InvalidSectionStart(1) as ParseError[Error]),
      'InvalidSectionStart(1)',
    )
    t.equal(
      fmt(ParseError.InvalidSectionEnd(1) as ParseError[Error]),
      'InvalidSectionEnd(1)',
    )
    t.equal(
      fmt(ParseError.InvalidBase64(1) as ParseError[Error]),
      'InvalidBase64(1)',
    )
  })

  t.test('ParseError.to_string', fn (t) {
    t.equal(ParseError.Read(Error.NotFound).to_string, Error.NotFound.to_string)
    t.equal(
      (ParseError.EndOfInput as ParseError[Error]).to_string,
      'the end of the input stream is reached, but more input is required',
    )
    t.equal(
      (ParseError.InvalidSectionStart(2) as ParseError[Error]).to_string,
      'the section start on line 2 is invalid',
    )
    t.equal(
      (ParseError.InvalidSectionEnd(2) as ParseError[Error]).to_string,
      'the section end on line 2 is invalid',
    )
    t.equal(
      (ParseError.InvalidBase64(2) as ParseError[Error]).to_string,
      'the base64 encoded data on line 2 is invalid',
    )
  })

  t.test('PemFile.next_certificate with valid input', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN PRIVATE KEY-----
a2V5
-----END PRIVATE KEY-----

-----BEGIN CERTIFICATE-----
Y2VydA==
-----END CERTIFICATE-----
      ',
    )

    let pem = PemFile.new(input)

    t.equal(
      pem.next_certificate,
      Result.Ok(Option.Some(Certificate.new('cert'.to_byte_array))),
    )
    t.equal(pem.next_certificate, Result.Ok(Option.None))
  })

  t.test('PemFile.next_certificate with invalid input', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN CERTIFICATE-----
wat
-----END CERTIFICATE-----
      ',
    )

    let pem = PemFile.new(input)

    t.equal(pem.next_certificate, Result.Error(ParseError.InvalidBase64(3)))
  })

  t.test('PemFile.next_private_key with valid input', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN CERTIFICATE-----
Y2VydA==
-----END CERTIFICATE-----

-----BEGIN PRIVATE KEY-----
a2V5
-----END PRIVATE KEY-----
      ',
    )

    let pem = PemFile.new(input)

    t.equal(
      pem.next_private_key,
      Result.Ok(Option.Some(PrivateKey.new('key'.to_byte_array))),
    )
    t.equal(pem.next_private_key, Result.Ok(Option.None))
  })

  t.test('PemFile.next_private_key with invalid input', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN PRIVATE KEY-----
wat
-----END PRIVATE KEY-----
      ',
    )

    let pem = PemFile.new(input)

    t.equal(pem.next_private_key, Result.Error(ParseError.InvalidBase64(3)))
  })

  t.test('PemFile.next with valid input', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN CERTIFICATE-----
Y2VydA==
-----END CERTIFICATE-----

-----BEGIN PRIVATE KEY-----
a2V5
-----END PRIVATE KEY-----
      ',
    )

    let pem = PemFile.new(input)

    t.equal(
      pem.next,
      Option.Some(
        Result.Ok(Item.Certificate(Certificate.new('cert'.to_byte_array))),
      ),
    )
    t.equal(
      pem.next,
      Option.Some(
        Result.Ok(Item.PrivateKey(PrivateKey.new('key'.to_byte_array))),
      ),
    )
  })

  t.test('PemFile.next with invalid input', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN CERTIFICATE-----
wat
-----END CERTIFICATE-----

-----BEGIN PRIVATE KEY-----
a2V5
-----END PRIVATE KEY-----
      ',
    )

    let pem = PemFile.new(input)

    t.equal(pem.next, Option.Some(Result.Error(ParseError.InvalidBase64(3))))
  })

  t.test('PemFile.parse with empty input', fn (t) {
    t.equal(PemFile.new(Buffer.new('')).parse, Result.Ok(Option.None))
    t.equal(PemFile.new(Buffer.new('\n\t\r  ')).parse, Result.Ok(Option.None))
  })

  t.test('PemFile.parse with random invalid garbage as its input', fn (t) {
    let rng = Random.new
    let buf = ByteArray.new

    rng.bytes(into: buf, size: 32)
    t.true(PemFile.new(Buffer.new(buf)).parse.error?)
    t.true(PemFile.new(Buffer.new(ByteArray.from_array([255]))).parse.error?)
  })

  t.test('PemFile.parse with an invalid section start', fn (t) {
    let inputs = [
      '-BEGIN CERTIFICATE-----\nY2VydA==\n-----END CERTIFICATE-----',
      '-----BEG CERTIFICATE-----\nY2VydA==\n-----END CERTIFICATE-----',
      '-----BEGIN CERTIFICATE\nY2VydA==\n-----END CERTIFICATE-----',
      '-----BEGIN CERT-----\nY2VydA==\n-----END CERTIFICATE-----',
      '-----BEGIN CERTIFICATE     -----\nY2VydA==\n-----END CERTIFICATE-----',
      '-----     BEGIN CERTIFICATE-----\nY2VydA==\n-----END CERTIFICATE-----',
    ]

    for input in inputs {
      t.equal(
        PemFile.new(Buffer.new(input)).parse,
        Result.Error(ParseError.InvalidSectionStart(1)),
      )
    }
  })

  t.test('PemFile.parse with invalid base64', fn (t) {
    let inputs = [
      ('-----BEGIN CERTIFICATE-----\nabc\n-----END CERTIFICATE-----', 2),
      ('-----BEGIN CERTIFICATE-----\nY2Vy\ndA\n-----END CERTIFICATE-----', 3),
    ]

    for (inp, line) in inputs {
      t.equal(
        PemFile.new(Buffer.new(inp)).parse,
        Result.Error(ParseError.InvalidBase64(line)),
      )
    }
  })

  t.test('PemFile.parse with an invalid section end', fn (t) {
    let inputs = [
      '-----BEGIN CERTIFICATE-----\nY2VydA==\n-----END CERTIFICATE',
      '-----BEGIN CERTIFICATE-----\nY2VydA==\n-END CERTIFICATE-----',
      '-----BEGIN CERTIFICATE-----\nY2VydA==\n-----END EXAMPLE-----',
      '-----BEGIN CERTIFICATE-----\nY2VydA==\n-----END PRIVATE KEY-----',
      '-----BEGIN CERTIFICATE-----\nY2VydA==\n-----CERTIFICATE-----',
    ]

    for inp in inputs {
      t.equal(
        PemFile.new(Buffer.new(inp)).parse,
        Result.Error(ParseError.InvalidSectionEnd(3)),
      )
    }
  })

  t.test('PemFile.parse when running out of input', fn (t) {
    let inputs = [
      '---',
      '-----BEGIN CERTIFICATE',
      '-----BEGIN CERTIFICATE-----',
      '-----BEGIN CERTIFICATE-----\nY2VydA==\n',
      '-----BEGIN CERTIFICATE-----\nY2VydA==\n-',
    ]

    for inp in inputs {
      t.equal(
        PemFile.new(Buffer.new(inp)).parse,
        Result.Error(ParseError.EndOfInput),
      )
    }
  })

  t.test('PemFile.parse with wrapped base64', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN CERTIFICATE-----
Y2Vy
dA==
-----END CERTIFICATE-----
      ',
    )

    t.equal(
      PemFile.new(input).parse,
      Result.Ok(
        Option.Some(Item.Certificate(Certificate.new('cert'.to_byte_array))),
      ),
    )
  })

  t.test('PemFile.parse with indented base64', fn (t) {
    let input = Buffer.new(
      '
-----BEGIN CERTIFICATE-----
  Y2Vy
  dA==
-----END CERTIFICATE-----
      ',
    )

    t.equal(
      PemFile.new(input).parse,
      Result.Ok(
        Option.Some(Item.Certificate(Certificate.new('cert'.to_byte_array))),
      ),
    )
  })
}
