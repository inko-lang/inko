import helpers (compiler_path)
import std.env
import std.fs.file (ReadOnlyFile)
import std.fs.path (Path)
import std.sys (Command, Stream)
import std.test (Failure, Tests)

fn run(
  name: String,
  arguments: Array[String],
  input: String,
) -> Result[String, String] {
  let cmd = Command.new(name)

  cmd.arguments = arguments
  cmd.stdin = Stream.Piped
  cmd.stderr = Stream.Piped
  cmd.stdout = Stream.Piped

  let child = try cmd.spawn.map_error(fn (e) { 'failed to spawn ${name}: ${e}' })

  try child.stdin.as_mut.get.write(input).map_error(fn (e) {
    'failed to write to STDIN: ${e}'
  })

  try child.wait.map_error(fn (e) { '${name} failed: ${e}' })

  let out = ByteArray.new

  try child
    .stdout
    .as_mut
    .get
    .read_all(out)
    .then(fn (_) { child.stderr.as_mut.get.read_all(out) })
    .map_error(fn (e) { 'failed reading the output: ${e}' })
  Result.Ok(out.into_string)
}

fn format(compiler: String, given: String) -> Result[String, String] {
  run(compiler, ['fmt', '-'], given)
}

fn diff(given: String, expected: ref Path) -> Result[String, String] {
  let out = try run(
    'diff',
    ['-u', '--color=never', expected.to_string, '-'],
    given,
  )

  # This skips the patch header, which isn't useful for the purpose of debugging
  # a failing test.
  Result.Ok(String.join(out.split('\n').skip(3), '\n'))
}

fn pub tests(t: mut Tests) {
  let cwd = env.working_directory.or_else(fn (_) { '.'.to_path })
  let base = cwd.join('fixtures').join('fmt')
  let compiler = compiler_path.to_string

  for e in base.list.or_panic_with("the fixtures/fmt directory doesn't exist") {
    let cwd = recover cwd.clone
    let dir = match e {
      case Ok({ @path = p, @type = Directory }) -> p
      case Ok(_) -> next
      case Error(e) -> panic('failed to read the directory: ${e}')
    }

    if !dir.join('input.inko').file? { next }

    let tail = dir.tail.to_string
    let dir = recover dir.clone

    t.ok('inko fmt ${tail}', fn move (t) {
      let in_file = dir.join('input.inko')
      let out_file = dir.join('output.inko')
      let input = ByteArray.new
      let output = ByteArray.new

      try ReadOnlyFile
        .new(in_file)
        .then(fn (f) { f.read_all(input) })
        .then(fn (_) { ReadOnlyFile.new(out_file.clone) })
        .then(fn (f) { f.read_all(output) })
        .map_error(fn (e) { 'failed to read the input and output files: {e}' })

      let result = try format(compiler, input.into_string)
      let exp = output.into_string

      # The test files can contain many lines, so showing them as-is isn't
      # useful/too noisy. Instead, we'll show the path to the expected output
      # file and a diff of what we actually got.
      if result != exp {
        let rel = out_file.strip_prefix(cwd).get
        let diff = try diff(result, out_file)

        t.failures.push(
          Failure.new(
            'output matching the following diff:\n${diff}',
            'the formatting as used in ${rel}',
          ),
        )
      }

      Result.Ok(nil)
    })
  }
}
