import std.drop (Drop)
import std.test (Tests)

fn ignore_unused(value: ValueRef) -> Option[ValueRef] {
  Option.Some(value)
}

type Value {
  let mut @dropped: Int

  fn static new -> Value {
    Value(0)
  }
}

type ValueRef {
  let @value: mut Value

  fn static new(value: mut Value) -> ValueRef {
    ValueRef(value)
  }
}

impl Drop for ValueRef {
  fn mut drop {
    @value.dropped += 1
  }
}

type Box {
  let mut @value: ValueRef

  fn mut update(value: ValueRef) {
    @value = value
  }
}

type CyclicClass {
  let @backref: Backref[CyclicClass]
}

type Backref[T] {
  let mut @target: Option[ref T]
}

type enum CyclicEnum {
  case Backref(Backref[CyclicEnum])
}

type Container {
  let @a: Words
  let @b: Bool
}

type Words {
  let @numbers: Array[String]
}

fn early_return_in_init -> Result[Nil, String] {
  match false {
    case true -> Container(Words(['foo']), true)
    case _ -> Container(try always_error, false)
  }

  Result.Ok(nil)
}

fn always_error -> Result[Words, String] {
  Result.Error('oops')
}

fn pub tests(t: mut Tests) {
  t.test('Assigning a variable drops the old value', fn (t) {
    let val = Value.new
    let mut _a = ValueRef.new(val)

    _a = ValueRef.new(val)
    t.equal(val.dropped, 1)
  })

  t.test('Assigning a field drops the old value', fn (t) {
    let val = Value.new
    let box = Box(ValueRef.new(val))

    box.update(ValueRef.new(val))
    t.equal(val.dropped, 1)
  })

  t.test('Assigning a field with a receiver drops the old value', fn (t) {
    let val = Value.new
    let box = Box(ValueRef.new(val))

    box.value = ValueRef.new(val)
    t.equal(val.dropped, 1)
  })

  t.test('Assigning a captured value drops the old value', fn (t) {
    let val = Value.new
    let mut vref = Option.Some(ValueRef.new(val))

    fn move { vref = Option.None }.call
    t.equal(val.dropped, 1)
  })

  t.no_panic('Dropping a type with a cyclic reference', fn {
    let val_ref = Backref(Option.None)
    let val = CyclicClass(val_ref)

    val.backref.target = Option.Some(ref val)
  })

  t.no_panic('Dropping an enum with a cyclic reference', fn {
    let val_ref = Backref(Option.None)
    let val = CyclicEnum.Backref(val_ref)

    match mut val {
      case Backref(r) -> r.target = Option.Some(ref val)
    }
  })

  t.panic(
    'Returning a reference in a call chain that outlives the pointee',
    fn {
      # Here `Array.last` returns a `Option[ref Array[Int]]`, but this reference
      # outlives the source Array/receiver, so this must panic at runtime.
      [[10]].last
    },
  )

  t.test('Assigning to an underscore drops the value immediately', fn (t) {
    let val = Value.new
    let _ = ValueRef.new(val)
    let _drop_at_the_end = ValueRef.new(val)

    t.equal(val.dropped, 1)
  })

  t.test('Unused return values are dropped upon return', fn (t) {
    let val = Value.new

    ignore_unused(ValueRef.new(val))
    t.equal(val.dropped, 1)
  })

  # If the compiler is implemented incorrectly, this test would trigger a
  # segfault.
  t.no_panic(
    'Returning as part of an initialization should not drop the uninitialized container',
    fn { early_return_in_init },
  )
}
