# A hash set implemented using a Map.
import std::cmp::(Contains, Equal)
import std::fmt::(Format, Formatter)
import std::hash::Hash
import std::iter::Iter

# A hash set implemented using a Map.
#
# The order of values in this Set are not guaranteed. For values to be stored in
# a `Set` they must implement the `Hash` and `Equal` traits.
class pub Set[V: Hash + Equal] {
  # The Map used for storing values.
  #
  # The keys are the values inserted in this `Set`, the values are always set to
  # `True`.
  let @map: Map[V, Bool]

  fn pub static new -> Self {
    Self { @map = Map.new }
  }

  # Inserts a new value into the `Set`.
  #
  # The returned value is `True` if the value was inserted, `False` otherwise.
  #
  # # Examples
  #
  # Inserting a value into a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  fn pub mut insert(value: V) -> Bool {
    if @map.contains?(value) { return false }

    @map[value] = true
    true
  }

  # Removes a value from this `Set`.
  #
  # If the value was removed `True` is returned, otherwise `False` is returned.
  #
  # # Examples
  #
  # Removing an existing value from a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  #     set.remove(10) # => True
  #     set.remove(10) # => False
  #
  # Removing a non-existing value from a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.remove(10) # => False
  fn pub mut remove(value: ref V) -> Bool {
    @map.remove(value).some?
  }

  # Returns an `Iter` over the values in this `Set`.
  #
  # # Examples
  #
  # Creating an `Iter` for the values:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  #     set.insert(20)
  #
  #     set.iter.next # => 10
  fn pub iter -> Iter[ref V, Never] {
    @map.keys
  }

  # Returns the number of values in this `Set`.
  #
  # # Examples
  #
  # Using an empty `Set`:
  #
  #     import std::set::Set
  #
  #     Set.new.length # => 0
  #
  # Using a `Set` with one value:
  #
  #     let set = Set.new
  #
  #     set.insert('Alice')
  #
  #     set.length # => 1
  fn pub length -> Int {
    @map.length
  }
}

impl Equal for Set {
  # Returns `True` if `self` and the given `Set` are identical to each
  # other.
  #
  # # Examples
  #
  # Comparing two `Set` instances:
  #
  #     import std::set::Set
  #
  #     let set1 = Set.new
  #     let set2 = Set.new
  #
  #     set1.insert(10)
  #     set2.insert(10)
  #
  #     set1 == set2 # => True
  fn pub ==(other: ref Self) -> Bool {
    if length != other.length { return false }

    iter.all? fn (val) { other.contains?(val) }
  }
}

impl Contains[V] for Set {
  # Returns `True` if this `Set` contains the given value.
  #
  # # Examples
  #
  # Checking if a `Set` contains a value:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.contains?(10) # => False
  #     set.insert(10)
  #     set.contains?(10) # => True
  fn pub contains?(value: ref V) -> Bool {
    @map.contains?(value)
  }
}

impl Format for Set if V: Format {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('{')

    iter.each_with_index fn (index, value) {
      if index > 0 { formatter.write(', ') }

      value.fmt(formatter)
    }

    formatter.write('}')
  }
}
