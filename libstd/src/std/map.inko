# A hash map using linear probing and Robin Hood entry stealing.
import std::cmp::(Contains, Equal)
import std::drop::Drop
import std::fmt::(Format, Formatter)
import std::hash::(Hash, Hasher)
import std::index::(Index, IndexMut, SetIndex)
import std::iter::Iter
import std::process::(panic)
import std::random

fn resize_threshold(size: Int) -> Int {
  # This produces a threshold of 90%, without the need to allocate floats.
  9 * size / 10
}

# A value that signals an index isn't used.
let EMPTY = -1

let DEFAULT_CAPACITY = 4

# An entry stored in a Map.
class pub Entry[K: Hash + Equal, V] {
  # The key that was hashed.
  let @key: K

  # The value of the key.
  let pub @value: V

  # The hash value of the key.
  let @hash: Int

  # The distance of this entry relative to its desired index.
  let @distance: Int

  # Returns an immutable reference to the key.
  #
  # Keys can never be mutated in place, as this can result in map lookups
  # returning unexpected results.
  fn pub key -> ref K {
    @key
  }

  fn hash -> Int {
    @hash.clone
  }

  fn move into_value -> V {
    @value
  }
}

# The default hasher to use for `Map` types.
#
# Given two different instances of a `DefaultHasher`, both produce the same hash
# code for a given value V. Hash codes are not persistent between restarts of
# the OS process, and as such should never be relied upon directly, persisted,
# or in any way be relied upon directly.
class pub DefaultHasher {
  # The internal/native hasher.
  let @hasher: Any

  # Returns a new `Hasher`.
  fn pub static new -> Self {
    Self { @hasher = _INKO.hasher_new }
  }
}

impl Drop for DefaultHasher {
  fn mut drop {
    _INKO.hasher_drop(@hasher)
  }
}

impl Hasher for DefaultHasher {
  fn pub mut write(value: Int) {
    _INKO.hasher_write_int(@hasher, value)
  }

  fn pub hash -> Int {
    _INKO.hasher_to_hash(@hasher)
  }
}

# A hash map using linear probing and Robin Hood hashing.
#
# A `Map` preserves the order in which values are inserted, even when entries
# are removed.
#
# # Performance
#
# Preserving the insertion order makes it easier to use a `Map` (e.g. when
# writing tests or when serialising it), but comes with the trade-off that
# removals are more expensive. Our implementation simply shifts values when
# removing them. This makes removals more expensive compared to traditional maps
# (`O(n)` in the worst case, with `n` being the number of entries), but removes
# the need for using tombstones and extra indirection.
#
# If you find yourself in a situation where you need to remove many entries from
# a `Map`, it may be faster to construct a new `Map` that only contains the
# key/value pairs you are interested in.
#
# # Algorithm
#
# `Map` uses Robin Hood hashing, with the necessary changes to make this work
# while preserving insertion order. For more information on these algorithms you
# can refer to the following resources:
#
# * http://codecapsule.com/2013/11/11/robin-hood-hashing/
# * http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/
# * https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/
class pub Map[K: Hash + Equal, V] {
  # The slots we can hash into.
  #
  # An index of `-1` indicates the slot isn't used. A value of `0` or more
  # indicates the entry is at that given index in the `@entries` `Array`.
  #
  # The size of this Array is always a power of two.
  let @slots: Array[Int]

  # The entries stored in this map.
  let @entries: Array[Entry[K, V]]

  # The number of values to store before a resize is necessary.
  let @resize_at: Int

  # Returns a new empty `Map`.
  fn pub static new -> Self {
    with_capacity(DEFAULT_CAPACITY)
  }

  # Returns a new `Map` with space for at least the given number of values.
  #
  # The actual size may be larger.
  #
  # # Examples
  #
  #     let map = Map.with_capacity(32)
  #
  #     map['name'] = 'Alice'
  fn pub static with_capacity(amount: Int) -> Self {
    let size =
      if amount <= 0 { DEFAULT_CAPACITY } else { amount.nearest_power_of_two }
    let slots = Array.filled(with: EMPTY, times: size)
    let resize_at = resize_threshold(size)

    Self { @slots = slots, @entries = [], @resize_at = resize_at }
  }

  # Removes the given key, returning its value if the key was present.
  #
  # # Examples
  #
  # Removing a non-existing key:
  #
  #     let mut map = Map.new
  #
  #     map.remove('name') # => Option.None
  #
  # Removing an existing key:
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.remove('name') # => Option.Some('Alice')
  fn pub mut remove(key: ref K) -> Option[V] {
    let mut slot = slot_index(hash_key(key))
    let mut dist = 0
    let mut index = @slots[slot].clone

    # For the removal we need both the slot and the entry index, so we have to
    # duplicate the logic of `entries_index()` here, as this is the only place
    # we need both.
    loop {
      if index == EMPTY { return Option.None }

      let entry = @entries[index]

      if dist > entry.distance { return Option.None }
      if entry.key == key { break }

      slot = slot_index(slot + 1)
      index = @slots[slot].clone
      dist += 1
    }

    let value = @entries.remove_at(index).into_value

    @slots[slot] = EMPTY

    # Because we shifted the entries to the left, any slots pointing to entries
    # _after_ the removed value have to be updated accordingly.
    @slots.iter.each_with_index fn (slot, entry) {
      if entry > index { @slots[slot] = entry - 1 }
    }

    let mut prev_slot = slot

    slot = slot_index(slot + 1)

    loop {
      let mut index = @slots[slot].clone

      if index == EMPTY { break }

      let entry = @entries[index]

      if entry.distance > 0 {
        @slots[slot] = EMPTY
        @slots[prev_slot] = index

        entry.distance -= 1
      } else {
        break
      }

      prev_slot = slot
      slot = slot_index(slot + 1)
    }

    Option.Some(value)
  }

  # Returns an iterator of immutable key-value pairs.
  #
  # # Examples
  #
  # Iterating over all the key-value pairs:
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.iter.each fn (entry) {
  #       entry.key   # => 'name'
  #       entry.value # => 'Alice'
  #     }
  fn pub iter -> Iter[ref Entry[K, V], Never] {
    @entries.iter
  }

  # Returns an `Iter` that iterates over all key-value pairs in this
  # `Map`, yielding them by value.
  #
  # # Examples
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.into_iter.each fn (e) {
  #       e.key   # => 'name'
  #       e.value # => 'Alice'
  #     }
  fn pub move into_iter -> Iter[Entry[K, V], Never] {
    @entries.into_iter
  }

  # Returns an `Iter` visiting all the keys in this `Map`.
  #
  # # Examples
  #
  # Iterating over the keys in a `Map`:
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.keys.each fn (key) {
  #       key # => 'name'
  #     }
  fn pub keys -> Iter[ref K, Never] {
    iter.map fn (e) { e.key }
  }

  # Returns an `Iter` visiting all the values in this `Map`.
  #
  # # Examples
  #
  # Iterating over the values in a `Map`:
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.values.each fn (value) {
  #       value # => 'Alice'
  #     }
  fn pub values -> Iter[ref V, Never] {
    iter.map fn (e) { e.value }
  }

  # Returns an optional immutable reference to the key's value.
  #
  # # Examples
  #
  # Getting the value of a non-existing key:
  #
  #     let map = Map.new
  #
  #     map.get('name') # => Option.None
  #
  # Getting the value of an existing key:
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.get('name') # => Option.Some('Alice')
  fn pub get(key: ref K) -> Option[ref V] {
    match entries_index(key) {
      case EMPTY -> Option.None
      case index -> Option.Some(@entries[index].value)
    }
  }

  # Returns an optional mutable reference to the key's value.
  fn pub mut get_mut(key: ref K) -> Option[mut V] {
    match entries_index(key) {
      case EMPTY -> Option.None
      case index -> Option.Some(@entries[index].value)
    }
  }

  # Merges two `Map` objects together.
  #
  # # Examples
  #
  #     let map1 = Map.new
  #     let map2 = Map.new
  #
  #     map1['name'] = 'Alice'
  #     map2['city'] = 'Amsterdam'
  #
  #     map1.merge(map2)
  #
  #     map1['name'] # => 'Alice'
  #     map2['city'] # => 'Amsterdam'
  fn pub mut merge(other: Self) {
    other.into_iter.each fn (entry) {
      entry.distance = 0
      entry.hash = hash_key(entry.key)

      insert_entry(entry)
    }
  }

  # Returns the number of key-value pairs in this map.
  #
  # # Examples
  #
  # Using an empty map:
  #
  #     let map = Map.new
  #
  #     map.length # => 0
  #
  # Using a map with one key-value pair:
  #
  #     let map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.length # => 1
  fn pub length -> Int {
    @entries.length
  }

  # Returns the number of entries this map can store before needing a resize.
  #
  # # Examples
  #
  #     Map.new.capacity              # => 4
  #     Map.with_capacity(8).capacity # => 8
  fn pub capacity -> Int {
    @slots.length
  }

  fn mut resize {
    let new_size = @slots.length * 2

    @resize_at = resize_threshold(new_size)
    @slots = Array.filled(with: EMPTY, times: new_size)

    @entries.iter_mut.each fn (entry) { entry.distance = 0 }

    @entries.iter_mut.each_with_index fn (rehash_index, rehash) {
      let mut slot = slot_index(rehash.hash)

      loop {
        let index = @slots[slot].clone

        if index == EMPTY {
          @slots[slot] = rehash_index

          return
        }

        let entry = @entries[index]

        if entry.distance < rehash.distance {
          @slots[slot] = rehash_index

          shift_stolen_slots(slot, index)
          return
        }

        slot = slot_index(slot + 1)
        rehash.distance += 1
      }
    }
  }

  fn mut insert_entry(insert: Entry[K, V]) {
    let mut slot = slot_index(insert.hash)

    loop {
      let index = @slots[slot].clone

      if index == EMPTY {
        @slots[slot] = @entries.length

        @entries.push(insert)
        return
      }

      let entry = @entries[index]

      if entry.key == insert.key {
        entry.value = insert.into_value

        return
      }

      if entry.distance < insert.distance {
        @slots[slot] = @entries.length

        @entries.push(insert)
        shift_stolen_slots(slot, index)
        return
      }

      slot = slot_index(slot + 1)
      insert.distance += 1
    }
  }

  # Shifts an entry who's slot has been stolen to the right of the `@slots`
  # array.
  #
  # This method implements the stealing part of Robin Hood hashing.
  #
  # In a vanilla Robin Hood implementation this can mostly reuse the regular
  # insertion loop. Due to us preserving the insertion order this is a bit more
  # tricky, as we have to move `@slots` values around, instead of the actual
  # entries. In addition, comparing keys when moving stolen values around is
  # redundant, as we'd never update any entries (due to all keys being unique).
  # For these reasons we implement this in a separate method, specialised to
  # only handle what's actually needed when moving slot values around.
  fn mut shift_stolen_slots(start_slot: Int, start_index: Int) {
    # We are given the `@slots` index of the slot we stole, so we should start
    # at the next one.
    let mut slot = slot_index(start_slot + 1)
    let mut stolen_index = start_index
    let mut stolen = @entries[stolen_index]

    loop {
      stolen.distance += 1

      let index = @slots[slot].clone

      if index == EMPTY {
        @slots[slot] = stolen_index

        return
      }

      let entry = @entries[index]

      if entry.distance < stolen.distance {
        @slots[slot] = stolen_index
        stolen_index = index.clone
        stolen = entry
      }

      slot = slot_index(slot + 1)
    }
  }

  fn entries_index(key: ref K) -> Int {
    let mut slot = slot_index(hash_key(key))
    let mut dist = 0

    loop {
      let index = @slots[slot].clone

      if index == EMPTY { return EMPTY }

      let entry = @entries[index]

      if dist > entry.distance { return EMPTY }
      if entry.key == key { return index.clone }

      slot = slot_index(slot + 1)
      dist += 1
    }
  }

  fn hash_key(key: ref K) -> Int {
    let hasher: Hasher = DefaultHasher.new

    key.hash(mut hasher)
    hasher.hash
  }

  fn slot_index(hash: Int) -> Int {
    # Since the @slots Array is always a power of two, we can use & instead of
    # %, which is a bit faster.
    hash & (@slots.length - 1)
  }
}

impl Equal for Map if V: Equal {
  # Returns `true` if `self` and the given `Map` are identical to each
  # other.
  #
  # # Examples
  #
  # Comparing two `Map` instances:
  #
  #     let map1 = Map.new
  #     let map2 = Map.new
  #
  #     map1['name'] = 'Alice'
  #     map2['name'] = 'Alice'
  #
  #     map1 == map2 # => true
  fn pub ==(other: ref Self) -> Bool {
    if length != other.length { return false }

    iter.all? fn (ours) {
      match other.entries_index(ours.key) {
        case EMPTY -> false
        case index -> other.entries[index].value == ours.value
      }
    }
  }
}

impl Index[ref K, ref V] for Map {
  # Returns a reference to the value of the given key.
  #
  # # Examples
  #
  # Getting the value of an existing key:
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map['name'] # => 'Alice'
  #
  # # Panics
  #
  # This method panics if the key doesn't exist.
  fn pub index(index: ref K) -> ref V {
    match entries_index(index) {
      case EMPTY -> panic("The key doesn't exist")
      case index -> @entries[index].value
    }
  }
}

impl IndexMut[ref K, mut V] for Map {
  # Returns a mutable reference to the value of the given key.
  #
  # # Panics
  #
  # This method panics if the key doesn't exist.
  fn pub mut index_mut(index: ref K) -> mut V {
    match entries_index(index) {
      case EMPTY -> panic("The key doesn't exist")
      case index -> @entries[index].value
    }
  }
}

impl SetIndex[K, V] for Map {
  # Inserts the key and value in this `Map`, returning the inserted value.
  #
  # # Examples
  #
  # Inserting a new key-value pair:
  #
  #     let mut map = Map.new
  #
  #     map['name'] = 'Alice' # => 'Alice'
  fn pub mut set_index(index: K, value: V) {
    if length >= @resize_at { resize }

    let hash = hash_key(index)
    let entry =
      Entry { @key = index, @value = value, @hash = hash, @distance = 0 }

    insert_entry(entry)
  }
}

impl Hash for Map if K: Hash, V: Hash {
  fn pub hash(hasher: mut Hasher) {
    iter.each fn (entry) {
      entry.key.hash(hasher)
      entry.value.hash(hasher)
    }
  }
}

impl Contains[K] for Map {
  # Returns `true` if `self` contains the key `key`.
  #
  # # Examples
  #
  # Checking if a `Map` defines a key:
  #
  #     let map = Map.new
  #
  #     map['name'] = 'Alice'
  #
  #     map.contains?('name') # => true
  #     map.contains?('city') # => false
  fn pub contains?(value: ref K) -> Bool {
    entries_index(value) > EMPTY
  }
}

impl Format for Map if K: Format, V: Format {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('{')

    iter.each_with_index fn (index, entry) {
      if index > 0 { formatter.write(', ') }

      entry.key.fmt(formatter)
      formatter.write(': ')
      entry.value.fmt(formatter)
    }

    formatter.write('}')
  }
}
