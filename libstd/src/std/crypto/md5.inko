# An implementation of the MD5 hash function.
#
# MD5 is _not_ cryptographically secure and you should avoid using it whenever
# possible.
#
# The implementation is based on RFC 1321 and the pseudo code found at
# https://en.wikipedia.org/wiki/MD5#Pseudocode.
#
# # Examples
#
#     import std::crypto::md5::Md5
#
#     let hasher = Md5.new
#
#     hasher.write('hello'.to_byte_array)
#     hasher.finalize.to_string # => '5d41402abc4b2a76b9719d911017c592'
#
# You can also use `Md5.hash`:
#
#     import std::crypto::md5::Md5
#
#     Md5.hash('hello'.to_byte_array).to_string # => '5d41402abc4b2a76b9719d911017c592'
#
# # Limitations
#
# The implementation of MD5 uses a 64-bits signed integer for tracking the
# total message size in bytes. This limits the total message size to 1024 PiB.
import std::crypto::hash::(Block, Hash, Hasher)
import std::crypto::math::(rotate_left_u32, to_u32)
import std::endian::little

let TABLE = [
  # Round one
  0xD76AA478, 0xE8C7B756, 0x242070DB, 0xC1BDCEEE,
  0xF57C0FAF, 0x4787C62A, 0xA8304613, 0xFD469501,
  0x698098D8, 0x8B44F7AF, 0xFFFF5BB1, 0x895CD7BE,
  0x6B901122, 0xFD987193, 0xA679438E, 0x49B40821,

  # Round two
  0xF61E2562, 0xC040B340, 0x265E5A51, 0xE9B6C7AA,
  0xD62F105D, 0x02441453, 0xD8A1E681, 0xE7D3FBC8,
  0x21E1CDE6, 0xC33707D6, 0xF4D50D87, 0x455A14ED,
  0xA9E3E905, 0xFCEFA3F8, 0x676F02D9, 0x8D2A4C8A,

  # Round three
  0xFFFA3942, 0x8771F681, 0x6D9D6122, 0xFDE5380C,
  0xA4BEEA44, 0x4BDECFA9, 0xF6BB4B60, 0xBEBFBC70,
  0x289B7EC6, 0xEAA127FA, 0xD4EF3085, 0x04881D05,
  0xD9D4D039, 0xE6DB99E5, 0x1FA27CF8, 0xC4AC5665,

  # Round four
  0xF4292244, 0x432AFF97, 0xAB9423A7, 0xFC93A039,
  0x655B59C3, 0x8F0CCC92, 0xFFEFF47D, 0x85845DD1,
  0x6FA87E4F, 0xFE2CE6E0, 0xA3014314, 0x4E0811A1,
  0xF7537E82, 0xBD3AF235, 0x2AD7D2BB, 0xEB86D391,
]

let SHIFTS = [
  # Round one
  7, 12, 17, 22,
  7, 12, 17, 22,
  7, 12, 17, 22,
  7, 12, 17, 22,

  # Round two
  5, 9, 14, 20,
  5, 9, 14, 20,
  5, 9, 14, 20,
  5, 9, 14, 20,

  # Round three
  4, 11, 16, 23,
  4, 11, 16, 23,
  4, 11, 16, 23,
  4, 11, 16, 23,

  # Round four
  6, 10, 15, 21,
  6, 10, 15, 21,
  6, 10, 15, 21,
  6, 10, 15, 21
]

let BLOCK_SIZE = 64

# An MD5 hasher.
class pub Md5 {
  let @block: Block
  let @words: Array[Int]
  let @size: Int
  let @a: Int
  let @b: Int
  let @c: Int
  let @d: Int

  # Generates a hash for the given bytes.
  #
  # # Examples
  #
  #     import std::crypto::md5::Md5
  #
  #     Md5.hash('hello')
  fn pub static hash(bytes: ref ByteArray) -> Hash {
    let hasher = new

    hasher.write(bytes)
    hasher.finalize
  }

  # Returns a new instance of the hasher.
  fn pub static new -> Self {
    Self {
      @block = Block.new(BLOCK_SIZE),
      @words = Array.filled(with: 0, times: 16),
      @size = 0,
      @a = 0x67452301,
      @b = 0xEFCDAB89,
      @c = 0x98BADCFE,
      @d = 0x10325476,
    }
  }

  fn mut compress {
    let words = @words

    16.times fn (i) { words[i] = @block.read_u32_le(i * 4) }

    let mut a = @a
    let mut b = @b
    let mut c = @c
    let mut d = @d
    let mut i = 0

    while i < BLOCK_SIZE {
      let mut f = 0
      let mut word = i

      match i >> 4 {
        case 0 -> f = (b & c) | (b.not & d)
        case 1 -> {
          f = (b & d) | (c & d.not)
          word = word * 5 + 1 & 15
        }
        case 2 -> {
          f = b ^ c ^ d
          word = word * 3 + 5 & 15
        }
        case _ -> {
          f = c ^ (b | d.not)
          word = word * 7 & 15
        }
      }

      f = to_u32(
        f.wrapping_add(a).wrapping_add(words[word]).wrapping_add(TABLE[i])
      )

      let temp = to_u32(b.wrapping_add(rotate_left_u32(f, SHIFTS[i])))

      a = d
      d = c
      c = b
      b = temp
      i += 1
    }

    @a = to_u32(a.wrapping_add(@a))
    @b = to_u32(b.wrapping_add(@b))
    @c = to_u32(c.wrapping_add(@c))
    @d = to_u32(d.wrapping_add(@d))
  }
}

impl Hasher for Md5 {
  fn pub mut write(bytes: ref ByteArray) {
    @size += bytes.length
    @block.write_bytes(bytes) fn { compress }
  }

  fn pub move finalize -> Hash {
    @block.add_padding(8) fn { compress }
    @block.write_length_le(@size * 8, at: 56)
    compress

    let out = ByteArray.filled(with: 0, times: 16)

    little.write_u32(@a, into: out, at: 0)
    little.write_u32(@b, into: out, at: 4)
    little.write_u32(@c, into: out, at: 8)
    little.write_u32(@d, into: out, at: 12)
    Hash.new(out)
  }
}
