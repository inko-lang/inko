# The ChaCha family of stream ciphers.
#
# This module provides the ChaCha20 and XChaCha20 stream ciphers, and the
# HChaCha20 hash function. The implementations are based on the following RFCs:
#
# - https://datatracker.ietf.org/doc/html/rfc8439
# - https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha
import std::crypto::cipher::Cipher
import std::crypto::hash::(Hash, Hasher)
import std::crypto::math::(rotate_left_u32, to_u32)
import std::endian::little
import std::index::(Index, SetIndex)

# The ChaCha key size in bytes.
let KEY_SIZE = 256 / 8

# The nonce size in bytes.
let CHACHA_NONCE_SIZE = 96 / 8

# The nonce size for HChaCha20
let HCHACHA_NONCE_SIZE = 128 / 8

# The nonce size for XChaCha20
let XCHACHA_NONCE_SIZE = 192 / 8

# The size in bytes of a ChaCha block.
let BLOCK_SIZE = 64

# The maximum value of the block counter.
let MAX_COUNTER = 2 ** 32 - 1

# The number of values in a matrix.
let MATRIX_SIZE = 16

# The default counter value of a ChaCha cipher.
let DEFAULT_COUNTER = 0

# Derives a sub-key from a secret key and nonce, using the HChaCha20 algorithm.
#
# HChaCha20 is a hasher used as part of XChaCha20, and may be used for other
# similar purposes such as X25519 key derivation. It's not a general-purpose
# cryptographic hasher, and direct use is best avoided unless you're certain you
# must use the HChaCha20 hasher.
#
# The API is different from traditional cryptographic hashers, as HChaCha20
# isn't meant to hash arbitrary input.
#
# The return value is a ByteArray containing the 256-bit derived sub-key.
#
# # Panics
#
# This method panics if `key` isn't exactly 32 bytes, or if `nonce` isn't
# exactly 16 bytes.
fn pub hchacha20(key: ref ByteArray, nonce: ref ByteArray) -> ByteArray {
  if key.length != KEY_SIZE {
    panic("HChaCha20 key sizes must be exactly {KEY_SIZE} bytes")
  }

  if nonce.length != HCHACHA_NONCE_SIZE {
    panic("HChaCha20 nonce sizes must be exactly {HCHACHA_NONCE_SIZE} bytes")
  }

  let out = ByteArray.filled(with: 0, times: 32)
  let matrix = Matrix {
    @words = [
      0x61707865,
      0x3320646E,
      0x79622D32,
      0x6B206574,
      little.read_u32(from: key, at: 0),
      little.read_u32(from: key, at: 4),
      little.read_u32(from: key, at: 8),
      little.read_u32(from: key, at: 12),
      little.read_u32(from: key, at: 16),
      little.read_u32(from: key, at: 20),
      little.read_u32(from: key, at: 24),
      little.read_u32(from: key, at: 28),
      little.read_u32(from: nonce, at: 0),
      little.read_u32(from: nonce, at: 4),
      little.read_u32(from: nonce, at: 8),
      little.read_u32(from: nonce, at: 12),
    ]
  }

  matrix.perform_rounds
  little.write_u32(matrix.words[0], into: out, at: 0)
  little.write_u32(matrix.words[1], into: out, at: 4)
  little.write_u32(matrix.words[2], into: out, at: 8)
  little.write_u32(matrix.words[3], into: out, at: 12)
  little.write_u32(matrix.words[12], into: out, at: 16)
  little.write_u32(matrix.words[13], into: out, at: 20)
  little.write_u32(matrix.words[14], into: out, at: 24)
  little.write_u32(matrix.words[15], into: out, at: 28)
  out
}

class Matrix {
  let @words: Array[Int]

  fn mut quarter_round(a: Int, b: Int, c: Int, d: Int) {
    let words = @words

    words[a] = to_u32(words[a].wrapping_add(words[b]))
    words[d] = rotate_left_u32(words[d] ^ words[a], 16)

    words[c] = to_u32(words[c].wrapping_add(words[d]))
    words[b] = rotate_left_u32(words[b] ^ words[c], 12)

    words[a] = to_u32(words[a].wrapping_add(words[b]))
    words[d] = rotate_left_u32(words[d] ^ words[a], 8)

    words[c] = to_u32(words[c].wrapping_add(words[d]))
    words[b] = rotate_left_u32(words[b] ^ words[c], 7)
  }

  fn mut perform_rounds {
    # ChaCha20 consists of 10 iterations of one column round and one diagonal
    # round, producing a total of 20 rounds (hence the name).
    10.times fn (_) {
      quarter_round(0, 4, 8, 12)
      quarter_round(1, 5, 9, 13)
      quarter_round(2, 6, 10, 14)
      quarter_round(3, 7, 11, 15)

      quarter_round(0, 5, 10, 15)
      quarter_round(1, 6, 11, 12)
      quarter_round(2, 7, 8, 13)
      quarter_round(3, 4, 9, 14)
    }
  }

  fn length -> Int {
    @words.length
  }
}

impl Index[Int, Int] for Matrix {
  fn pub index(index: Int) -> Int {
    @words[index]
  }
}

impl SetIndex[Int, Int] for Matrix {
  fn pub mut set_index(index: Int, value: Int) {
    @words[index] = value
  }
}

# The ChaCha20 stream cipher.
#
# ChaCha is a stream cipher similar to Salsa20. Our implementation is based on
# RFC 8439.
#
# This type provides only a stream cipher, and integrity/authenticity validation
# is performed.
#
# For more information about ChaCha, consider reading/watching the following
# resources:
#
# - https://datatracker.ietf.org/doc/html/rfc8439
# - https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant
# - https://www.youtube.com/watch?v=UeIpq-C-GSA
#
# # Limitations
#
# As our implementation is based on RFC 8439, the total message size is limited
# to 256 GiB. When reaching this limit the cipher panics, as the alternative is
# a silent overflow that could lead to weaker/broken encryption.
#
# # Examples
#
# Encrypting and decrypting using the same cipher:
#
#     import std::crypto::chacha::ChaCha20
#     import std::rand::Random
#
#     let rand = Random.new
#     let key = rand.bytes(size: 32)
#     let nonce = rand.bytes(size: 12)
#     let cipher = ChaCha20.new(key, nonce)
#
#     let plaintext = 'I like turtles'
#     let encrypted = cipher.encrypt(plaintext.to_byte_array)
#
#     # If we want to decrypt reusing the same cipher, we must first reset the
#     # block counter to its initial value:
#     cipher.counter = 0
#     cipher.decrypt(encrypted).to_string # => 'I like turtles'
#
# You can also decrypt using a new cipher, as long as the key, nonce and
# starting block counter are the same:
#
#     import std::crypto::chacha::ChaCha20
#     import std::rand::Random
#
#     let rand = Random.new
#     let key = rand.bytes(size: 32)
#     let nonce = rand.bytes(size: 12)
#
#     let plaintext = 'I like turtles'
#     let encrypted = ChaCha20.new(key, nonce).encrypt(plaintext.to_byte_array)
#
#     ChaCha20
#       .new(key, nonce)
#       .decrypt(encrypted)
#       .to_string # => 'I like turtles'
class pub ChaCha20 {
  let @matrix: Matrix

  # Returns a new ChaCha20 cipher from the given key and nonce.
  #
  # The key _must_ be something generated randomly and securely, not something
  # predictable.
  #
  # The nonce _must_ be unique for every message encrypted using this cipher.
  # Using the same nonce for different messages weakens the encryption.
  #
  # The block counter defaults to zero.
  #
  # # Panics
  #
  # This method panics if `key` isn't exactly 32 bytes, or if `nonce` isn't
  # exactly 8 bytes.
  #
  # # Examples
  #
  #     import std::crypto::chacha::ChaCha20
  #     import std::rand::Random
  #
  #     let rand = Random.new
  #     let key = rand.bytes(size: 32)
  #     let nonce = rand.bytes(size: 12)
  #
  #     ChaCha20.new(key, nonce)
  #
  # In this example we use a randomly generated key and nonce. In production
  # environments you must ensure that the nonce is never reused for the same
  # key. Simply generating a random nonce isn't enough, as given enough time and
  # bad luck the same nonce may be produced.
  fn pub static new(key: ref ByteArray, nonce: ref ByteArray) -> Self {
    if key.length != KEY_SIZE {
      panic("ChaCha20 key sizes must be exactly {KEY_SIZE} bytes")
    }

    if nonce.length != CHACHA_NONCE_SIZE {
      panic("ChaCha20 nonce sizes must be exactly {CHACHA_NONCE_SIZE} bytes")
    }

    Self {
      @matrix = Matrix {
        @words = [
          0x61707865,
          0x3320646E,
          0x79622D32,
          0x6B206574,
          little.read_u32(from: key, at: 0),
          little.read_u32(from: key, at: 4),
          little.read_u32(from: key, at: 8),
          little.read_u32(from: key, at: 12),
          little.read_u32(from: key, at: 16),
          little.read_u32(from: key, at: 20),
          little.read_u32(from: key, at: 24),
          little.read_u32(from: key, at: 28),
          DEFAULT_COUNTER,
          little.read_u32(from: nonce, at: 0),
          little.read_u32(from: nonce, at: 4),
          little.read_u32(from: nonce, at: 8),
        ]
      }
    }
  }

  # Sets the block counter to the given value.
  #
  # # Panics
  #
  # This method panics if the value doesn't fit in the range valid for an
  # unsigned 32-bits integer.
  fn pub mut counter=(value: Int) {
    if value < 0 or value > MAX_COUNTER {
      panic("ChaCha block counters must be between 0 and {MAX_COUNTER}")
    } else {
      @matrix[12] = value
    }
  }

  fn mut apply(input: ref ByteArray) -> ByteArray {
    let mut len = input.length
    let mut offset = 0
    let buf = ByteArray.filled(with: 0, times: BLOCK_SIZE)
    let out = ByteArray.filled(with: 0, times: input.length)
    let tmp = Matrix { @words = Array.filled(with: 0, times: MATRIX_SIZE) }

    loop {
      MATRIX_SIZE.times fn (i) { tmp[i] = @matrix[i] }
      tmp.perform_rounds
      MATRIX_SIZE.times fn (i) {
        tmp[i] = to_u32(tmp[i].wrapping_add(@matrix[i]))
        little.write_u32(tmp[i], into: buf, at: i * 4)
      }

      # This in itself can't overflow, as the Int type is a 64-bits signed
      # integer, and below we limit it to the range that fits in a 32-bits
      # unsigned integer.
      let new_length = @matrix[12] + 1

      # The original implementation makes no attempt at protecting the user from
      # overflowing the counter, as it's unlikely to happen in the first place.
      # Since we use a 32-bits counter it's still highly unlikely, but more
      # likely compared to using a 64-bits counter. Because it's so unlikely for
      # this to happen in practise we simply panic, instead of complicating the
      # API by forcing the user to handle errors that won't occur in 99.99999%
      # of all use cases.
      if new_length > MAX_COUNTER {
        panic("The block counter overflowed after {MAX_COUNTER} blocks")
      }

      @matrix[12] = new_length

      if len <= BLOCK_SIZE {
        len.times fn (i) { out[offset + i] = input[offset + i] ^ buf[i] }
        return out
      }

      BLOCK_SIZE.times fn (i) { out[offset + i] = input[offset + i] ^ buf[i] }

      len -= BLOCK_SIZE
      offset += BLOCK_SIZE
    }
  }
}

impl Cipher for ChaCha20 {
  fn pub mut encrypt(bytes: mut ByteArray) -> ByteArray {
    apply(bytes)
  }

  fn pub mut decrypt(bytes: mut ByteArray) -> ByteArray {
    apply(bytes)
  }
}

# The XChaCha20 stream cipher.
#
# XChaCha20 combines a regular ChaCha20 stream cipher with the HChaCha20 hasher.
# It uses a 192-bits nonce, which is large enough that one can generate it
# randomly.
#
# For more information about XChaCha20 and the differences between it and
# ChaCha20, consider reading the RFC that describes XChaCha20 at
# https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha.
class pub XChaCha20 {
  let @chacha: ChaCha20

  # Returns a new XChaCha20 cipher from the given key and nonce.
  #
  # The key _must_ be something generated randomly and securely, not something
  # predictable.
  #
  # The nonce _must_ be unique for every message encrypted using this cipher.
  # Using the same nonce for different messages weakens the encryption.
  #
  # Compared to regular ChaCha20 it's fine for randomly generate the nonce, as
  # it's large enough that reuse of the same nonce is unlikely to occur.
  #
  # # Panics
  #
  # This method panics if `key` isn't exactly 32 bytes, or if `nonce` isn't
  # exactly 24 bytes.
  #
  # # Examples
  #
  #     import std::crypto::chacha::XChaCha20
  #     import std::rand::Random
  #
  #     let rand = Random.new
  #     let key = rand.bytes(size: 32)
  #     let nonce = rand.bytes(size: 24)
  #
  #     XChaCha20.new(key, nonce)
  fn pub static new(key: ref ByteArray, nonce: ref ByteArray) -> Self {
    if key.length != KEY_SIZE {
      panic("XChaCha20 key sizes must be exactly {KEY_SIZE} bytes")
    }

    if nonce.length != XCHACHA_NONCE_SIZE {
      panic("XChaCha20 nonce sizes must be exactly {XCHACHA_NONCE_SIZE} bytes")
    }

    let sub_key = hchacha20(key, nonce.slice(start: 0, length: 16))

    Self {
      @chacha = ChaCha20 {
        @matrix = Matrix {
          @words = [
            0x61707865,
            0x3320646E,
            0x79622D32,
            0x6B206574,
            little.read_u32(from: sub_key, at: 0),
            little.read_u32(from: sub_key, at: 4),
            little.read_u32(from: sub_key, at: 8),
            little.read_u32(from: sub_key, at: 12),
            little.read_u32(from: sub_key, at: 16),
            little.read_u32(from: sub_key, at: 20),
            little.read_u32(from: sub_key, at: 24),
            little.read_u32(from: sub_key, at: 28),
            DEFAULT_COUNTER,
            0,
            little.read_u32(from: nonce, at: 16),
            little.read_u32(from: nonce, at: 20),
          ]
        }
      }
    }
  }

  # Sets the block counter to the given value.
  #
  # # Panics
  #
  # This method panics if the value doesn't fit in the range valid for an
  # unsigned 32-bits integer.
  fn pub mut counter=(value: Int) {
    @chacha.counter = value
  }
}

impl Cipher for XChaCha20 {
  fn pub mut encrypt(bytes: mut ByteArray) -> ByteArray {
    @chacha.apply(bytes)
  }

  fn pub mut decrypt(bytes: mut ByteArray) -> ByteArray {
    @chacha.apply(bytes)
  }
}
