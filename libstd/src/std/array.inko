# An ordered, integer-indexed generic collection of values.
import std::clone::Clone
import std::cmp::(Contains, Equal)
import std::drop::Drop
import std::fmt::(Format, Formatter)
import std::hash::(Hash, Hasher)
import std::index::(bounds_check, Index, IndexMut, SetIndex)
import std::iter::(Enum, Iter)
import std::option::Option
import std::random::(int_range)

# An ordered, integer-indexed generic collection of values.
#
# Accessing values in an `Array` is a constant-time operation.
#
# Arrays are created using the array literal syntax, instead of using a method.
# Here's how you'd create an empty Array:
#
#     []
#
# And here's how you'd create an Array with values:
#
#     [10, 20, 30]
#
# All values in an array must be of the same type, and the array's value type is
# based on the type of the first value.
class builtin Array[T] {
  # Returns a new `Array` with enough space for at least `amount` values.
  #
  # The actual capacity may be greater than the given value.
  fn pub static with_capacity(amount: Int) -> Array[T] {
    let vals = []

    _INKO.array_reserve(vals, amount)
    vals
  }

  # Returns an array filled with a certain amount of values.
  #
  # The `times` argument specifies how many times the `with` argument must
  # exist in the array.
  #
  # # Examples
  #
  #     Array.filled(with: 0, times: 4) # => [0, 0, 0, 0]
  fn pub static filled[V: Clone](with: V, times: Int) -> Array[V] {
    let array = with_capacity(times)

    if times == 0 { return array }

    (times - 1).times fn (_) { array.push(with.clone) }
    array.push(with)
    array
  }

  # Removes all values in the Array.
  #
  # # Examples
  #
  #     let array = [10, 20, 30]
  #
  #     array.clear
  #     array.empty? # => true
  fn pub mut clear {
    let mut index = 0
    let max = length

    while index < max {
      _INKO.array_get(self, index := index + 1) as T
    }

    _INKO.array_clear(self)
  }

  # Pushes a value to the back of the Array.
  #
  # # Examples
  #
  # Pushing a value into an Array:
  #
  #     let array = []
  #
  #     array.push(10) # => Nil
  #     array[0]       # => 10
  fn pub mut push(value: T) {
    _INKO.array_push(self, value)
    _INKO.moved(value)
  }

  # Removes a value from the back of the Array, returning the removed value.
  #
  # If no value was found, a None is returned instead.
  #
  # # Examples
  #
  # Popping an existing value:
  #
  #     let array = [10]
  #
  #     array.pop    # => Option.Some(10)
  #     array.empty? # => true
  #
  # Popping a value when the Array is empty:
  #
  #     let array = []
  #
  #     array.pop # => Option.None
  fn pub mut pop -> Option[T] {
    let val = _INKO.array_pop(self) as T

    if _INKO.is_undefined(val) { Option.None } else { Option.Some(val) }
  }

  # Removes the value at the given index, returning the removed value.
  #
  # # Examples
  #
  # Removing an existing value will result in the value being removed from the
  # Array and returned:
  #
  #     let array = [10]
  #
  #     array.remove_at(0) # => 10
  #     array.empty?       # => true
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  fn pub mut remove_at(index: Int) -> T {
    bounds_check(index, length)
    _INKO.array_remove(self, index) as T
  }

  # Returns an immutable reference to the value at the given index.
  #
  # # Examples
  #
  # Retrieving an existing value:
  #
  #     let numbers = [10, 20]
  #
  #     numbers.get(0) # => Option.Some(ref 10)
  #
  # Retrieving a value from a non-existing index:
  #
  #     let numbers = [10, 20]
  #
  #     numbers.get(5) # => Option.None
  fn pub get(index: Int) -> Option[ref T] {
    if index < 0 or index >= length { return Option.None }

    let raw = _INKO.array_get(self, index) as T
    let res = ref raw

    _INKO.moved(raw)
    Option.Some(res)
  }

  # Returns a mutable reference to the value at the given index.
  #
  # # Examples
  #
  # Retrieving an existing value:
  #
  #     let numbers = [10, 20]
  #
  #     numbers.get_mut(0) # => Option.Some(mut 10)
  #
  # Retrieving a value from a non-existing index:
  #
  #     let numbers = [10, 20]
  #
  #     numbers.get_mut(5) # => Option.None
  fn pub mut get_mut(index: Int) -> Option[mut T] {
    if index < 0 or index >= length { return Option.None }

    let raw = _INKO.array_get(self, index) as T
    let res = mut raw

    _INKO.moved(raw)
    Option.Some(res)
  }

  # Inserts the value at the given index, returning the old value.
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  #
  # # Examples
  #
  #     let numbers = [10, 20, 30]
  #
  #     numbers.swap(index: 1, with: 40) # => 20
  #     numbers                          # => [10, 40, 30]
  fn pub mut swap(index: Int, with: T) -> T {
    bounds_check(index, length)

    let result = _INKO.array_set(self, index, with) as T

    _INKO.moved(with)
    result
  }

  # Returns an iterator that yields immutable references to the values in
  # `self`.
  fn pub iter -> Iter[ref T, Never] {
    Enum.indexed(length) fn (index) { self[index] }
  }

  # Returns an iterator that yields mutable references to the values in `self`.
  fn pub mut iter_mut -> Iter[mut T, Never] {
    Enum.indexed(length) fn (index) { self[index] }
  }

  # Returns an `Iter` that iterates over all values in `self`, returning them
  # by value.
  #
  # # Examples
  #
  #     let numbers = [10, 20, 30]
  #     let iter = numbers.into_iter
  #
  #     iter.next # => Option.Some(10)
  #     iter.next # => Option.Some(20)
  #     iter.next # => Option.Some(30)
  #     iter.next # => Option.None
  fn pub move into_iter -> IntoIter[T] {
    IntoIter { @array = self, @index = 0 }
  }

  # Returns an `Iter` that iterates over all values in `self` in reverse
  # order.
  #
  # # Examples
  #
  # Iterating over an `Array` in reverse order:
  #
  #     let numbers = [10, 20, 30]
  #     let iter = numbers.reverse_iter
  #
  #     iter.next # => Option.Some(30)
  #     iter.next # => Option.Some(20)
  #     iter.next # => Option.Some(10)
  #     iter.next # => Option.None
  fn pub reverse_iter -> Iter[ref T, Never] {
    let mut index = length - 1

    Enum.new fn move {
      if index > -1 {
        Option.Some(self[index := index - 1])
      } else {
        Option.None
      }
    }
  }

  # Appends the values of the given `Array` to `self`.
  #
  # # Examples
  #
  # Appending one `Array` to another:
  #
  #     let numbers = [10, 20, 30]
  #
  #     numbers.append([40, 50])
  #
  #     numbers.length # => 5
  fn pub mut append(other: Self) {
    other.into_iter.each fn (v) { push(v) }
  }

  # Returns the number of values in this Array.
  #
  # # Examples
  #
  # Getting the length of an empty Array:
  #
  #     [].length # => 0
  #
  # Getting the length of an Array with values:
  #
  #     [10].length # => 1
  fn pub length -> Int {
    _INKO.array_length(self)
  }

  # Returns the number of values that can be stored in `self` before `self`
  # needs to be resized.
  #
  # # Examples
  #
  #     Array.with_capacity(2).capacity # => 4
  fn pub capacity -> Int {
    _INKO.array_capacity(self)
  }

  # Returns `true` if `self` is empty.
  #
  # # Examples
  #
  #     [10].empty? # => false
  #     [].empty?     # => true
  fn pub empty? -> Bool {
    length == 0
  }

  # Sorts the values in `self` such that they are in a random order.
  #
  # # Examples
  #
  #   let a = [10, 20]
  #
  #   a.shuffle
  #
  #   a # => [20, 10]
  fn pub mut shuffle {
    # The algorithm used here is Sattolo's algorithm. Some more details on this
    # are found here:
    #
    # - https://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle#Sattolo's_algorithm
    # - https://danluu.com/sattolo/
    # - https://rosettacode.org/wiki/Sattolo_cycle
    #
    # Note that the types produced by `array_get()` and `array_set()` are `Any`.
    # These values aren't dropped automatically, so there's no need to mark them
    # as moved to prevent them from being dropped after the swap.
    let mut swap = length - 1

    while swap > 0 {
      let swap_with = int_range(start: 0, stop: swap)
      let swap_val = _INKO.array_get(self, swap)

      _INKO.array_set(self, swap, _INKO.array_set(self, swap_with, swap_val))

      swap -= 1
    }
  }

  # Reverses `self` in-place
  #
  # # Examples
  #
  #     let a = [10, 20, 30]
  #
  #     a.reverse
  #
  #     a # => [30, 20, 10]
  fn pub mut reverse {
    let mut a = 0
    let mut b = length - 1

    while a < b {
      let a_val = _INKO.array_get(self, a)

      _INKO.array_set(self, a, _INKO.array_set(self, b, a_val))

      a += 1
      b -= 1
    }
  }
}

impl Drop for Array {
  fn mut drop {
    let mut index = 0

    while index < length { _INKO.array_get(self, index := index + 1) as T }

    _INKO.array_drop(self)
  }
}

impl Contains[T] for Array if T: Equal {
  # Returns `true` if `self` contains the given value.
  #
  # # Examples
  #
  # Checking if an `Array` contains a value:
  #
  #     [10, 20, 30].contains?(10) # => true
  fn pub contains?(value: ref T) -> Bool {
    iter.any? fn (ours) { ours == value }
  }
}

impl Index[Int, ref T] for Array {
  fn pub index(index: Int) -> ref T {
    bounds_check(index, length)

    let raw = _INKO.array_get(self, index) as T
    let res = ref raw

    _INKO.moved(raw)
    res
  }
}

impl IndexMut[Int, mut T] for Array {
  fn pub mut index_mut(index: Int) -> mut T {
    bounds_check(index, length)

    let raw = _INKO.array_get(self, index) as T
    let res = mut raw

    _INKO.moved(raw)
    res
  }
}

impl SetIndex[Int, T] for Array {
  # Stores a value at the given index.
  #
  # If a value is already present at the given index, it's dropped before the
  # new value overwrites it.
  #
  # # Examples
  #
  # Setting an index to a value:
  #
  #     let array = []
  #
  #     array[0] = 10 # => 10
  #     array         # => [10]
  #
  # # Panics
  #
  # This method panics if the index is out of bounds.
  fn pub mut set_index(index: Int, value: T) {
    bounds_check(index, length)
    _INKO.array_set(self, index, value) as T
    _INKO.moved(value)
  }
}

impl Clone for Array if T: Clone {
  fn pub clone -> Self {
    let copy = []
    let mut index = 0
    let max = length

    while index < max { copy.push(self[index := index + 1].clone) }

    copy
  }
}

impl Equal for Array if T: Equal {
  # Returns `true` if `self` and the given `Array` are identical.
  #
  # # Examples
  #
  # Comparing two identical arrays:
  #
  #     [10, 20, 30] == [10, 20, 30] # => true
  #
  # Comparing two arrays with a different length:
  #
  #     [10] == [10, 20] # => false
  #
  # Comparing two arrays with the same length but with different values:
  #
  #     [10, 20] == [20, 10] # => false
  fn pub ==(other: ref Self) -> Bool {
    if length != other.length { return false }

    let mut index = 0
    let max = length

    while index < max {
      let ours = self[index]
      let theirs = other[index]

      if ours != theirs { return false }

      index += 1
    }

    true
  }
}

impl Hash for Array if T: Hash {
  fn pub hash(hasher: mut Hasher) {
    let mut index = 0
    let max = length

    while index < max { self[index := index + 1].hash(hasher) }
  }
}

impl Format for Array if T: Format {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write('[')

    iter.each_with_index fn (index, value) {
      if index > 0 { formatter.write(', ') }

      value.fmt(formatter)
    }

    formatter.write(']')
  }
}

# An iterator that moves values out of an `Array`.
#
# When this iterator is dropped, any values not yet moved out of the `Array` are
# dropped.
class pub IntoIter[T] {
  # The Array is typed as `Any` so we don't run its destructor. This way we can
  # drop an `IntoIter` even when some values have been moved out of the Array.
  let @array: Any
  let @index: Int

  fn mut take_next -> T {
    _INKO.array_get(@array, @index := @index + 1) as T
  }

  fn length -> Int {
    _INKO.array_length(@array)
  }
}

impl Drop for IntoIter {
  fn mut drop {
    while @index < length { take_next }

    _INKO.array_drop(@array)
  }
}

impl Iter[T, Never] for IntoIter {
  fn pub mut next -> Option[T] {
    if @index < length { Option.Some(take_next) } else { Option.None }
  }
}
