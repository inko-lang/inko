# Types for formatting objects in a human-readable manner.
import std::string::(IntoString, StringBuffer)

# The value to use for objects if the nesting is too great.
let PLACEHOLDER = '...'

# The maximum number of objects to recurse into when formatting an object,
# before returning a placeholder.
let MAX_DEPTH = 16

# A Formatter can be used to format an object for debugging purposes.
trait pub Formatter: IntoString {
  # Writes the given `String` into the underlying buffer.
  fn pub mut write(string: String)

  # Descends into a child object, running the supplied block if the object
  # should be formatted.
  #
  # This method can be used to produce a placeholder when formatting an object
  # that is too deeply nested.
  fn pub mut descend(block: fn)
}

# The default formatter to use when formatting an object.
class pub DefaultFormatter {
  let @buffer: StringBuffer
  let @nesting: Int

  fn pub static new -> Self {
    Self { @buffer = StringBuffer.new, @nesting = 0 }
  }
}

impl IntoString for DefaultFormatter {
  # Returns a `String` containing the data pushed into this buffer so far.
  fn pub move into_string -> String {
    @buffer.into_string
  }
}

impl Formatter for DefaultFormatter {
  # Pushes a new `String` into the underlying buffer.
  fn pub mut write(string: String) {
    @buffer.push(string)
  }

  # Descends into a child object, running the supplied block if our nesting is
  # not too great.
  #
  # If nesting _is_ too great, a placeholder value is added to the buffer, and
  # the supplied block is not executed.
  fn pub mut descend(block: fn) {
    if @nesting >= MAX_DEPTH {
      write(PLACEHOLDER)
      return
    }

    @nesting += 1

    block.call

    @nesting -= 1
  }
}

# A type that can be formatted into a human-readable format for debugging
# purposes.
trait pub Format {
  # Formats `self` in a human-readable format for debugging purposes.
  fn pub fmt(formatter: mut Formatter)
}
