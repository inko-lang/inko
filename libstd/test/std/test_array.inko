import helpers::(fmt, hash, Script)
import std::drop::(drop, Drop)
import std::test::Tests

class Counter {
  let @value: Int

  fn static new -> Self {
    Self { @value = 0 }
  }
}

class TrackDrop {
  let @counter: mut Counter

  fn static new(counter: mut Counter) -> Self {
    Self { @counter = counter }
  }
}

impl Drop for TrackDrop {
  fn mut drop {
    @counter.value += 1
  }
}

fn pub tests(t: mut Tests) {
  t.test('Array.with_capacity') fn (t) {
    let ary1: Array[Int] = Array.with_capacity(0)
    let ary2: Array[Int] = Array.with_capacity(2)

    t.equal(ary1.capacity, 0)
    t.equal(ary2.capacity, 4)
  }

  t.test('Array.filled') fn (t) {
    t.equal(Array.filled(with: 1, times: 0), [])
    t.equal(Array.filled(with: 1, times: 1), [1])
    t.equal(Array.filled(with: 1, times: 3), [1, 1, 1])
  }

  t.test('Array.clear') fn (t) {
    let count = Counter.new
    let vals = [TrackDrop.new(count), TrackDrop.new(count)]

    vals.clear

    t.equal(vals.length, 0)
    t.equal(count.value, 2)
  }

  t.test('Array.push') fn (t) {
    let vals = []

    vals.push(10)
    vals.push(20)

    t.equal(vals, [10, 20])
  }

  t.test('Array.pop') fn (t) {
    let vals = [10, 20]

    t.equal(vals.pop, Option.Some(20))
    t.equal(vals.pop, Option.Some(10))
    t.equal(vals.pop, Option.None)
  }

  t.test('Array.remove_at') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.remove_at(1), 20)
    t.equal(vals, [10, 30])
    t.true(
      Script
        .new(id: t.id, code: '[10].remove_at(5)')
        .run
        .contains?('out of bounds')
    )
  }

  t.test('Array.get') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.get(1), Option.Some(ref 20))
    t.equal(vals.get(5), Option.None)
    t.equal(vals.get(-5), Option.None)
  }

  t.test('Array.get_mut') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.get(1), Option.Some(mut 20))
    t.equal(vals.get(5), Option.None)
    t.equal(vals.get(-5), Option.None)
  }

  t.test('Array.swap') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.swap(index: 1, with: 40), 20)
    t.equal(vals, [10, 40, 30])
    t.true(
      Script
        .new(id: t.id, code: '[10].swap(index: 5, with: 42)')
        .run
        .contains?('out of bounds')
    )
  }

  t.test('Array.iter') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.iter.to_array, [ref 10, ref 20, ref 30])
  }

  t.test('Array.iter_mut') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.iter_mut.to_array, [mut 10, mut 20, mut 30])
  }

  t.test('Array.into_iter') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.into_iter.to_array, [10, 20, 30])
  }

  t.test('Array.reverse_iter') fn (t) {
    let vals = [10, 20, 30]

    t.equal(vals.reverse_iter.to_array, [ref 30, ref 20, ref 10])
  }

  t.test('Array.append') fn (t) {
    let vals = [10, 20]

    vals.append([30])

    t.equal(vals, [10, 20, 30])
  }

  t.test('Array.length') fn (t) {
    t.equal(([] as Array[Int]).length, 0)
    t.equal([10, 20].length, 2)
  }

  t.test('Array.empty?') fn (t) {
    t.true(([] as Array[Int]).empty?)
    t.false([10].empty?)
  }

  t.test('Array.shuffle') fn (t) {
    let one = [10]
    let two = [10, 20]
    let three = [10, 20, 30]

    one.shuffle
    two.shuffle
    three.shuffle

    t.equal(one, [10])
    t.equal(two, [20, 10])
    t.true(
      three == [10, 30, 20]
        or three == [20, 10, 30]
        or three == [20, 30, 10]
        or three == [30, 10, 20]
        or three == [30, 20, 10]
    )
  }

  t.test('Array.reverse') fn (t) {
    let vals = [10, 20, 30]

    vals.reverse

    t.equal(vals, [30, 20, 10])
  }

  t.test('Array.drop') fn (t) {
    let count = Counter.new

    drop([TrackDrop.new(count), TrackDrop.new(count)])

    t.equal(count.value, 2)
  }

  t.test('Array.contains?') fn (t) {
    t.true([10, 20].contains?(10))
    t.true([10, 20].contains?(20))
    t.false(([] as Array[Int]).contains?(30))
    t.false([10, 20].contains?(30))
  }

  t.test('Array.index') fn (t) {
    let vals = [10, 20, 30]

    t.equal((ref vals)[1], ref 20)
    t.true(
      Script.new(id: t.id, code: '(ref [10])[2]').run.contains?('out of bounds')
    )
  }

  t.test('Array.index_mut') fn (t) {
    let vals = [10, 20, 30]

    t.equal((mut vals)[1], mut 20)
    t.true(
      Script.new(id: t.id, code: '(mut [10])[2]').run.contains?('out of bounds')
    )
  }

  t.test('Array.set_index') fn (t) {
    let count = Counter.new
    let drops = [TrackDrop.new(count)]
    let vals = [10, 20, 30]

    vals[1] = 40
    drops[0] = TrackDrop.new(count)

    t.equal(vals, [10, 40, 30])
    t.equal(count.value, 1)
    t.true(
      Script.new(id: t.id, code: '[10][2] = 4').run.contains?('out of bounds')
    )
  }

  t.test('Array.clone') fn (t) {
    let a = [10, 20, 30]
    let b = a.clone

    t.equal(a, b)
  }

  t.test('Array.==') fn (t) {
    t.equal([10], [10])
    t.not_equal([10], [20])
  }

  t.test('Array.hash') fn (t) {
    let vals = [10, 20]

    t.equal(hash(vals), hash(vals))
  }

  t.test('Array.fmt') fn (t) {
    t.equal(fmt([] as Array[Int]), '[]')
    t.equal(fmt([10]), '[10]')
    t.equal(fmt([10, 20]), '[10, 20]')
  }

  t.test('IntoIter.next') fn (t) {
    let vals = [10, 20].into_iter

    t.equal(vals.next, Option.Some(10))
    t.equal(vals.next, Option.Some(20))
    t.equal(vals.next, Option.None)
  }

  t.test('IntoIter.drop') fn (t) {
    let count = Counter.new

    drop([TrackDrop.new(count), TrackDrop.new(count)].into_iter)

    t.equal(count.value, 2)
  }
}
