import std::test::Tests
import std::crypto::sha1::Sha1

fn pub tests(t: mut Tests) {
  t.test('Sha1.hash') fn (t) {
    let hash = Sha1.hash('hello'.to_byte_array).to_string

    t.equal(hash, 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d')
  }

  t.test('Sha1.write') fn (t) {
    let hasher = Sha1.new

    hasher.write('123456789012345678901234567890123456789'.to_byte_array)
    hasher.write('123456789012345678901234567890123456789'.to_byte_array)
    hasher.write('123456789012345678901234567890123456789'.to_byte_array)
    hasher.write('123456789012345678901234567890123456789'.to_byte_array)
    hasher.write('123456789012345678901234567890123456789'.to_byte_array)
    hasher.write('123456789012345678901234567890123456789'.to_byte_array)

    t.equal(hasher.finalize.to_string, 'f3187648aff45ddbf1f2c9ebf1fd6705c10c2566')
  }

  t.test('Sha1.finalize') fn (t) {
    let cases = [
      ('', 'da39a3ee5e6b4b0d3255bfef95601890afd80709'),
      ('a', '86f7e437faa5a7fce15d1ddcb9eaeaea377667b8'),
      ('abc', 'a9993e364706816aba3e25717850c26c9cd0d89d'),
      ('hello', 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d'),
      ('message digest', 'c12252ceda8be8994d5fa0290a47231c1d16aae3'),
      (
        'abcdefghijklmnopqrstuvwxyz',
        '32d10c7b8cf96570ca04ce37f2a19d84240d3a89'
      ),
      (
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
        '761c457bf73b14d27e9e9265c46f4b4dda11f940'
      ),
      (
        '12345678901234567890123456789012345678901234567890123456789012345678901234567890',
        '50abf5706a150990a08b2c5ea40fa0e585554732',
      ),
      (
        'Inko is a language for building concurrent software with confidence. \
          Inko makes it easy to build concurrent software, without having to \
          worry about unpredictable performance, unexpected runtime errors, \
          race conditions, and type errors.',
        'a5e718cce8889c9b06394c3736663cc245b068df'
      ),
      (
        '0123456701234567012345670123456701234567012345670123456701234567',
        'e0c094e867ef46c350ef54a7f59dd60bed92ae83'
      )
    ]

    cases.into_iter.each fn (pair) {
      let hasher = Sha1.new

      hasher.write(pair.0.to_byte_array)
      t.equal(hasher.finalize.to_string, pair.1)
    }
  }
}
