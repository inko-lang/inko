import std::crypto::poly1305::Poly1305
import std::test::Tests

fn test_data -> Array[(Array[Int], Array[Int], Array[Int])] {
  # Each tuple is in the form (key, input, output)
  #
  # These tests are taken from the Hare test suite, which in turn took them from
  # the Poly1305-AES paper.
  [
    (
      [
        0x85, 0x1F, 0xC4, 0x0C, 0x34, 0x67, 0xAC, 0x0B, 0xE0, 0x5C, 0xC2, 0x04,
        0x04, 0xF3, 0xF7, 0x00, 0x58, 0x0B, 0x3B, 0x0F, 0x94, 0x47, 0xBB, 0x1E,
        0x69, 0xD0, 0x95, 0xB5, 0x92, 0x8B, 0x6D, 0xBC,
      ],
      [0xF3, 0xF6],
      [
        0xF4, 0xC6, 0x33, 0xC3, 0x04, 0x4F, 0xC1, 0x45, 0xF8, 0x4F, 0x33, 0x5C,
        0xB8, 0x19, 0x53, 0xDE,
      ]
    ),
    (
      [
        0xA0, 0xF3, 0x08, 0x00, 0x00, 0xF4, 0x64, 0x00, 0xD0, 0xC7, 0xE9, 0x07,
        0x6C, 0x83, 0x44, 0x03, 0xDD, 0x3F, 0xAB, 0x22, 0x51, 0xF1, 0x1A, 0xC7,
        0x59, 0xF0, 0x88, 0x71, 0x29, 0xCC, 0x2E, 0xE7,
      ],
      [
        # No input for this test.
      ],
      [
        0xDD, 0x3F, 0xAB, 0x22, 0x51, 0xF1, 0x1A, 0xC7, 0x59, 0xF0, 0x88, 0x71,
        0x29, 0xCC, 0x2E, 0xE7,
      ]
    ),
    (
      [
        0x48, 0x44, 0x3D, 0x0B, 0xB0, 0xD2, 0x11, 0x09, 0xC8, 0x9A, 0x10, 0x0B,
        0x5C, 0xE2, 0xC2, 0x08, 0x83, 0x14, 0x9C, 0x69, 0xB5, 0x61, 0xDD, 0x88,
        0x29, 0x8A, 0x17, 0x98, 0xB1, 0x07, 0x16, 0xEF,
      ],
      [
        0x66, 0x3C, 0xEA, 0x19, 0x0F, 0xFB, 0x83, 0xD8, 0x95, 0x93, 0xF3, 0xF4,
        0x76, 0xB6, 0xBC, 0x24, 0xD7, 0xE6, 0x79, 0x10, 0x7E, 0xA2, 0x6A, 0xDB,
        0x8C, 0xAF, 0x66, 0x52, 0xD0, 0x65, 0x61, 0x36,
      ],
      [
        0x0E, 0xE1, 0xC1, 0x6B, 0xB7, 0x3F, 0x0F, 0x4F, 0xD1, 0x98, 0x81, 0x75,
        0x3C, 0x01, 0xCD, 0xBE,
      ]
    ),
    (
      [
        0x12, 0x97, 0x6A, 0x08, 0xC4, 0x42, 0x6D, 0x0C, 0xE8, 0xA8, 0x24, 0x07,
        0xC4, 0xF4, 0x82, 0x07, 0x80, 0xF8, 0xC2, 0x0A, 0xA7, 0x12, 0x02, 0xD1,
        0xE2, 0x91, 0x79, 0xCB, 0xCB, 0x55, 0x5A, 0x57,
      ],
      [
        0xAB, 0x08, 0x12, 0x72, 0x4A, 0x7F, 0x1E, 0x34, 0x27, 0x42, 0xCB, 0xED,
        0x37, 0x4D, 0x94, 0xD1, 0x36, 0xC6, 0xB8, 0x79, 0x5D, 0x45, 0xB3, 0x81,
        0x98, 0x30, 0xF2, 0xC0, 0x44, 0x91, 0xFA, 0xF0, 0x99, 0x0C, 0x62, 0xE4,
        0x8B, 0x80, 0x18, 0xB2, 0xC3, 0xE4, 0xA0, 0xFA, 0x31, 0x34, 0xCB, 0x67,
        0xFA, 0x83, 0xE1, 0x58, 0xC9, 0x94, 0xD9, 0x61, 0xC4, 0xCB, 0x21, 0x09,
        0x5C, 0x1B, 0xF9,
      ],
      [
        0x51, 0x54, 0xAD, 0x0D, 0x2C, 0xB2, 0x6E, 0x01, 0x27, 0x4F, 0xC5, 0x11,
        0x48, 0x49, 0x1F, 0x1B,
      ]
    ),
    (
      [
        0x12, 0x97, 0x6A, 0x08, 0xC4, 0x42, 0x6D, 0x0C,
        0xE8, 0xA8, 0x24, 0x07, 0xC4, 0xF4, 0x82, 0x07,
        0x80, 0xF8, 0xC2, 0x0A, 0xA7, 0x12, 0x02, 0xD1,
        0xE2, 0x91, 0x79, 0xCB, 0xCB, 0x55, 0x5A, 0x57,
      ],
      [
        0xAB, 0x08, 0x12, 0x72, 0x4A, 0x7F, 0x1E, 0x34, 0x27, 0x42, 0xCB, 0xED,
        0x37, 0x4D, 0x94, 0xD1, 0x36, 0xC6, 0xB8, 0x79, 0x5D, 0x45, 0xB3, 0x81,
        0x98, 0x30, 0xF2, 0xC0, 0x44, 0x91, 0xFA, 0xF0, 0x99, 0x0C, 0x62, 0xE4,
        0x8B, 0x80, 0x18, 0xB2, 0xC3, 0xE4, 0xA0, 0xFA, 0x31, 0x34, 0xCB, 0x67,
        0xFA, 0x83, 0xE1, 0x58, 0xC9, 0x94, 0xD9, 0x61, 0xC4, 0xCB, 0x21, 0x09,
        0x5C, 0x1B, 0xF9,
      ],
      [
        0x51, 0x54, 0xAD, 0x0D, 0x2C, 0xB2, 0x6E, 0x01, 0x27, 0x4F, 0xC5, 0x11,
        0x48, 0x49, 0x1F, 0x1B,
      ]
    ),
    # Test taken from
    # https://datatracker.ietf.org/doc/html/rfc8439#section-2.5.2.
    (
      [
        0x85, 0xD6, 0xBE, 0x78, 0x57, 0x55, 0x6D, 0x33, 0x7F, 0x44, 0x52, 0xFE,
        0x42, 0xD5, 0x06, 0xA8, 0x01, 0x03, 0x80, 0x8A, 0xFB, 0x0D, 0xB2, 0xFD,
        0x4A, 0xBF, 0xF6, 0xAF, 0x41, 0x49, 0xF5, 0x1B
      ],
      [
        0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
        0x63, 0x20, 0x46, 0x6F, 0x72, 0x75, 0x6D, 0x20, 0x52, 0x65, 0x73, 0x65,
        0x61, 0x72, 0x63, 0x68, 0x20, 0x47, 0x72, 0x6F, 0x75, 0x70
      ],
      [
        0xA8, 0x06, 0x1D, 0xC1, 0x30, 0x51, 0x36, 0xC6, 0xC2, 0x2B, 0x8B, 0xAF,
        0x0C, 0x01, 0x27, 0xA9
      ]
    )
  ]
}

fn pub tests(t: mut Tests) {
  t.test('Poly1305.hash') fn (t) {
    let tests = test_data
    let test = tests[0]
    let key = ByteArray.from_array(test.0)
    let input = ByteArray.from_array(test.1)
    let output = ByteArray.from_array(test.2)

    t.equal(Poly1305.hash(key, input).bytes, output)
  }

  t.test('Poly1305.finalize') fn (t) {
    test_data.into_iter.each fn (tuple) {
      let key = tuple.0
      let input = ByteArray.from_array(tuple.1)
      let output = ByteArray.from_array(tuple.2)
      let hasher = Poly1305.new(ByteArray.from_array(key))

      hasher.write(input)
      t.equal(hasher.finalize.bytes, output)
    }
  }
}
