import helpers::(fmt, hash)
import std::fs::path::Path
import std::test::Tests

fn pub tests(t: mut Tests) {
  t.test('String.to_upper') fn (t) {
    t.equal('hello'.to_upper, 'HELLO')
    t.equal('ä'.to_upper, 'Ä')
    t.equal('aä'.to_upper, 'AÄ')
  }

  t.test('String.to_lower') fn (t) {
    t.equal('HELLO'.to_lower, 'hello')
    t.equal('Ä'.to_lower, 'ä')
    t.equal('AÄ'.to_lower, 'aä')
  }

  t.test('String.size') fn (t) {
    t.equal('foo'.size, 3)
    t.equal('Ä'.size, 2)
    t.equal('AÄ'.size, 3)
  }

  t.test('String.byte') fn (t) {
    t.equal('foo'.byte(0), 102)
    t.equal('foo'.byte(1), 111)
  }

  t.test('String.slice') fn (t) {
    t.equal('hello_world'.slice(start: 0, length: 5), 'hello')
    t.equal('hello_world'.slice(start: 3, length: 5), 'lo_wo')
    t.equal('hello_world'.slice(start: 0, length: 20), 'hello_world')
    t.equal('🇳🇱'.slice(start: 0, length: 1), '🇳🇱')
  }

  t.test('String.slice_bytes') fn (t) {
    t.equal(
      'hello_world'.slice_bytes(start: 0, length: 5),
      'hello'.to_byte_array
    )

    t.equal(
      'hello_world'.slice_bytes(start: 0, length: 20),
      'hello_world'.to_byte_array
    )

    t.equal(
      '→foo'.slice_bytes(start: 0, length: 2),
      ByteArray.from_array([226, 134])
    )

    t.equal('→foo'.slice_bytes(start: 0, length: 6), '→foo'.to_byte_array)
    t.equal('→foo'.slice_bytes(start: 0, length: 3), '→'.to_byte_array)
    t.equal('foo'.slice_bytes(start: 42, length: 50), ByteArray.new)
    t.equal('foo'.slice_bytes(start: -5, length: 50), ByteArray.new)
  }

  t.test('String.byte_index') fn (t) {
    t.equal('hello'.byte_index(of: 'h', starting_at: 0), Option.Some(0))
    t.equal('hello'.byte_index(of: 'e', starting_at: 0), Option.Some(1))
    t.equal('hello'.byte_index(of: 'l', starting_at: 0), Option.Some(2))
    t.equal('hello'.byte_index(of: 'l', starting_at: 0), Option.Some(2))
    t.equal('😀x'.byte_index(of: 'x', starting_at: 0), Option.Some(4))
    t.equal('hello'.byte_index(of: '', starting_at: 0), Option.None)
    t.equal('hello'.byte_index(of: 'x', starting_at: 0), Option.None)
    t.equal(''.byte_index(of: 'x', starting_at: 0), Option.None)
    t.equal(''.byte_index(of: '', starting_at: 0), Option.None)
    t.equal('hello'.byte_index(of: 'l', starting_at: 2), Option.Some(2))
    t.equal('hello'.byte_index(of: 'l', starting_at: 3), Option.Some(3))
    t.equal('hello'.byte_index(of: 'h', starting_at: 1), Option.None)
  }

  t.test('String.starts_with?') fn (t) {
    t.true('hello'.starts_with?('hello'))
    t.true('😀foo'.starts_with?('😀'))
    t.true('foo😀'.starts_with?('foo'))

    t.false(''.starts_with?('x'))
    t.false(''.starts_with?(''))
    t.false('hello'.starts_with?(''))
    t.false('hello'.starts_with?('x'))
    t.false('😀foo'.starts_with?('foo'))
  }

  t.test('String.ends_with?') fn (t) {
    t.true('hello_world'.ends_with?('world'))
    t.true('hello_world'.ends_with?('d'))
    t.true('foo😀'.ends_with?('😀'))

    t.false('hello_world'.ends_with?(''))
    t.false('hello_world'.ends_with?('this is a long string'))
    t.false('hello_world'.ends_with?('x'))
    t.false(''.ends_with?('x'))
    t.false(''.ends_with?(''))
  }

  t.test('String.bytes') fn (t) {
    t.equal(''.bytes.to_array, [])
    t.equal('inko'.bytes.to_array, [105, 110, 107, 111])
  }

  t.test('String.split') fn (t) {
    t.equal('foo/bar/baz'.split('/').to_array, ['foo', 'bar', 'baz'])
    t.equal('foo::bar::baz'.split('::').to_array, ['foo', 'bar', 'baz'])
    t.equal('foo'.split('/').to_array, ['foo'])
    t.equal('foo→bar→baz'.split('→').to_array, ['foo', 'bar', 'baz'])
    t.equal('foo→bar→baz'.split('bar').to_array, ['foo→', '→baz'])
    t.equal('foo//bar/baz'.split('/').to_array, ['foo', '', 'bar', 'baz'])
    t.equal('foo/bar/baz'.split('').to_array, ['foo/bar/baz'])
    t.equal('foo/bar'.split('///////////////').to_array, ['foo/bar'])
    t.equal('foo/'.split('/').to_array, ['foo'])
    t.equal('foo//'.split('/').to_array, ['foo', ''])
    t.equal('foo///'.split('/').to_array, ['foo', '', ''])
    t.equal('foo//'.split('//').to_array, ['foo'])
    t.equal('foo///'.split('//').to_array, ['foo', '/'])
    t.equal(''.split('/').to_array, [])
  }

  t.test('String.empty?') fn (t) {
    t.true(''.empty?)
    t.false('foo'.empty?)
    t.false('😀'.empty?)
  }

  t.test('String.pad_start') fn (t) {
    t.equal('foo'.pad_start(with: '', length: 3), 'foo')
    t.equal('foo'.pad_start(with: '', length: 4), 'foo')
    t.equal('foo'.pad_start(with: '', length: 5), 'foo')
    t.equal('foo'.pad_start(with: ' ', length: 3), 'foo')
    t.equal('foo'.pad_start(with: ' ', length: 4), ' foo')
    t.equal('foo'.pad_start(with: ' ', length: 5), '  foo')
    t.equal('foo'.pad_start(with: 'ab', length: 3), 'foo')
    t.equal('foo'.pad_start(with: 'ab', length: 4), 'afoo')
    t.equal('foo'.pad_start(with: 'ab', length: 5), 'abfoo')
    t.equal('foo'.pad_start(with: 'ab', length: 6), 'abafoo')
    t.equal('foo'.pad_start(with: 'ab', length: 7), 'ababfoo')
  }

  t.test('String.pad_end') fn (t) {
    t.equal('foo'.pad_end(with: '', length: 3), 'foo')
    t.equal('foo'.pad_end(with: '', length: 4), 'foo')
    t.equal('foo'.pad_end(with: '', length: 5), 'foo')
    t.equal('foo'.pad_end(with: ' ', length: 3), 'foo')
    t.equal('foo'.pad_end(with: ' ', length: 4), 'foo ')
    t.equal('foo'.pad_end(with: ' ', length: 5), 'foo  ')
    t.equal('foo'.pad_end(with: 'ab', length: 3), 'foo')
    t.equal('foo'.pad_end(with: 'ab', length: 4), 'fooa')
    t.equal('foo'.pad_end(with: 'ab', length: 5), 'fooab')
    t.equal('foo'.pad_end(with: 'ab', length: 6), 'fooaba')
    t.equal('foo'.pad_end(with: 'ab', length: 7), 'fooabab')
  }

  t.test('String.repeat') fn (t) {
    t.equal('foo'.repeat(0), '')
    t.equal('foo'.repeat(1), 'foo')
    t.equal('foo'.repeat(2), 'foofoo')
  }

  t.test('String.characters') fn (t) {
    t.equal('foo'.characters.to_array, ['f', 'o', 'o'])
    t.equal('fóó'.characters.to_array, ['f', 'ó', 'ó'])
    t.equal('😀😃'.characters.to_array, ['😀', '😃'])
    t.equal('😀x😃'.characters.to_array, ['😀', 'x', '😃'])
    t.equal('🤦🏼‍♂️'.characters.to_array, ['🤦🏼‍♂️'])
  }

  t.test('String.contains?') fn (t) {
    t.true('foo'.contains?('foo'))
    t.true('foo'.contains?('o'))
    t.true('😀'.contains?('😀'))
    t.true('😀foo'.contains?('foo'))

    t.false('foo'.contains?(''))
    t.false(''.contains?(''))
    t.false(''.contains?('x'))
    t.false('foo'.contains?('x'))
    t.false('foo'.contains?('😃'))
  }

  t.test('String.to_byte_array') fn (t) {
    t.equal('inko'.to_byte_array, ByteArray.from_array([105, 110, 107, 111]))
  }

  t.test('String.into_byte_array') fn (t) {
    t.equal('inko'.into_byte_array, ByteArray.from_array([105, 110, 107, 111]))
  }

  t.test('String.clone') fn (t) {
    t.equal('foo'.clone, 'foo')
    t.equal('😃'.clone, '😃')
  }

  t.test('String.to_string') fn (t) {
    t.equal('foo'.to_string, 'foo')
    t.equal('😃'.to_string, '😃')
  }

  t.test('String.into_string') fn (t) {
    t.equal('foo'.into_string, 'foo')
    t.equal('😃'.into_string, '😃')
  }

  t.test('String.==') fn (t) {
    t.equal('foo', 'foo')
    t.equal('Ä', 'Ä')
    t.equal('AÄ', 'AÄ')
    t.equal('쿠키', '쿠키')

    t.not_equal('foo', 'bar')
    t.not_equal('Ä', '쿠')
    t.not_equal('AÄ', 'A쿠')
    t.not_equal('쿠Ä', '쿠키')
  }

  t.test('String.hash') fn (t) {
    t.equal(hash('foo'), hash('foo'))
  }

  t.test('String.+') fn (t) {
    t.equal('foo' + 'bar', 'foobar')
    t.equal('Ä' + 'Ä', 'ÄÄ')
    t.equal('A' + 'Ä', 'AÄ')
    t.equal('쿠' + '키', '쿠키')
    t.equal('😃' + '😃', '😃😃')
  }

  t.test('String.to_path') fn (t) {
    t.equal('foo.inko'.to_path, Path.new('foo.inko'))
  }

  t.test('String.into_path') fn (t) {
    t.equal('foo'.into_path, Path.new('foo'))
  }

  t.test('String.fmt') fn (t) {
    t.equal(fmt('foo'), '"foo"')
    t.equal(fmt('"foo"'), '"\"foo\""')
    t.equal(fmt("'foo'"), "\"'foo'\"")
    t.equal(fmt("foo\nbar"), '"foo\nbar"')
    t.equal(fmt("foo\tbar"), '"foo\tbar"')
    t.equal(fmt("foo\rbar"), '"foo\rbar"')
  }
}
