import std::env
import std::fs::dir
import std::test::Tests

fn pub tests(t: mut Tests) {
  t.test('dir.create') fn (t) {
    let path = env.temporary_directory.join("inko-test-dir-{t.id}")

    t.no_throw fn { try dir.create(path) }
    t.true(path.directory?)
    t.throw fn { try dir.create(path) }

    try! dir.remove(path)
  }

  t.test('dir.create_all') fn (t) {
    let root = env.temporary_directory.join("inko-test-dir-{t.id}")
    let path = root.join('foo').join('bar')

    t.no_throw fn { try dir.create_all(path) }
    t.true(path.directory?)
    t.no_throw fn { try dir.create_all(path) }

    try! dir.remove_all(root)
  }

  t.test('dir.remove') fn (t) {
    let path = env.temporary_directory.join("inko-test-dir-{t.id}")

    try! dir.create(path)

    t.no_throw fn { try dir.remove(path) }
    t.throw fn { try dir.remove(path) }
    t.false(path.directory?)
  }

  t.test('dir.remove_all') fn (t) {
    let root = env.temporary_directory.join("inko-test-dir-{t.id}")
    let path = root.join('foo').join('bar')

    try! dir.create_all(path)

    t.no_throw fn { try dir.remove_all(root) }
    t.throw fn { try dir.remove_all(root) }
    t.false(root.directory?)
  }

  t.test('dir.list') fn (t) {
    let root = env.temporary_directory.join("inko-test-dir-{t.id}")
    let foo = root.join('foo')
    let bar = root.join('bar')

    try! dir.create(root)
    try! dir.create(foo)
    try! dir.create(bar)

    let paths = try! dir.list(root)

    t.true(paths.contains?(foo))
    t.true(paths.contains?(bar))

    try! dir.remove_all(root)
  }
}
