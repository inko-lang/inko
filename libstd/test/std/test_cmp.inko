import helpers::(fmt)
import std::cmp::(Compare, Equal, Ordering)
import std::test::Tests

class enum Letter {
  case A
  case B
}

impl Compare for Letter {
  fn pub cmp(other: ref Self) -> Ordering {
    match self {
      case A -> match other {
        case A -> Ordering.Equal
        case B -> Ordering.Less
      }
      case B -> match other {
        case A -> Ordering.Greater
        case B -> Ordering.Equal
      }
    }
  }
}

impl Equal for Letter {
  fn pub ==(other: ref Self) -> Bool {
    match self {
      case A -> match other {
        case A -> true
        case B -> false
      }
      case B -> match other {
        case A -> false
        case B -> true
      }
    }
  }
}

fn pub tests(t: mut Tests) {
  t.test('Ordering.==') fn (t) {
    t.equal(Ordering.Less, Ordering.Less)
    t.equal(Ordering.Greater, Ordering.Greater)
    t.equal(Ordering.Equal, Ordering.Equal)
    t.not_equal(Ordering.Less, Ordering.Greater)
    t.not_equal(Ordering.Less, Ordering.Equal)
    t.not_equal(Ordering.Greater, Ordering.Less)
    t.not_equal(Ordering.Greater, Ordering.Equal)
    t.not_equal(Ordering.Equal, Ordering.Less)
    t.not_equal(Ordering.Equal, Ordering.Greater)
  }

  t.test('Ordering.fmt') fn (t) {
    t.equal(fmt(Ordering.Less), 'Less')
    t.equal(fmt(Ordering.Greater), 'Greater')
    t.equal(fmt(Ordering.Equal), 'Equal')
  }

  t.test('Compare.<') fn (t) {
    t.true(Letter.A < Letter.B)
    t.false(Letter.B < Letter.A)
  }

  t.test('Compare.<=') fn (t) {
    t.true(Letter.A <= Letter.A)
    t.true(Letter.A <= Letter.B)
    t.false(Letter.B <= Letter.A)
  }

  t.test('Compare.>') fn (t) {
    t.true(Letter.B > Letter.A)
    t.false(Letter.A > Letter.B)
  }

  t.test('Compare.>=') fn (t) {
    t.true(Letter.B >= Letter.A)
    t.true(Letter.B >= Letter.B)
    t.false(Letter.A >= Letter.B)
  }

  t.test('Equal.==') fn (t) {
    t.true(Letter.A == Letter.A)
    t.true(Letter.A != Letter.B)
  }
}
