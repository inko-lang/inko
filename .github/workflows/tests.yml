---
name: Run tests
on:
  workflow_call:

env:
  CARGO_HOME: ${{ github.workspace }}/.cargo-home
  # We set an explicit version to only install the components we need for CI.
  RUSTUP_TOOLCHAIN: '1.89'

jobs:
  vale:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: errata-ai/vale-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: 3.9.3
          reporter: github-check
          vale_flags: '--no-wrap --sort'

  cargo-deny:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2

  cargo-clippy:
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/inko-lang/ci:fedora-amd64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: cargo-clippy-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run clippy
        run: 'cargo clippy -- -D warnings'

  cargo-fmt:
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/inko-lang/ci:fedora-amd64
    steps:
      - uses: actions/checkout@v4
      - name: Run rustfmt
        run: 'cargo fmt --all --check'

  inko-fmt:
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/inko-lang/ci:fedora-amd64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: inko-fmt-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Build the compiler
        run: cargo build
      - name: Check the formatting
        run: 'cd std && cargo run -- fmt --check'

  compiler-linux:
    strategy:
      fail-fast: false
      matrix:
        target:
          - image: fedora-amd64
            name: amd64-linux-gnu
            version: 1.84
          - image: fedora-amd64
            name: amd64-linux-gnu
            version: 1.89
          - image: alpine
            name: amd64-linux-musl
            version: 1.89
    name: ${{ matrix.target.name }} ${{ matrix.target.version }} compiler
    timeout-minutes: 15
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/inko-lang/ci:${{ matrix.target.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: ${{ matrix.target.name }}-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run compiler tests
        run: cargo +${{ matrix.target.version }} test

  std-linux:
    strategy:
      fail-fast: false
      matrix:
        flags:
          - ''
          - '--release'
        target:
          - image: fedora-amd64
            name: amd64-linux-gnu
          - image: alpine
            name: amd64-linux-musl
    name: ${{ matrix.target.name }} std ${{ matrix.flags }}
    timeout-minutes: 15
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/inko-lang/ci:${{ matrix.target.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: '${{ env.CARGO_HOME }}'
          key: ${{ matrix.target.name }}-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run tests
        run: 'cd std && cargo run -- test --verify ${{ matrix.flags }}'

  compiler-mac:
    strategy:
      fail-fast: false
      matrix:
        target:
          - runner: macos-13
            name: amd64-mac-native
          - runner: macos-14
            name: arm64-mac-native
    name: ${{ matrix.target.name }} compiler
    timeout-minutes: 15
    runs-on: ${{ matrix.target.runner }}
    env:
      RUSTUP_HOME: ${{ github.workspace }}/.rustup-home
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.RUSTUP_HOME }}
          key: ${{ matrix.target.name }}-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Install dependencies
        run: ./ci/mac.sh
      - name: Run compiler tests
        run: cargo test

  std-mac:
    strategy:
      fail-fast: false
      matrix:
        flags:
          - ''
          - '--release'
        target:
          - runner: macos-13
            name: amd64-mac-native
          - runner: macos-14
            name: arm64-mac-native
    name: ${{ matrix.target.name }} std ${{ matrix.flags }}
    timeout-minutes: 15
    runs-on: ${{ matrix.target.runner }}
    env:
      RUSTUP_HOME: ${{ github.workspace }}/.rustup-home
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.RUSTUP_HOME }}
          key: ${{ matrix.target.name }}-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Install dependencies
        run: ./ci/mac.sh
      - name: Run tests
        run: 'cd std && cargo run -- test --verify ${{ matrix.flags }}'

  compiler-freebsd:
    name: amd64-freebsd-native compiler
    timeout-minutes: 15
    runs-on: ubuntu-24.04
    env:
      RUSTUP_HOME: ${{ github.workspace }}/.rustup-home
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.RUSTUP_HOME }}
          key: amd64-freebsd-native-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run tests
        uses: cross-platform-actions/action@v0.24.0
        with:
          operating_system: freebsd
          version: '14.0'
          memory: 8G
          environment_variables: 'CARGO_HOME RUSTUP_HOME'
          image_url: 'https://github.com/inko-lang/freebsd-builder/releases/download/v0.9.0/freebsd-14.0-x86-64.qcow2'
          run: ./ci/freebsd.sh compiler

  # FreeBSD builds are a bit slow due to the use of a VM, so we only run the
  # stdlib tests using the default optimization level.
  std-freebsd:
    name: amd64-freebsd-native std
    timeout-minutes: 15
    runs-on: ubuntu-24.04
    env:
      RUSTUP_HOME: ${{ github.workspace }}/.rustup-home
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.RUSTUP_HOME }}
          key: amd64-freebsd-native-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
      - name: Run tests
        uses: cross-platform-actions/action@v0.24.0
        with:
          operating_system: freebsd
          version: '14.0'
          memory: 8G
          environment_variables: 'CARGO_HOME RUSTUP_HOME'
          image_url: 'https://github.com/inko-lang/freebsd-builder/releases/download/v0.9.0/freebsd-14.0-x86-64.qcow2'
          run: ./ci/freebsd.sh std
